
Micro_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009454  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008b4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a38e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ced  00000000  00000000  0003a452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  0003f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e41  00000000  00000000  000407a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b065  00000000  00000000  000645e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cddc0  00000000  00000000  0007f646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d406  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  0014d458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080095c4 	.word	0x080095c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	080095c4 	.word	0x080095c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fdf0 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f870 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9b6 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f994 	bl	8000808 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e0:	f000 f8d4 	bl	800068c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f900 	bl	80006e8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f92e 	bl	8000748 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ec:	f008 fc22 	bl	8008d34 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f960 	bl	80007b4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f008 fc44 	bl	8008d80 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if(!mode_select)
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <main+0xd8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d125      	bne.n	800054c <main+0x80>
    {
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((lower_limit - 20) & 0x01));
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <main+0xdc>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	4826      	ldr	r0, [pc, #152]	; (80005ac <main+0xe0>)
 8000512:	f001 fca7 	bl	8001e64 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, ((lower_limit - 20) & 0x02));
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <main+0xdc>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3b14      	subs	r3, #20
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	461a      	mov	r2, r3
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	4820      	ldr	r0, [pc, #128]	; (80005ac <main+0xe0>)
 800052c:	f001 fc9a 	bl	8001e64 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, ((lower_limit - 20) & 0x04));
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <main+0xdc>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b14      	subs	r3, #20
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <main+0xe0>)
 8000546:	f001 fc8d 	bl	8001e64 <HAL_GPIO_WritePin>
 800054a:	e026      	b.n	800059a <main+0xce>
    }
    else
    {
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((upper_limit - 21) & 0x01));
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <main+0xe4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3b15      	subs	r3, #21
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <main+0xe0>)
 8000562:	f001 fc7f 	bl	8001e64 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, ((upper_limit - 21) & 0x02));
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <main+0xe4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	3b15      	subs	r3, #21
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <main+0xe0>)
 800057c:	f001 fc72 	bl	8001e64 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, ((upper_limit - 21) & 0x04));
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0xe4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3b15      	subs	r3, #21
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <main+0xe0>)
 8000596:	f001 fc65 	bl	8001e64 <HAL_GPIO_WritePin>
//    RH = ((Rh_byte1<<8)|Rh_byte2);
//
//    Temperature = (float) (TEMP/10.0);
//    Humidity = (float) (RH/10.0);

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800059a:	2101      	movs	r1, #1
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <main+0xe8>)
 800059e:	f001 fc49 	bl	8001e34 <HAL_GPIO_ReadPin>
    MX_USB_HOST_Process();
 80005a2:	e7a7      	b.n	80004f4 <main+0x28>
 80005a4:	20000248 	.word	0x20000248
 80005a8:	20000000 	.word	0x20000000
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	20000001 	.word	0x20000001
 80005b4:	40020000 	.word	0x40020000

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 fef6 	bl	80093b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000636:	2307      	movs	r3, #7
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fe30 	bl	80042a4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f000 fa8d 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f004 f891 	bl	8004794 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 fa76 	bl	8000b68 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f003 f807 	bl	80036dc <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 fa48 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000b0 	.word	0x200000b0
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_I2S3_Init+0x54>)
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <MX_I2S3_Init+0x58>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_I2S3_Init+0x54>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_I2S3_Init+0x54>)
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <MX_I2S3_Init+0x5c>)
 8000712:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2S3_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_I2S3_Init+0x54>)
 8000728:	f003 f91c 	bl	8003964 <HAL_I2S_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000732:	f000 fa19 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000104 	.word	0x20000104
 8000740:	40003c00 	.word	0x40003c00
 8000744:	00017700 	.word	0x00017700

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f004 fb5b 	bl	8004e54 <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f9e0 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000014c 	.word	0x2000014c
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f004 fbbb 	bl	8004f66 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f9b7 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200001a4 	.word	0x200001a4
 8000804:	40004400 	.word	0x40004400

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_DMA_Init+0x3c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <MX_DMA_Init+0x3c>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_DMA_Init+0x3c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2010      	movs	r0, #16
 8000830:	f000 fdb1 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000834:	2010      	movs	r0, #16
 8000836:	f000 fdca 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a76      	ldr	r2, [pc, #472]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a6f      	ldr	r2, [pc, #444]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a68      	ldr	r2, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a61      	ldr	r2, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a5a      	ldr	r2, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a53      	ldr	r2, [pc, #332]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f248 0108 	movw	r1, #32776	; 0x8008
 800090c:	484d      	ldr	r0, [pc, #308]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 800090e:	f001 faa9 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	484c      	ldr	r0, [pc, #304]	; (8000a48 <MX_GPIO_Init+0x200>)
 8000918:	f001 faa4 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091c:	2200      	movs	r2, #0
 800091e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x204>)
 8000924:	f001 fa9e 	bl	8001e64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RELAY_Pin;
 8000928:	f248 0308 	movw	r3, #32776	; 0x8008
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4840      	ldr	r0, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 8000942:	f001 f8db 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483a      	ldr	r0, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x200>)
 800095e:	f001 f8cd 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000962:	2308      	movs	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4832      	ldr	r0, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x200>)
 800097e:	f001 f8bd 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	482e      	ldr	r0, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x208>)
 8000998:	f001 f8b0 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_GPIO_Init+0x20c>)
 80009b0:	f001 f8a4 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4820      	ldr	r0, [pc, #128]	; (8000a54 <MX_GPIO_Init+0x20c>)
 80009d2:	f001 f893 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x204>)
 80009f0:	f001 f884 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f4:	2320      	movs	r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_GPIO_Init+0x204>)
 8000a08:	f001 f878 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 8000a22:	f001 f86b 	bl	8001afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2006      	movs	r0, #6
 8000a2c:	f000 fcb3 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a30:	2006      	movs	r0, #6
 8000a32:	f000 fccc 	bl	80013ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	/* interrupt gelen pini kontrol et */
	if(GPIO_Pin == GPIO_PIN_0)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d170      	bne.n	8000b4a <HAL_GPIO_EXTI_Callback+0xf2>
	{
		/* pine art arda basilip basilmadigini kontrol et */
		if((HAL_GetTick() - tick_counter) > 3000)
 8000a68:	f000 fb8a 	bl	8001180 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d924      	bls.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x6e>
		{
			/* mode u 0 <-> 1 olarak degistir */
			mode_select++;
 8000a7c:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000a86:	701a      	strb	r2, [r3, #0]
			if(mode_select > 1)
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d902      	bls.n	8000a96 <HAL_GPIO_EXTI_Callback+0x3e>
			{
				mode_select = 0;
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
			}
			if(mode_select)
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d009      	beq.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x5a>
			{
				/* turuncu ledi yak */
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	482d      	ldr	r0, [pc, #180]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x104>)
 8000aa6:	f001 f9dd 	bl	8001e64 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f000 fb74 	bl	8001198 <HAL_Delay>
 8000ab0:	e046      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0xe8>
			}
			else
			{
				/* turuncu ledi sondur */
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x104>)
 8000aba:	f001 f9d3 	bl	8001e64 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	f000 fb6a 	bl	8001198 <HAL_Delay>
 8000ac4:	e03c      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0xe8>
			}
		}
		else
		{
			/* mode == 0 ise*/
			if(!mode_select)
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x100>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11c      	bne.n	8000b08 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				lower_limit++;
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ad8:	701a      	strb	r2, [r3, #0]
				if(lower_limit > 27)
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b1b      	cmp	r3, #27
 8000ae0:	d902      	bls.n	8000ae8 <HAL_GPIO_EXTI_Callback+0x90>
				{
					lower_limit = 20;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000ae4:	2214      	movs	r2, #20
 8000ae6:	701a      	strb	r2, [r3, #0]
				}

				/* ust limitin alt limitten uyuk olmasini sagla */
				if(upper_limit <= lower_limit)
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d805      	bhi.n	8000b00 <HAL_GPIO_EXTI_Callback+0xa8>
				{
					upper_limit = lower_limit + 1;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000afe:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(50);
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f000 fb49 	bl	8001198 <HAL_Delay>
 8000b06:	e01b      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0xe8>
			}
			/* mode == 1 ise*/
			else
			{
				upper_limit++;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b12:	701a      	strb	r2, [r3, #0]
				if(upper_limit > 28)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b1c      	cmp	r3, #28
 8000b1a:	d902      	bls.n	8000b22 <HAL_GPIO_EXTI_Callback+0xca>
				{
					upper_limit = 21;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b1e:	2215      	movs	r2, #21
 8000b20:	701a      	strb	r2, [r3, #0]
				}

				/* alt limitin ust limikten kucuk olmasini sagla */
				if(upper_limit <= lower_limit)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d805      	bhi.n	8000b3a <HAL_GPIO_EXTI_Callback+0xe2>
				{
					 lower_limit = upper_limit - 1;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x108>)
 8000b38:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f000 fb2c 	bl	8001198 <HAL_Delay>
			}
		}
		/* tekrardan olcum yapabilmek icin tick i kaydet */
		tick_counter = HAL_GetTick();
 8000b40:	f000 fb1e 	bl	8001180 <HAL_GetTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000b48:	6013      	str	r3, [r2, #0]
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000024c 	.word	0x2000024c
 8000b58:	20000248 	.word	0x20000248
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000001 	.word	0x20000001

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_MspInit+0x94>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <HAL_MspInit+0x94>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_MspInit+0x94>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_MspInit+0x94>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <HAL_MspInit+0x94>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_MspInit+0x94>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f000 fbe4 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	f06f 000b 	mvn.w	r0, #11
 8000bc0:	f000 fbe9 	bl	8001396 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	f06f 000a 	mvn.w	r0, #10
 8000bcc:	f000 fbe3 	bl	8001396 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	f06f 0009 	mvn.w	r0, #9
 8000bd8:	f000 fbdd 	bl	8001396 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	f06f 0004 	mvn.w	r0, #4
 8000be4:	f000 fbd7 	bl	8001396 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	f06f 0003 	mvn.w	r0, #3
 8000bf0:	f000 fbd1 	bl	8001396 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	f06f 0001 	mvn.w	r0, #1
 8000bfc:	f000 fbcb 	bl	8001396 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_I2C_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <HAL_I2C_MspInit+0x8c>)
 8000c68:	f000 ff48 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <HAL_I2S_MspInit+0xf0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d15a      	bne.n	8000d82 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cd0:	23c0      	movs	r3, #192	; 0xc0
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 ff79 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ce8:	f7ff ff3e 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d40:	2310      	movs	r3, #16
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d50:	2306      	movs	r3, #6
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <HAL_I2S_MspInit+0xf8>)
 8000d5c:	f000 fece 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d72:	2306      	movs	r3, #6
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HAL_I2S_MspInit+0xfc>)
 8000d7e:	f000 febd 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40003c00 	.word	0x40003c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800

08000d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000df6:	23e0      	movs	r3, #224	; 0xe0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_SPI_MspInit+0x8c>)
 8000e12:	f000 fe73 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_UART_MspInit+0xf0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d161      	bne.n	8000f12 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e86:	230c      	movs	r3, #12
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <HAL_UART_MspInit+0xf8>)
 8000ea2:	f000 fe2b 	bl	8001afc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ea8:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <HAL_UART_MspInit+0x100>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000ee8:	f000 fa8c 	bl	8001404 <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000ef2:	f7ff fe39 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_UART_MspInit+0xfc>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2101      	movs	r1, #1
 8000f06:	2026      	movs	r0, #38	; 0x26
 8000f08:	f000 fa45 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0c:	2026      	movs	r0, #38	; 0x26
 8000f0e:	f000 fa5e 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	200001e8 	.word	0x200001e8
 8000f2c:	40026088 	.word	0x40026088

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f8ec 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 ff85 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream5_IRQHandler+0x10>)
 8000f9a:	f000 fb73 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001e8 	.word	0x200001e8

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f004 f827 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001a4 	.word	0x200001a4

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f001 f9eb 	bl	800239c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000634 	.word	0x20000634

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f008 f9a0 	bl	8009344 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000250 	.word	0x20000250
 8001038:	20000948 	.word	0x20000948

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f008 f95f 	bl	8009350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa1b 	bl	80004cc <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010a4:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 80010a8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010ac:	20000948 	.word	0x20000948

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f94f 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fd44 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f967 	bl	80013ea <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f92f 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000004 	.word	0x20000004
 8001150:	2000000c 	.word	0x2000000c
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000000c 	.word	0x2000000c
 800117c:	20000254 	.word	0x20000254

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000254 	.word	0x20000254

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff feb6 	bl	8001180 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e099      	b.n	8001554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001440:	e00f      	b.n	8001462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001442:	f7ff fe9d 	bl	8001180 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b05      	cmp	r3, #5
 800144e:	d908      	bls.n	8001462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2220      	movs	r2, #32
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e078      	b.n	8001554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e8      	bne.n	8001442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_DMA_Init+0x158>)
 800147c:	4013      	ands	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d107      	bne.n	80014cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4313      	orrs	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d117      	bne.n	8001526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00e      	beq.n	8001526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fa7b 	bl	8001a04 <DMA_CheckFifoParam>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001522:	2301      	movs	r3, #1
 8001524:	e016      	b.n	8001554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fa32 	bl	8001998 <DMA_CalcBaseAndBitshift>
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	223f      	movs	r2, #63	; 0x3f
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	f010803f 	.word	0xf010803f

08001560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800156e:	f7ff fe07 	bl	8001180 <HAL_GetTick>
 8001572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e052      	b.n	8001638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0216 	bic.w	r2, r2, #22
 80015a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_DMA_Abort+0x62>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0208 	bic.w	r2, r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e2:	e013      	b.n	800160c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015e4:	f7ff fdcc 	bl	8001180 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d90c      	bls.n	800160c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e015      	b.n	8001638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e4      	bne.n	80015e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	223f      	movs	r2, #63	; 0x3f
 8001620:	409a      	lsls	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d004      	beq.n	800165e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00c      	b.n	8001678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <HAL_DMA_IRQHandler+0x248>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8e      	ldr	r2, [pc, #568]	; (80018d0 <HAL_DMA_IRQHandler+0x24c>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	2208      	movs	r2, #8
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	2208      	movs	r2, #8
 80016de:	409a      	lsls	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	2201      	movs	r2, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	f043 0202 	orr.w	r2, r3, #2
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2204      	movs	r2, #4
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d012      	beq.n	800175c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2204      	movs	r2, #4
 800174a:	409a      	lsls	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	2210      	movs	r2, #16
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d043      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03c      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2210      	movs	r2, #16
 8001780:	409a      	lsls	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d018      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d024      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
 80017b2:	e01f      	b.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01b      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2220      	movs	r2, #32
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 808f 	beq.w	8001924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8087 	beq.w	8001924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2220      	movs	r2, #32
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b05      	cmp	r3, #5
 800182c:	d136      	bne.n	800189c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0216 	bic.w	r2, r2, #22
 800183c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800184c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <HAL_DMA_IRQHandler+0x1da>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0208 	bic.w	r2, r2, #8
 800186c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	223f      	movs	r2, #63	; 0x3f
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07e      	beq.n	8001990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
        }
        return;
 800189a:	e079      	b.n	8001990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01d      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d031      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
 80018c8:	e02c      	b.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
 80018ca:	bf00      	nop
 80018cc:	20000004 	.word	0x20000004
 80018d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
 80018e4:	e01e      	b.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0210 	bic.w	r2, r2, #16
 8001902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	2b00      	cmp	r3, #0
 800192a:	d032      	beq.n	8001992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d022      	beq.n	800197e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2205      	movs	r2, #5
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	d307      	bcc.n	800196c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f2      	bne.n	8001950 <HAL_DMA_IRQHandler+0x2cc>
 800196a:	e000      	b.n	800196e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800196c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e000      	b.n	8001992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001990:	bf00      	nop
    }
  }
}
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b10      	subs	r3, #16
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <DMA_CalcBaseAndBitshift+0x64>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <DMA_CalcBaseAndBitshift+0x68>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d909      	bls.n	80019da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58
 80019d8:	e007      	b.n	80019ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	aaaaaaab 	.word	0xaaaaaaab
 8001a00:	080095f8 	.word	0x080095f8

08001a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d856      	bhi.n	8001ad2 <DMA_CheckFifoParam+0xce>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <DMA_CheckFifoParam+0x28>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4f 	.word	0x08001a4f
 8001a34:	08001a3d 	.word	0x08001a3d
 8001a38:	08001ad3 	.word	0x08001ad3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d046      	beq.n	8001ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4c:	e043      	b.n	8001ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a56:	d140      	bne.n	8001ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5c:	e03d      	b.n	8001ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a66:	d121      	bne.n	8001aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d837      	bhi.n	8001ade <DMA_CheckFifoParam+0xda>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x70>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a8b 	.word	0x08001a8b
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001a9d 	.word	0x08001a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      break;
 8001a88:	e030      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d025      	beq.n	8001ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9a:	e022      	b.n	8001ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa4:	d11f      	bne.n	8001ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aaa:	e01c      	b.n	8001ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d903      	bls.n	8001aba <DMA_CheckFifoParam+0xb6>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d003      	beq.n	8001ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ab8:	e018      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      break;
 8001abe:	e015      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e00b      	b.n	8001aea <DMA_CheckFifoParam+0xe6>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e00a      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e008      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e006      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e004      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
    }
  } 
  
  return status; 
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e16b      	b.n	8001df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 815a 	bne.w	8001dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d005      	beq.n	8001b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d130      	bne.n	8001bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 0201 	and.w	r2, r3, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d017      	beq.n	8001bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80b4 	beq.w	8001dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b60      	ldr	r3, [pc, #384]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a5f      	ldr	r2, [pc, #380]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a5b      	ldr	r2, [pc, #364]	; (8001e0c <HAL_GPIO_Init+0x310>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_GPIO_Init+0x314>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <HAL_GPIO_Init+0x318>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x222>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_GPIO_Init+0x31c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x21e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <HAL_GPIO_Init+0x320>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x21a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4e      	ldr	r2, [pc, #312]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x216>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4d      	ldr	r2, [pc, #308]	; (8001e24 <HAL_GPIO_Init+0x328>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x212>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_GPIO_Init+0x32c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x20a>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e00e      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d06:	2308      	movs	r3, #8
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x310>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_GPIO_Init+0x334>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae90 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fdce 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b08f      	sub	sp, #60	; 0x3c
 8001ecc:	af0a      	add	r7, sp, #40	; 0x28
 8001ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e054      	b.n	8001f84 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f006 ff7b 	bl	8008df0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 ffa9 	bl	8005e70 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	687e      	ldr	r6, [r7, #4]
 8001f26:	466d      	mov	r5, sp
 8001f28:	f106 0410 	add.w	r4, r6, #16
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3c:	1d33      	adds	r3, r6, #4
 8001f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	f003 ff23 	bl	8005d8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 ffa0 	bl	8005e92 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	687e      	ldr	r6, [r7, #4]
 8001f5a:	466d      	mov	r5, sp
 8001f5c:	f106 0410 	add.w	r4, r6, #16
 8001f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f70:	1d33      	adds	r3, r6, #4
 8001f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f004 f929 	bl	80061cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f8c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	70fb      	strb	r3, [r7, #3]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70bb      	strb	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_HCD_HC_Init+0x28>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e076      	b.n	80020a2 <HAL_HCD_HC_Init+0x116>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	333d      	adds	r3, #61	; 0x3d
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3338      	adds	r3, #56	; 0x38
 8001fdc:	787a      	ldrb	r2, [r7, #1]
 8001fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3340      	adds	r3, #64	; 0x40
 8001fee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ff0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3339      	adds	r3, #57	; 0x39
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	333f      	adds	r3, #63	; 0x3f
 8002012:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	78ba      	ldrb	r2, [r7, #2]
 800201c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002020:	b2d0      	uxtb	r0, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	333a      	adds	r3, #58	; 0x3a
 800202e:	4602      	mov	r2, r0
 8002030:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002032:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da09      	bge.n	800204e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	333b      	adds	r3, #59	; 0x3b
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e008      	b.n	8002060 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	333b      	adds	r3, #59	; 0x3b
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	333c      	adds	r3, #60	; 0x3c
 800206e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002072:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	787c      	ldrb	r4, [r7, #1]
 800207a:	78ba      	ldrb	r2, [r7, #2]
 800207c:	78f9      	ldrb	r1, [r7, #3]
 800207e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f897 3020 	ldrb.w	r3, [r7, #32]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4623      	mov	r3, r4
 8002090:	f004 fa22 	bl	80064d8 <USB_HC_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}

080020aa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_HCD_HC_Halt+0x1e>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e00f      	b.n	80020e8 <HAL_HCD_HC_Halt+0x3e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fc72 	bl	80069c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	70fb      	strb	r3, [r7, #3]
 8002102:	460b      	mov	r3, r1
 8002104:	70bb      	strb	r3, [r7, #2]
 8002106:	4613      	mov	r3, r2
 8002108:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	333b      	adds	r3, #59	; 0x3b
 8002118:	78ba      	ldrb	r2, [r7, #2]
 800211a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333f      	adds	r3, #63	; 0x3f
 800212a:	787a      	ldrb	r2, [r7, #1]
 800212c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800212e:	7c3b      	ldrb	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d112      	bne.n	800215a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2203      	movs	r2, #3
 8002144:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	333d      	adds	r3, #61	; 0x3d
 8002154:	7f3a      	ldrb	r2, [r7, #28]
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e008      	b.n	800216c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3342      	adds	r3, #66	; 0x42
 8002168:	2202      	movs	r2, #2
 800216a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b03      	cmp	r3, #3
 8002170:	f200 80c6 	bhi.w	8002300 <HAL_HCD_HC_SubmitRequest+0x210>
 8002174:	a201      	add	r2, pc, #4	; (adr r2, 800217c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	0800218d 	.word	0x0800218d
 8002180:	080022ed 	.word	0x080022ed
 8002184:	080021f1 	.word	0x080021f1
 8002188:	0800226f 	.word	0x0800226f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800218c:	7c3b      	ldrb	r3, [r7, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	f040 80b8 	bne.w	8002304 <HAL_HCD_HC_SubmitRequest+0x214>
 8002194:	78bb      	ldrb	r3, [r7, #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80b4 	bne.w	8002304 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800219c:	8b3b      	ldrh	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d108      	bne.n	80021b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3355      	adds	r3, #85	; 0x55
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3355      	adds	r3, #85	; 0x55
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3342      	adds	r3, #66	; 0x42
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021da:	e093      	b.n	8002304 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3342      	adds	r3, #66	; 0x42
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
      break;
 80021ee:	e089      	b.n	8002304 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021f0:	78bb      	ldrb	r3, [r7, #2]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11d      	bne.n	8002232 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3355      	adds	r3, #85	; 0x55
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3342      	adds	r3, #66	; 0x42
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800221c:	e073      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3342      	adds	r3, #66	; 0x42
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
      break;
 8002230:	e069      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3354      	adds	r3, #84	; 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3342      	adds	r3, #66	; 0x42
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
      break;
 8002258:	e055      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3342      	adds	r3, #66	; 0x42
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      break;
 800226c:	e04b      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11d      	bne.n	80022b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3355      	adds	r3, #85	; 0x55
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3342      	adds	r3, #66	; 0x42
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229a:	e034      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3342      	adds	r3, #66	; 0x42
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
      break;
 80022ae:	e02a      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3354      	adds	r3, #84	; 0x54
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3342      	adds	r3, #66	; 0x42
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
      break;
 80022d6:	e016      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3342      	adds	r3, #66	; 0x42
 80022e6:	2202      	movs	r2, #2
 80022e8:	701a      	strb	r2, [r3, #0]
      break;
 80022ea:	e00c      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3342      	adds	r3, #66	; 0x42
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002300:	bf00      	nop
 8002302:	e000      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002304:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3344      	adds	r3, #68	; 0x44
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	8b3a      	ldrh	r2, [r7, #24]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	202c      	movs	r0, #44	; 0x2c
 8002320:	fb00 f303 	mul.w	r3, r0, r3
 8002324:	440b      	add	r3, r1
 8002326:	334c      	adds	r3, #76	; 0x4c
 8002328:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3350      	adds	r3, #80	; 0x50
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3339      	adds	r3, #57	; 0x39
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	222c      	movs	r2, #44	; 0x2c
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	3338      	adds	r3, #56	; 0x38
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	18d1      	adds	r1, r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	f004 f9c6 	bl	800671c <USB_HC_StartXfer>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fec7 	bl	8006146 <USB_GetMode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 80f6 	bne.w	80025ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 feab 	bl	8006120 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80ec 	beq.w	80025aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fea2 	bl	8006120 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e6:	d104      	bne.n	80023f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fe92 	bl	8006120 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002406:	d104      	bne.n	8002412 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002410:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fe82 	bl	8006120 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002426:	d104      	bne.n	8002432 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002430:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fe72 	bl	8006120 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d103      	bne.n	800244e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fe64 	bl	8006120 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002462:	d11c      	bne.n	800249e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800246c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800247e:	2110      	movs	r1, #16
 8002480:	6938      	ldr	r0, [r7, #16]
 8002482:	f003 fd53 	bl	8005f2c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002486:	6938      	ldr	r0, [r7, #16]
 8002488:	f003 fd84 	bl	8005f94 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f003 ff5a 	bl	800634c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f006 fd27 	bl	8008eec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fe3c 	bl	8006120 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b2:	d102      	bne.n	80024ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f001 f89e 	bl	80035f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fe2e 	bl	8006120 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d106      	bne.n	80024dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f006 fcf0 	bl	8008eb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2208      	movs	r2, #8
 80024da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fe1d 	bl	8006120 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d101      	bne.n	80024f4 <HAL_HCD_IRQHandler+0x158>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_HCD_IRQHandler+0x15a>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 ffa1 	bl	8003452 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0210 	orr.w	r2, r2, #16
 800251e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fdfb 	bl	8006120 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002534:	d13a      	bne.n	80025ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fa30 	bl	80069a0 <USB_HC_ReadInterrupt>
 8002540:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e025      	b.n	8002594 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d018      	beq.n	800258e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002572:	d106      	bne.n	8002582 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8ab 	bl	80026d6 <HCD_HC_IN_IRQHandler>
 8002580:	e005      	b.n	800258e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fbf9 	bl	8002d80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3d4      	bcc.n	8002548 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	615a      	str	r2, [r3, #20]
 80025a8:	e000      	b.n	80025ac <HAL_HCD_IRQHandler+0x210>
      return;
 80025aa:	bf00      	nop
    }
  }
}
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_HCD_Start+0x16>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e013      	b.n	80025f0 <HAL_HCD_Start+0x3e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 ff1c 	bl	8006414 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fc34 	bl	8005e4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_HCD_Stop+0x16>
 800260a:	2302      	movs	r3, #2
 800260c:	e00d      	b.n	800262a <HAL_HCD_Stop+0x32>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fb0a 	bl	8006c34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 febe 	bl	80063c0 <USB_ResetPort>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	781b      	ldrb	r3, [r3, #0]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3350      	adds	r3, #80	; 0x50
 8002690:	681b      	ldr	r3, [r3, #0]
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 ff02 	bl	80064b4 <USB_GetCurrentFrame>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fedd 	bl	8006486 <USB_GetHostSpeed>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d11a      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	2304      	movs	r3, #4
 8002716:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	2206      	movs	r2, #6
 8002728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f004 f944 	bl	80069c2 <USB_HC_Halt>
 800273a:	e0af      	b.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002752:	d11b      	bne.n	800278c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	2207      	movs	r2, #7
 8002778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f004 f91c 	bl	80069c2 <USB_HC_Halt>
 800278a:	e087      	b.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d109      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	2320      	movs	r3, #32
 80027b2:	6093      	str	r3, [r2, #8]
 80027b4:	e072      	b.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d11a      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	461a      	mov	r2, r3
 80027da:	2308      	movs	r3, #8
 80027dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3361      	adds	r3, #97	; 0x61
 80027ec:	2205      	movs	r2, #5
 80027ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 f8e1 	bl	80069c2 <USB_HC_Halt>
 8002800:	e04c      	b.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002818:	d11b      	bne.n	8002852 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3361      	adds	r3, #97	; 0x61
 800283c:	2208      	movs	r2, #8
 800283e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f8b9 	bl	80069c2 <USB_HC_Halt>
 8002850:	e024      	b.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d119      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3361      	adds	r3, #97	; 0x61
 8002888:	2206      	movs	r2, #6
 800288a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f004 f893 	bl	80069c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d112      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 f87f 	bl	80069c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028d8:	e24e      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 80df 	bne.w	8002ab0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3348      	adds	r3, #72	; 0x48
 8002908:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0159      	lsls	r1, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	440b      	add	r3, r1
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	fb00 f303 	mul.w	r3, r0, r3
 8002928:	440b      	add	r3, r1
 800292a:	3350      	adds	r3, #80	; 0x50
 800292c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3361      	adds	r3, #97	; 0x61
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	335c      	adds	r3, #92	; 0x5c
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333f      	adds	r3, #63	; 0x3f
 8002986:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002988:	2b02      	cmp	r3, #2
 800298a:	d111      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f004 f813 	bl	80069c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
 80029ae:	e03a      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	333f      	adds	r3, #63	; 0x3f
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d009      	beq.n	80029d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	333f      	adds	r3, #63	; 0x3f
 80029d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d126      	bne.n	8002a26 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	b2d9      	uxtb	r1, r3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	202c      	movs	r0, #44	; 0x2c
 8002a14:	fb00 f303 	mul.w	r3, r0, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f006 fa71 	bl	8008f08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d12b      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	202c      	movs	r0, #44	; 0x2c
 8002a44:	fb00 f202 	mul.w	r2, r0, r2
 8002a48:	440a      	add	r2, r1
 8002a4a:	3240      	adds	r2, #64	; 0x40
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 818e 	beq.w	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3354      	adds	r3, #84	; 0x54
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2d8      	uxtb	r0, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3354      	adds	r3, #84	; 0x54
 8002a80:	4602      	mov	r2, r0
 8002a82:	701a      	strb	r2, [r3, #0]
}
 8002a84:	e178      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3354      	adds	r3, #84	; 0x54
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	f083 0301 	eor.w	r3, r3, #1
 8002a9a:	b2d8      	uxtb	r0, r3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3354      	adds	r3, #84	; 0x54
 8002aaa:	4602      	mov	r2, r0
 8002aac:	701a      	strb	r2, [r3, #0]
}
 8002aae:	e163      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	f040 80f6 	bne.w	8002cb4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3361      	adds	r3, #97	; 0x61
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d109      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e0c9      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d109      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3360      	adds	r3, #96	; 0x60
 8002b12:	2205      	movs	r2, #5
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e0b5      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d009      	beq.n	8002b40 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3361      	adds	r3, #97	; 0x61
 8002b3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d150      	bne.n	8002be2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	335c      	adds	r3, #92	; 0x5c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d912      	bls.n	8002b9c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2204      	movs	r2, #4
 8002b98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b9a:	e073      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3360      	adds	r3, #96	; 0x60
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bcc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002be0:	e050      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3361      	adds	r3, #97	; 0x61
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d122      	bne.n	8002c3c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e023      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3361      	adds	r3, #97	; 0x61
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b07      	cmp	r3, #7
 8002c4e:	d119      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	335c      	adds	r3, #92	; 0x5c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	202c      	movs	r0, #44	; 0x2c
 8002c68:	fb00 f303 	mul.w	r3, r0, r3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	2204      	movs	r2, #4
 8002c82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2302      	movs	r3, #2
 8002c94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	b2d9      	uxtb	r1, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	202c      	movs	r0, #44	; 0x2c
 8002ca0:	fb00 f303 	mul.w	r3, r0, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3360      	adds	r3, #96	; 0x60
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f006 f92b 	bl	8008f08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cb2:	e061      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d156      	bne.n	8002d78 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	333f      	adds	r3, #63	; 0x3f
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d111      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fe61 	bl	80069c2 <USB_HC_Halt>
 8002d00:	e031      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	333f      	adds	r3, #63	; 0x3f
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	333f      	adds	r3, #63	; 0x3f
 8002d24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d11d      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	2203      	movs	r2, #3
 8002d54:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fe2e 	bl	80069c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	2310      	movs	r3, #16
 8002d76:	6093      	str	r3, [r2, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11a      	bne.n	8002de6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3361      	adds	r3, #97	; 0x61
 8002dd0:	2206      	movs	r2, #6
 8002dd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fdef 	bl	80069c2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002de4:	e331      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d12e      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	333d      	adds	r3, #61	; 0x3d
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	f040 8313 	bne.w	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	333d      	adds	r3, #61	; 0x3d
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3360      	adds	r3, #96	; 0x60
 8002e44:	2202      	movs	r2, #2
 8002e46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fdb5 	bl	80069c2 <USB_HC_Halt>
}
 8002e58:	e2f7      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d112      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fd96 	bl	80069c2 <USB_HC_Halt>
}
 8002e96:	e2d8      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d140      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d111      	bne.n	8002efa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	333d      	adds	r3, #61	; 0x3d
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3361      	adds	r3, #97	; 0x61
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fd4a 	bl	80069c2 <USB_HC_Halt>
}
 8002f2e:	e28c      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d12c      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3361      	adds	r3, #97	; 0x61
 8002f54:	2204      	movs	r2, #4
 8002f56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	333d      	adds	r3, #61	; 0x3d
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	335c      	adds	r3, #92	; 0x5c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fd1b 	bl	80069c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2340      	movs	r3, #64	; 0x40
 8002f9c:	6093      	str	r3, [r2, #8]
}
 8002f9e:	e254      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d11a      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fcec 	bl	80069c2 <USB_HC_Halt>
}
 8002fea:	e22e      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d140      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	335c      	adds	r3, #92	; 0x5c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3361      	adds	r3, #97	; 0x61
 8003022:	2203      	movs	r2, #3
 8003024:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333d      	adds	r3, #61	; 0x3d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d112      	bne.n	8003060 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	333c      	adds	r3, #60	; 0x3c
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333d      	adds	r3, #61	; 0x3d
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fca9 	bl	80069c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2310      	movs	r3, #16
 8003080:	6093      	str	r3, [r2, #8]
}
 8003082:	e1e2      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d164      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d111      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3361      	adds	r3, #97	; 0x61
 80030b0:	2206      	movs	r2, #6
 80030b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fc7f 	bl	80069c2 <USB_HC_Halt>
 80030c4:	e044      	b.n	8003150 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	202c      	movs	r0, #44	; 0x2c
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	440b      	add	r3, r1
 80030e4:	335c      	adds	r3, #92	; 0x5c
 80030e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	335c      	adds	r3, #92	; 0x5c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d920      	bls.n	800313e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	335c      	adds	r3, #92	; 0x5c
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3360      	adds	r3, #96	; 0x60
 800311c:	2204      	movs	r2, #4
 800311e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	b2d9      	uxtb	r1, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	202c      	movs	r0, #44	; 0x2c
 800312a:	fb00 f303 	mul.w	r3, r0, r3
 800312e:	4413      	add	r3, r2
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f005 fee6 	bl	8008f08 <HAL_HCD_HC_NotifyURBChange_Callback>
 800313c:	e008      	b.n	8003150 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	6093      	str	r3, [r2, #8]
}
 8003162:	e172      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	d11b      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3361      	adds	r3, #97	; 0x61
 800318a:	2208      	movs	r2, #8
 800318c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fc12 	bl	80069c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b0:	6093      	str	r3, [r2, #8]
}
 80031b2:	e14a      	b.n	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	f040 813f 	bne.w	800344a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3361      	adds	r3, #97	; 0x61
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d17d      	bne.n	80032dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	333f      	adds	r3, #63	; 0x3f
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d00a      	beq.n	800321c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	333f      	adds	r3, #63	; 0x3f
 8003214:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	f040 8100 	bne.w	800341c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3355      	adds	r3, #85	; 0x55
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2d8      	uxtb	r0, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3355      	adds	r3, #85	; 0x55
 8003248:	4602      	mov	r2, r0
 800324a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 80e3 	bne.w	800341c <HCD_HC_OUT_IRQHandler+0x69c>
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	334c      	adds	r3, #76	; 0x4c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80d8 	beq.w	800341c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	334c      	adds	r3, #76	; 0x4c
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	202c      	movs	r0, #44	; 0x2c
 8003282:	fb00 f202 	mul.w	r2, r0, r2
 8003286:	440a      	add	r2, r1
 8003288:	3240      	adds	r2, #64	; 0x40
 800328a:	8812      	ldrh	r2, [r2, #0]
 800328c:	4413      	add	r3, r2
 800328e:	3b01      	subs	r3, #1
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	202c      	movs	r0, #44	; 0x2c
 8003296:	fb00 f202 	mul.w	r2, r0, r2
 800329a:	440a      	add	r2, r1
 800329c:	3240      	adds	r2, #64	; 0x40
 800329e:	8812      	ldrh	r2, [r2, #0]
 80032a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80b5 	beq.w	800341c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3355      	adds	r3, #85	; 0x55
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2d8      	uxtb	r0, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3355      	adds	r3, #85	; 0x55
 80032d6:	4602      	mov	r2, r0
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e09f      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3361      	adds	r3, #97	; 0x61
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d109      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3360      	adds	r3, #96	; 0x60
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e08b      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d109      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e077      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3361      	adds	r3, #97	; 0x61
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d109      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3360      	adds	r3, #96	; 0x60
 800334e:	2205      	movs	r2, #5
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e063      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b06      	cmp	r3, #6
 8003366:	d009      	beq.n	800337c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3361      	adds	r3, #97	; 0x61
 8003376:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003378:	2b08      	cmp	r3, #8
 800337a:	d14f      	bne.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	335c      	adds	r3, #92	; 0x5c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	202c      	movs	r0, #44	; 0x2c
 8003394:	fb00 f303 	mul.w	r3, r0, r3
 8003398:	440b      	add	r3, r1
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d912      	bls.n	80033d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	335c      	adds	r3, #92	; 0x5c
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3360      	adds	r3, #96	; 0x60
 80033d2:	2204      	movs	r2, #4
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e021      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003400:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003408:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	461a      	mov	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2302      	movs	r3, #2
 800342c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	b2d9      	uxtb	r1, r3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	202c      	movs	r0, #44	; 0x2c
 8003438:	fb00 f303 	mul.w	r3, r0, r3
 800343c:	4413      	add	r3, r2
 800343e:	3360      	adds	r3, #96	; 0x60
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f005 fd5f 	bl	8008f08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08a      	sub	sp, #40	; 0x28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x46>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b05      	cmp	r3, #5
 8003492:	f000 80a9 	beq.w	80035e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003496:	e0aa      	b.n	80035ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a6 	beq.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3344      	adds	r3, #68	; 0x44
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 809b 	beq.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3350      	adds	r3, #80	; 0x50
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	441a      	add	r2, r3
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	202c      	movs	r0, #44	; 0x2c
 80034d0:	fb00 f303 	mul.w	r3, r0, r3
 80034d4:	440b      	add	r3, r1
 80034d6:	334c      	adds	r3, #76	; 0x4c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d87a      	bhi.n	80035d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3344      	adds	r3, #68	; 0x44
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	b292      	uxth	r2, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f002 fdba 	bl	8006070 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3344      	adds	r3, #68	; 0x44
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	441a      	add	r2, r3
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	202c      	movs	r0, #44	; 0x2c
 8003516:	fb00 f303 	mul.w	r3, r0, r3
 800351a:	440b      	add	r3, r1
 800351c:	3344      	adds	r3, #68	; 0x44
 800351e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	441a      	add	r2, r3
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	202c      	movs	r0, #44	; 0x2c
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	440b      	add	r3, r1
 8003540:	3350      	adds	r3, #80	; 0x50
 8003542:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	0cdb      	lsrs	r3, r3, #19
 8003554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003558:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3340      	adds	r3, #64	; 0x40
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4293      	cmp	r3, r2
 8003570:	d13c      	bne.n	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d039      	beq.n	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800358e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003596:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3354      	adds	r3, #84	; 0x54
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2d8      	uxtb	r0, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3354      	adds	r3, #84	; 0x54
 80035ce:	4602      	mov	r2, r0
 80035d0:	701a      	strb	r2, [r3, #0]
      break;
 80035d2:	e00b      	b.n	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3360      	adds	r3, #96	; 0x60
 80035e2:	2204      	movs	r2, #4
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e001      	b.n	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035ec:	bf00      	nop
  }
}
 80035ee:	bf00      	nop
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003622:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d10b      	bne.n	8003646 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f005 fc49 	bl	8008ed0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d132      	bne.n	80036b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d126      	bne.n	80036b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d113      	bne.n	8003692 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003674:	d106      	bne.n	8003684 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fe65 	bl	800634c <USB_InitFSLSPClkSel>
 8003682:	e011      	b.n	80036a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f002 fe5e 	bl	800634c <USB_InitFSLSPClkSel>
 8003690:	e00a      	b.n	80036a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a0:	461a      	mov	r2, r3
 80036a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f005 fc3b 	bl	8008f24 <HAL_HCD_PortEnabled_Callback>
 80036ae:	e002      	b.n	80036b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f005 fc45 	bl	8008f40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d103      	bne.n	80036c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f043 0320 	orr.w	r3, r3, #32
 80036c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6013      	str	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e12b      	b.n	8003946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fa82 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003740:	f001 fa20 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a81      	ldr	r2, [pc, #516]	; (8003950 <HAL_I2C_Init+0x274>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d807      	bhi.n	8003760 <HAL_I2C_Init+0x84>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_I2C_Init+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e006      	b.n	800376e <HAL_I2C_Init+0x92>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a7d      	ldr	r2, [pc, #500]	; (8003958 <HAL_I2C_Init+0x27c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	bf94      	ite	ls
 8003768:	2301      	movls	r3, #1
 800376a:	2300      	movhi	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0e7      	b.n	8003946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a78      	ldr	r2, [pc, #480]	; (800395c <HAL_I2C_Init+0x280>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0c9b      	lsrs	r3, r3, #18
 8003780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_I2C_Init+0x274>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d802      	bhi.n	80037b0 <HAL_I2C_Init+0xd4>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	e009      	b.n	80037c4 <HAL_I2C_Init+0xe8>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	4a69      	ldr	r2, [pc, #420]	; (8003960 <HAL_I2C_Init+0x284>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	3301      	adds	r3, #1
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	495c      	ldr	r1, [pc, #368]	; (8003950 <HAL_I2C_Init+0x274>)
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d819      	bhi.n	8003818 <HAL_I2C_Init+0x13c>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e59      	subs	r1, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037f8:	400b      	ands	r3, r1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_I2C_Init+0x138>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1e59      	subs	r1, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fbb1 f3f3 	udiv	r3, r1, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	e051      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003814:	2304      	movs	r3, #4
 8003816:	e04f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d111      	bne.n	8003844 <HAL_I2C_Init+0x168>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e012      	b.n	800386a <HAL_I2C_Init+0x18e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	0099      	lsls	r1, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x196>
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10e      	bne.n	8003898 <HAL_I2C_Init+0x1bc>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e58      	subs	r0, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	440b      	add	r3, r1
 8003888:	fbb0 f3f3 	udiv	r3, r0, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003896:	e00f      	b.n	80038b8 <HAL_I2C_Init+0x1dc>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6911      	ldr	r1, [r2, #16]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	000186a0 	.word	0x000186a0
 8003954:	001e847f 	.word	0x001e847f
 8003958:	003d08ff 	.word	0x003d08ff
 800395c:	431bde83 	.word	0x431bde83
 8003960:	10624dd3 	.word	0x10624dd3

08003964 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e128      	b.n	8003bc8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a90      	ldr	r2, [pc, #576]	; (8003bd0 <HAL_I2S_Init+0x26c>)
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7fd f983 	bl	8000c9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2202      	movs	r2, #2
 80039b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d060      	beq.n	8003a84 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ca:	2310      	movs	r3, #16
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e001      	b.n	80039d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d802      	bhi.n	80039e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f001 f9d8 	bl	8004d98 <HAL_RCCEx_GetPeriphCLKFreq>
 80039e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f2:	d125      	bne.n	8003a40 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	461a      	mov	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	3305      	adds	r3, #5
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	e01f      	b.n	8003a5e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	3305      	adds	r3, #5
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e00e      	b.n	8003a5e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4a5c      	ldr	r2, [pc, #368]	; (8003bd4 <HAL_I2S_Init+0x270>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	e003      	b.n	8003a8c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d902      	bls.n	8003a98 <HAL_I2S_Init+0x134>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2bff      	cmp	r3, #255	; 0xff
 8003a96:	d907      	bls.n	8003aa8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	f043 0210 	orr.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e08f      	b.n	8003bc8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	ea42 0103 	orr.w	r1, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ac6:	f023 030f 	bic.w	r3, r3, #15
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6851      	ldr	r1, [r2, #4]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6892      	ldr	r2, [r2, #8]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68d2      	ldr	r2, [r2, #12]
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6992      	ldr	r2, [r2, #24]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d161      	bne.n	8003bb8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_I2S_Init+0x274>)
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <HAL_I2S_Init+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_I2S_Init+0x1a4>
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <HAL_I2S_Init+0x27c>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2S_Init+0x1a8>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4932      	ldr	r1, [pc, #200]	; (8003bdc <HAL_I2S_Init+0x278>)
 8003b14:	428a      	cmp	r2, r1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2S_Init+0x1b8>
 8003b18:	4a31      	ldr	r2, [pc, #196]	; (8003be0 <HAL_I2S_Init+0x27c>)
 8003b1a:	e001      	b.n	8003b20 <HAL_I2S_Init+0x1bc>
 8003b1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b24:	f023 030f 	bic.w	r3, r3, #15
 8003b28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_I2S_Init+0x278>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1d4>
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1d8>
 8003b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <HAL_I2S_Init+0x278>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_I2S_Init+0x1ea>
 8003b4a:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_I2S_Init+0x27c>)
 8003b4c:	e001      	b.n	8003b52 <HAL_I2S_Init+0x1ee>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d003      	beq.n	8003b68 <HAL_I2S_Init+0x204>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e001      	b.n	8003b74 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ba0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <HAL_I2S_Init+0x278>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2S_Init+0x24c>
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_I2S_Init+0x27c>)
 8003bae:	e001      	b.n	8003bb4 <HAL_I2S_Init+0x250>
 8003bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb4:	897a      	ldrh	r2, [r7, #10]
 8003bb6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08003cdb 	.word	0x08003cdb
 8003bd4:	cccccccd 	.word	0xcccccccd
 8003bd8:	08003df1 	.word	0x08003df1
 8003bdc:	40003800 	.word	0x40003800
 8003be0:	40003400 	.word	0x40003400

08003be4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10e      	bne.n	8003c74 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffb8 	bl	8003be4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10e      	bne.n	8003cd2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff93 	bl	8003bf8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d13a      	bne.n	8003d6c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d109      	bne.n	8003d14 <I2S_IRQHandler+0x3a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d102      	bne.n	8003d14 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffb4 	bl	8003c7c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d126      	bne.n	8003d6c <I2S_IRQHandler+0x92>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d11f      	bne.n	8003d6c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff50 	bl	8003c0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d136      	bne.n	8003de6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d109      	bne.n	8003d96 <I2S_IRQHandler+0xbc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d102      	bne.n	8003d96 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff45 	bl	8003c20 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d122      	bne.n	8003de6 <I2S_IRQHandler+0x10c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d11b      	bne.n	8003de6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dbc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff13 	bl	8003c0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a92      	ldr	r2, [pc, #584]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e0a:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e0c:	e001      	b.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a8b      	ldr	r2, [pc, #556]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e28:	4b8a      	ldr	r3, [pc, #552]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2a:	e001      	b.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d004      	beq.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f040 8099 	bne.w	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d107      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f925 	bl	80040ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9c8 	bl	800420c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d13a      	bne.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d035      	beq.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a6e      	ldr	r2, [pc, #440]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e9a:	4b6e      	ldr	r3, [pc, #440]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9c:	e001      	b.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4969      	ldr	r1, [pc, #420]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eaa:	428b      	cmp	r3, r1
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eae:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb0:	e001      	b.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fe88 	bl	8003c0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	f040 80c3 	bne.w	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80bd 	beq.w	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a49      	ldr	r2, [pc, #292]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f30:	e001      	b.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4944      	ldr	r1, [pc, #272]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f3e:	428b      	cmp	r3, r1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f42:	4b44      	ldr	r3, [pc, #272]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f44:	e001      	b.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f4e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f043 0204 	orr.w	r2, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fe4a 	bl	8003c0c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f78:	e089      	b.n	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d107      	bne.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8be 	bl	8004110 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8fd 	bl	80041a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d12f      	bne.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02a      	beq.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fde:	e001      	b.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4919      	ldr	r1, [pc, #100]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ffc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f043 0202 	orr.w	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fdfa 	bl	8003c0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d136      	bne.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d031      	beq.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004038:	e001      	b.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800403a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4902      	ldr	r1, [pc, #8]	; (8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004046:	428b      	cmp	r3, r1
 8004048:	d106      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800404a:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800404c:	e006      	b.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800404e:	bf00      	nop
 8004050:	40003800 	.word	0x40003800
 8004054:	40003400 	.word	0x40003400
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004070:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f043 0204 	orr.w	r2, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fdc0 	bl	8003c0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800408c:	e000      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800408e:	bf00      	nop
}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c99      	adds	r1, r3, #2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6251      	str	r1, [r2, #36]	; 0x24
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffc9 	bl	8004098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c99      	adds	r1, r3, #2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6251      	str	r1, [r2, #36]	; 0x24
 8004122:	8819      	ldrh	r1, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <I2SEx_TxISR_I2SExt+0x90>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <I2SEx_TxISR_I2SExt+0x22>
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004130:	e001      	b.n	8004136 <I2SEx_TxISR_I2SExt+0x26>
 8004132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004136:	460a      	mov	r2, r1
 8004138:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d121      	bne.n	8004196 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <I2SEx_TxISR_I2SExt+0x90>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <I2SEx_TxISR_I2SExt+0x50>
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <I2SEx_TxISR_I2SExt+0x94>)
 800415e:	e001      	b.n	8004164 <I2SEx_TxISR_I2SExt+0x54>
 8004160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	490d      	ldr	r1, [pc, #52]	; (80041a0 <I2SEx_TxISR_I2SExt+0x90>)
 800416c:	428b      	cmp	r3, r1
 800416e:	d101      	bne.n	8004174 <I2SEx_TxISR_I2SExt+0x64>
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004172:	e001      	b.n	8004178 <I2SEx_TxISR_I2SExt+0x68>
 8004174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004178:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800417c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff81 	bl	8004098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40003800 	.word	0x40003800
 80041a4:	40003400 	.word	0x40003400

080041a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68d8      	ldr	r0, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	1c99      	adds	r1, r3, #2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041c0:	b282      	uxth	r2, r0
 80041c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d113      	bne.n	8004204 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff4a 	bl	8004098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <I2SEx_RxISR_I2SExt+0x90>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <I2SEx_RxISR_I2SExt+0x16>
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <I2SEx_RxISR_I2SExt+0x94>)
 8004220:	e001      	b.n	8004226 <I2SEx_RxISR_I2SExt+0x1a>
 8004222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004226:	68d8      	ldr	r0, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	1c99      	adds	r1, r3, #2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004232:	b282      	uxth	r2, r0
 8004234:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d121      	bne.n	8004292 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a12      	ldr	r2, [pc, #72]	; (800429c <I2SEx_RxISR_I2SExt+0x90>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <I2SEx_RxISR_I2SExt+0x50>
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <I2SEx_RxISR_I2SExt+0x94>)
 800425a:	e001      	b.n	8004260 <I2SEx_RxISR_I2SExt+0x54>
 800425c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	490d      	ldr	r1, [pc, #52]	; (800429c <I2SEx_RxISR_I2SExt+0x90>)
 8004268:	428b      	cmp	r3, r1
 800426a:	d101      	bne.n	8004270 <I2SEx_RxISR_I2SExt+0x64>
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <I2SEx_RxISR_I2SExt+0x94>)
 800426e:	e001      	b.n	8004274 <I2SEx_RxISR_I2SExt+0x68>
 8004270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004274:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004278:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff03 	bl	8004098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40003800 	.word	0x40003800
 80042a0:	40003400 	.word	0x40003400

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e267      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d075      	beq.n	80043ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c2:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d00c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d112      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b82      	ldr	r3, [pc, #520]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e6:	d10b      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	4b7e      	ldr	r3, [pc, #504]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05b      	beq.n	80043ac <HAL_RCC_OscConfig+0x108>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d157      	bne.n	80043ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e242      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d106      	bne.n	8004318 <HAL_RCC_OscConfig+0x74>
 800430a:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e01d      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x98>
 8004322:	4b70      	ldr	r3, [pc, #448]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6f      	ldr	r2, [pc, #444]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b6d      	ldr	r3, [pc, #436]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6c      	ldr	r2, [pc, #432]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 800433c:	4b69      	ldr	r3, [pc, #420]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a65      	ldr	r2, [pc, #404]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fc ff10 	bl	8001180 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fc ff0c 	bl	8001180 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e207      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0xc0>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fc fefc 	bl	8001180 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438c:	f7fc fef8 	bl	8001180 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1f3      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0xe8>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ba:	4b4a      	ldr	r3, [pc, #296]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1c7      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4937      	ldr	r1, [pc, #220]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fc feb1 	bl	8001180 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004422:	f7fc fead 	bl	8001180 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1a8      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4925      	ldr	r1, [pc, #148]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fc fe90 	bl	8001180 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004464:	f7fc fe8c 	bl	8001180 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e187      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d036      	beq.n	80044fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x248>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fc fe70 	bl	8001180 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fc fe6c 	bl	8001180 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e167      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x200>
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_OscConfig+0x248>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ca:	f7fc fe59 	bl	8001180 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	e00e      	b.n	80044f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fc fe55 	bl	8001180 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d907      	bls.n	80044f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e150      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470000 	.word	0x42470000
 80044ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ea      	bne.n	80044d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8097 	beq.w	8004638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b7d      	ldr	r3, [pc, #500]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a7c      	ldr	r2, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
 800452a:	4b7a      	ldr	r3, [pc, #488]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b77      	ldr	r3, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x474>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d118      	bne.n	8004578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b74      	ldr	r3, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x474>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a73      	ldr	r2, [pc, #460]	; (8004718 <HAL_RCC_OscConfig+0x474>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fc fe15 	bl	8001180 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7fc fe11 	bl	8001180 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e10c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b6a      	ldr	r3, [pc, #424]	; (8004718 <HAL_RCC_OscConfig+0x474>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x2ea>
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a63      	ldr	r2, [pc, #396]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x30c>
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a5e      	ldr	r2, [pc, #376]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
 80045a2:	4b5c      	ldr	r3, [pc, #368]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 80045b0:	4b58      	ldr	r3, [pc, #352]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	4a57      	ldr	r2, [pc, #348]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	; 0x70
 80045bc:	4b55      	ldr	r3, [pc, #340]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a54      	ldr	r2, [pc, #336]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fc fdd6 	bl	8001180 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fc fdd2 	bl	8001180 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0cb      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b49      	ldr	r3, [pc, #292]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCC_OscConfig+0x334>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fc fdc0 	bl	8001180 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fc fdbc 	bl	8001180 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0b5      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462c:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	4a38      	ldr	r2, [pc, #224]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80a1 	beq.w	8004784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004642:	4b34      	ldr	r3, [pc, #208]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b08      	cmp	r3, #8
 800464c:	d05c      	beq.n	8004708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d141      	bne.n	80046da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCC_OscConfig+0x478>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fc fd90 	bl	8001180 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fc fd8c 	bl	8001180 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e087      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	491b      	ldr	r1, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x478>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fc fd65 	bl	8001180 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fc fd61 	bl	8001180 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e05c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x416>
 80046d8:	e054      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fc fd4e 	bl	8001180 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fc fd4a 	bl	8001180 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e045      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x444>
 8004706:	e03d      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e038      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCC_OscConfig+0x4ec>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d028      	beq.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d121      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0cc      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b68      	ldr	r3, [pc, #416]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90c      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b65      	ldr	r3, [pc, #404]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b63      	ldr	r3, [pc, #396]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0b8      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e8:	4b59      	ldr	r3, [pc, #356]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a58      	ldr	r2, [pc, #352]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004800:	4b53      	ldr	r3, [pc, #332]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	494d      	ldr	r1, [pc, #308]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d044      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d119      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d003      	beq.n	8004852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	2b03      	cmp	r3, #3
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e067      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4934      	ldr	r1, [pc, #208]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004884:	f7fc fc7c 	bl	8001180 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fc fc78 	bl	8001180 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e04f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20c      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e032      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4916      	ldr	r1, [pc, #88]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490e      	ldr	r1, [pc, #56]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491a:	f000 f821 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490a      	ldr	r1, [pc, #40]	; (8004954 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a09      	ldr	r2, [pc, #36]	; (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fbdc 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00
 8004950:	40023800 	.word	0x40023800
 8004954:	080095e0 	.word	0x080095e0
 8004958:	20000004 	.word	0x20000004
 800495c:	20000008 	.word	0x20000008

08004960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b094      	sub	sp, #80	; 0x50
 8004966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	2300      	movs	r3, #0
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	2300      	movs	r3, #0
 8004972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004978:	4b79      	ldr	r3, [pc, #484]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b08      	cmp	r3, #8
 8004982:	d00d      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004984:	2b08      	cmp	r3, #8
 8004986:	f200 80e1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x34>
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x3a>
 8004992:	e0db      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004998:	e0db      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499e:	e0d8      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b6f      	ldr	r3, [pc, #444]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049aa:	4b6d      	ldr	r3, [pc, #436]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	2200      	movs	r2, #0
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
 80049ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	f04f 0000 	mov.w	r0, #0
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	0159      	lsls	r1, r3, #5
 80049e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e4:	0150      	lsls	r0, r2, #5
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4621      	mov	r1, r4
 80049ec:	1a51      	subs	r1, r2, r1
 80049ee:	6139      	str	r1, [r7, #16]
 80049f0:	4629      	mov	r1, r5
 80049f2:	eb63 0301 	sbc.w	r3, r3, r1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a04:	4659      	mov	r1, fp
 8004a06:	018b      	lsls	r3, r1, #6
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a0e:	4651      	mov	r1, sl
 8004a10:	018a      	lsls	r2, r1, #6
 8004a12:	4651      	mov	r1, sl
 8004a14:	ebb2 0801 	subs.w	r8, r2, r1
 8004a18:	4659      	mov	r1, fp
 8004a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a32:	4690      	mov	r8, r2
 8004a34:	4699      	mov	r9, r3
 8004a36:	4623      	mov	r3, r4
 8004a38:	eb18 0303 	adds.w	r3, r8, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	462b      	mov	r3, r5
 8004a40:	eb49 0303 	adc.w	r3, r9, r3
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a52:	4629      	mov	r1, r5
 8004a54:	024b      	lsls	r3, r1, #9
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	024a      	lsls	r2, r1, #9
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	2200      	movs	r2, #0
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a70:	f7fb fbaa 	bl	80001c8 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	e058      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b38      	ldr	r3, [pc, #224]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2200      	movs	r2, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	4611      	mov	r1, r2
 8004a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	2300      	movs	r3, #0
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
 8004a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	0159      	lsls	r1, r3, #5
 8004aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aaa:	0150      	lsls	r0, r2, #5
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	464b      	mov	r3, r9
 8004af4:	eb45 0303 	adc.w	r3, r5, r3
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b06:	4629      	mov	r1, r5
 8004b08:	028b      	lsls	r3, r1, #10
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b10:	4621      	mov	r1, r4
 8004b12:	028a      	lsls	r2, r1, #10
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	61fa      	str	r2, [r7, #28]
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	f7fb fb50 	bl	80001c8 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3750      	adds	r7, #80	; 0x50
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000004 	.word	0x20000004

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	080095f0 	.word	0x080095f0

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff ffdc 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	080095f0 	.word	0x080095f0

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d035      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bfc:	4b62      	ldr	r3, [pc, #392]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c02:	f7fc fabd 	bl	8001180 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c0a:	f7fc fab9 	bl	8001180 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0b0      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c1c:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	019a      	lsls	r2, r3, #6
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	071b      	lsls	r3, r3, #28
 8004c34:	4955      	ldr	r1, [pc, #340]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c3c:	4b52      	ldr	r3, [pc, #328]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c42:	f7fc fa9d 	bl	8001180 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c4a:	f7fc fa99 	bl	8001180 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e090      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c5c:	4b4b      	ldr	r3, [pc, #300]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8083 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4b44      	ldr	r3, [pc, #272]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a43      	ldr	r2, [pc, #268]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c92:	4b3f      	ldr	r3, [pc, #252]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3e      	ldr	r2, [pc, #248]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fa6f 	bl	8001180 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fc fa6b 	bl	8001180 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e062      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc4:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02f      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d028      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cec:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cf8:	4a24      	ldr	r2, [pc, #144]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d114      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fc fa39 	bl	8001180 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fc fa35 	bl	8001180 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e02a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d28:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ee      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d40:	d10d      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d56:	490d      	ldr	r1, [pc, #52]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]
 8004d5c:	e005      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d68:	6093      	str	r3, [r2, #8]
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	4905      	ldr	r1, [pc, #20]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	42470068 	.word	0x42470068
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40007000 	.word	0x40007000
 8004d94:	42470e40 	.word	0x42470e40

08004d98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d13e      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d12f      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dce:	617b      	str	r3, [r7, #20]
          break;
 8004dd0:	e02f      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dde:	d108      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e007      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004df2:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	0f1b      	lsrs	r3, r3, #28
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
          break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
          break;
 8004e30:	bf00      	nop
        }
      }
      break;
 8004e32:	bf00      	nop
    }
  }
  return frequency;
 8004e34:	697b      	ldr	r3, [r7, #20]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	00bb8000 	.word	0x00bb8000
 8004e4c:	007a1200 	.word	0x007a1200
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07b      	b.n	8004f5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d009      	beq.n	8004e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fb ff78 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f003 0104 	and.w	r1, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0210 	and.w	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e03f      	b.n	8004ff8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fb ff4d 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2224      	movs	r2, #36	; 0x24
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fc7a 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0ba      	sub	sp, #232	; 0xe8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800503e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb65 	bl	800572e <UART_Receive_IT>
      return;
 8005064:	e256      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80de 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80d1 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
 8005102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81ed 	beq.w	800550a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 faf0 	bl	800572e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_UART_IRQHandler+0x17a>
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9f8 	bl	8005570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d141      	bne.n	8005212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	4a7d      	ldr	r2, [pc, #500]	; (80053dc <HAL_UART_IRQHandler+0x3dc>)
 80051e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc fa26 	bl	8001640 <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d016      	beq.n	8005228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e00e      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f99a 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e00a      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f996 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e006      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f992 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005226:	e170      	b.n	800550a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	bf00      	nop
    return;
 800522a:	e16e      	b.n	800550a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 814a 	bne.w	80054ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8143 	beq.w	80054ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 813c 	beq.w	80054ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	f040 80b4 	bne.w	80053e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8140 	beq.w	800550e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005296:	429a      	cmp	r2, r3
 8005298:	f080 8139 	bcs.w	800550e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	f000 8088 	beq.w	80053c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d9      	bne.n	80052b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800530e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800532a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e1      	bne.n	80052fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800534a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800535e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e3      	bne.n	800533a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80053a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e3      	bne.n	8005380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc f8cf 	bl	8001560 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8c0 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d8:	e099      	b.n	800550e <HAL_UART_IRQHandler+0x50e>
 80053da:	bf00      	nop
 80053dc:	08005637 	.word	0x08005637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 808b 	beq.w	8005512 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8086 	beq.w	8005512 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800541c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800542a:	647a      	str	r2, [r7, #68]	; 0x44
 800542c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	623b      	str	r3, [r7, #32]
   return(result);
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005462:	633a      	str	r2, [r7, #48]	; 0x30
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e3      	bne.n	800543e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	60fb      	str	r3, [r7, #12]
   return(result);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	617b      	str	r3, [r7, #20]
   return(result);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f848 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054c8:	e023      	b.n	8005512 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_UART_IRQHandler+0x4ea>
 80054d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8bb 	bl	800565e <UART_Transmit_IT>
    return;
 80054e8:	e014      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00e      	beq.n	8005514 <HAL_UART_IRQHandler+0x514>
 80054f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8fb 	bl	80056fe <UART_EndTransmit_IT>
    return;
 8005508:	e004      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
    return;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
      return;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
      return;
 8005512:	bf00      	nop
  }
}
 8005514:	37e8      	adds	r7, #232	; 0xe8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop

0800551c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b095      	sub	sp, #84	; 0x54
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005598:	643a      	str	r2, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d119      	bne.n	800561c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005608:	61ba      	str	r2, [r7, #24]
 800560a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	613b      	str	r3, [r7, #16]
   return(result);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800562a:	bf00      	nop
 800562c:	3754      	adds	r7, #84	; 0x54
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff ff77 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b21      	cmp	r3, #33	; 0x21
 8005670:	d13e      	bne.n	80056f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d114      	bne.n	80056a6 <UART_Transmit_IT+0x48>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d110      	bne.n	80056a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	1c9a      	adds	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]
 80056a4:	e008      	b.n	80056b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6211      	str	r1, [r2, #32]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4619      	mov	r1, r3
 80056c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10f      	bne.n	80056ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fefc 	bl	800551c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08c      	sub	sp, #48	; 0x30
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b22      	cmp	r3, #34	; 0x22
 8005740:	f040 80ab 	bne.w	800589a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d117      	bne.n	800577e <UART_Receive_IT+0x50>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d113      	bne.n	800577e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	b29a      	uxth	r2, r3
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	1c9a      	adds	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
 800577c:	e026      	b.n	80057cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d007      	beq.n	80057a2 <UART_Receive_IT+0x74>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <UART_Receive_IT+0x82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e008      	b.n	80057c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4619      	mov	r1, r3
 80057da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d15a      	bne.n	8005896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0220 	bic.w	r2, r2, #32
 80057ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d135      	bne.n	800588c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	613b      	str	r3, [r7, #16]
   return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	623a      	str	r2, [r7, #32]
 8005848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	61bb      	str	r3, [r7, #24]
   return(result);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b10      	cmp	r3, #16
 8005866:	d10a      	bne.n	800587e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fe67 	bl	8005558 <HAL_UARTEx_RxEventCallback>
 800588a:	e002      	b.n	8005892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fe4f 	bl	8005530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e002      	b.n	800589c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3730      	adds	r7, #48	; 0x30
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a8:	b0c0      	sub	sp, #256	; 0x100
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	68d9      	ldr	r1, [r3, #12]
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	ea40 0301 	orr.w	r3, r0, r1
 80058cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	431a      	orrs	r2, r3
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058fc:	f021 010c 	bic.w	r1, r1, #12
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800590a:	430b      	orrs	r3, r1
 800590c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	6999      	ldr	r1, [r3, #24]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	ea40 0301 	orr.w	r3, r0, r1
 800592a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <UART_SetConfig+0x2cc>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d005      	beq.n	8005944 <UART_SetConfig+0xa0>
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <UART_SetConfig+0x2d0>)
 8005940:	429a      	cmp	r2, r3
 8005942:	d104      	bne.n	800594e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7ff f932 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8005948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800594c:	e003      	b.n	8005956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594e:	f7ff f919 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005960:	f040 810c 	bne.w	8005b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800596e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	1891      	adds	r1, r2, r2
 800597c:	65b9      	str	r1, [r7, #88]	; 0x58
 800597e:	415b      	adcs	r3, r3
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005986:	4621      	mov	r1, r4
 8005988:	eb12 0801 	adds.w	r8, r2, r1
 800598c:	4629      	mov	r1, r5
 800598e:	eb43 0901 	adc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b4:	462b      	mov	r3, r5
 80059b6:	eb49 0303 	adc.w	r3, r9, r3
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059d2:	460b      	mov	r3, r1
 80059d4:	18db      	adds	r3, r3, r3
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
 80059d8:	4613      	mov	r3, r2
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	657b      	str	r3, [r7, #84]	; 0x54
 80059e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059e8:	f7fa fbee 	bl	80001c8 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <UART_SetConfig+0x2d4>)
 80059f2:	fba3 2302 	umull	r2, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	011c      	lsls	r4, r3, #4
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a14:	415b      	adcs	r3, r3
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb43 0b01 	adc.w	fp, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a3c:	4692      	mov	sl, r2
 8005a3e:	469b      	mov	fp, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	eb1a 0303 	adds.w	r3, sl, r3
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	647b      	str	r3, [r7, #68]	; 0x44
 8005a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a7e:	f7fa fba3 	bl	80001c8 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2264      	movs	r2, #100	; 0x64
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	1acb      	subs	r3, r1, r3
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aac:	441c      	add	r4, r3
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	1851      	adds	r1, r2, r1
 8005ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	414b      	adcs	r3, r1
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ae8:	4659      	mov	r1, fp
 8005aea:	00cb      	lsls	r3, r1, #3
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af2:	4651      	mov	r1, sl
 8005af4:	00ca      	lsls	r2, r1, #3
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	4642      	mov	r2, r8
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b04:	464b      	mov	r3, r9
 8005b06:	460a      	mov	r2, r1
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b24:	460b      	mov	r3, r1
 8005b26:	18db      	adds	r3, r3, r3
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	eb42 0303 	adc.w	r3, r2, r3
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b3a:	f7fa fb45 	bl	80001c8 <__aeabi_uldivmod>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005b44:	fba3 1302 	umull	r1, r3, r3, r2
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	2164      	movs	r1, #100	; 0x64
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	3332      	adds	r3, #50	; 0x32
 8005b56:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	f003 0207 	and.w	r2, r3, #7
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4422      	add	r2, r4
 8005b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b6c:	e105      	b.n	8005d7a <UART_SetConfig+0x4d6>
 8005b6e:	bf00      	nop
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40011400 	.word	0x40011400
 8005b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	6239      	str	r1, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	1854      	adds	r4, r2, r1
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	eb43 0501 	adc.w	r5, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	00eb      	lsls	r3, r5, #3
 8005bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb6:	00e2      	lsls	r2, r4, #3
 8005bb8:	4614      	mov	r4, r2
 8005bba:	461d      	mov	r5, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	18e3      	adds	r3, r4, r3
 8005bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bea:	4629      	mov	r1, r5
 8005bec:	008b      	lsls	r3, r1, #2
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	008a      	lsls	r2, r1, #2
 8005bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bfc:	f7fa fae4 	bl	80001c8 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4b60      	ldr	r3, [pc, #384]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	011c      	lsls	r4, r3, #4
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	61b9      	str	r1, [r7, #24]
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c30:	4641      	mov	r1, r8
 8005c32:	1851      	adds	r1, r2, r1
 8005c34:	6139      	str	r1, [r7, #16]
 8005c36:	4649      	mov	r1, r9
 8005c38:	414b      	adcs	r3, r1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c48:	4659      	mov	r1, fp
 8005c4a:	00cb      	lsls	r3, r1, #3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c52:	4651      	mov	r1, sl
 8005c54:	00ca      	lsls	r2, r1, #3
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c64:	464b      	mov	r3, r9
 8005c66:	460a      	mov	r2, r1
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c88:	4649      	mov	r1, r9
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c92:	4641      	mov	r1, r8
 8005c94:	008a      	lsls	r2, r1, #2
 8005c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c9a:	f7fa fa95 	bl	80001c8 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a34      	ldr	r2, [pc, #208]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc2:	441c      	add	r4, r3
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc8:	2200      	movs	r2, #0
 8005cca:	673b      	str	r3, [r7, #112]	; 0x70
 8005ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8005cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1851      	adds	r1, r2, r1
 8005ce6:	6039      	str	r1, [r7, #0]
 8005ce8:	4649      	mov	r1, r9
 8005cea:	414b      	adcs	r3, r1
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	00cb      	lsls	r3, r1, #3
 8005cfe:	4651      	mov	r1, sl
 8005d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d04:	4651      	mov	r1, sl
 8005d06:	00ca      	lsls	r2, r1, #3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4642      	mov	r2, r8
 8005d10:	189b      	adds	r3, r3, r2
 8005d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d14:	464b      	mov	r3, r9
 8005d16:	460a      	mov	r2, r1
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	663b      	str	r3, [r7, #96]	; 0x60
 8005d28:	667a      	str	r2, [r7, #100]	; 0x64
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d36:	4649      	mov	r1, r9
 8005d38:	008b      	lsls	r3, r1, #2
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d40:	4641      	mov	r1, r8
 8005d42:	008a      	lsls	r2, r1, #2
 8005d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d48:	f7fa fa3e 	bl	80001c8 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005d52:	fba3 1302 	umull	r1, r3, r3, r2
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	2164      	movs	r1, #100	; 0x64
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	3332      	adds	r3, #50	; 0x32
 8005d64:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4422      	add	r2, r4
 8005d78:	609a      	str	r2, [r3, #8]
}
 8005d7a:	bf00      	nop
 8005d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d80:	46bd      	mov	sp, r7
 8005d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d86:	bf00      	nop
 8005d88:	51eb851f 	.word	0x51eb851f

08005d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 001c 	add.w	r0, r7, #28
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d122      	bne.n	8005dea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9c0 	bl	8006164 <USB_CoreReset>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]
 8005de8:	e01a      	b.n	8005e20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9b4 	bl	8006164 <USB_CoreReset>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
 8005e12:	e005      	b.n	8005e20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10b      	bne.n	8005e3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f043 0206 	orr.w	r2, r3, #6
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e4a:	b004      	add	sp, #16
 8005e4c:	4770      	bx	lr

08005e4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f023 0201 	bic.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d115      	bne.n	8005ee0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7fb f969 	bl	8001198 <HAL_Delay>
      ms++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f93a 	bl	8006146 <USB_GetMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d01e      	beq.n	8005f16 <USB_SetCurrentMode+0x84>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b31      	cmp	r3, #49	; 0x31
 8005edc:	d9f0      	bls.n	8005ec0 <USB_SetCurrentMode+0x2e>
 8005ede:	e01a      	b.n	8005f16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d115      	bne.n	8005f12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f7fb f950 	bl	8001198 <HAL_Delay>
      ms++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f921 	bl	8006146 <USB_GetMode>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <USB_SetCurrentMode+0x84>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b31      	cmp	r3, #49	; 0x31
 8005f0e:	d9f0      	bls.n	8005ef2 <USB_SetCurrentMode+0x60>
 8005f10:	e001      	b.n	8005f16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e005      	b.n	8005f22 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b32      	cmp	r3, #50	; 0x32
 8005f1a:	d101      	bne.n	8005f20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <USB_FlushTxFifo+0x64>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d901      	bls.n	8005f4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e01b      	b.n	8005f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	daf2      	bge.n	8005f3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	019b      	lsls	r3, r3, #6
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <USB_FlushTxFifo+0x64>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e006      	b.n	8005f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d0f0      	beq.n	8005f64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	00030d40 	.word	0x00030d40

08005f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a11      	ldr	r2, [pc, #68]	; (8005ff0 <USB_FlushRxFifo+0x5c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e018      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	daf2      	bge.n	8005fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <USB_FlushRxFifo+0x5c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e006      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d0f0      	beq.n	8005fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	00030d40 	.word	0x00030d40

08005ff4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	460b      	mov	r3, r1
 8006004:	71fb      	strb	r3, [r7, #7]
 8006006:	4613      	mov	r3, r2
 8006008:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d123      	bne.n	8006062 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	3303      	adds	r3, #3
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e018      	b.n	800605a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	031a      	lsls	r2, r3, #12
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006034:	461a      	mov	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3301      	adds	r3, #1
 8006052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	3301      	adds	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d3e2      	bcc.n	8006028 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3724      	adds	r7, #36	; 0x24
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006070:	b480      	push	{r7}
 8006072:	b08b      	sub	sp, #44	; 0x2c
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	089b      	lsrs	r3, r3, #2
 800608a:	b29b      	uxth	r3, r3
 800608c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006096:	2300      	movs	r3, #0
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	e014      	b.n	80060c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	3301      	adds	r3, #1
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	3301      	adds	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	3301      	adds	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	3301      	adds	r3, #1
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d3e6      	bcc.n	800609c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ce:	8bfb      	ldrh	r3, [r7, #30]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060de:	461a      	mov	r2, r3
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	701a      	strb	r2, [r3, #0]
      i++;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	3301      	adds	r3, #1
 80060fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	3301      	adds	r3, #1
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006106:	8bfb      	ldrh	r3, [r7, #30]
 8006108:	3b01      	subs	r3, #1
 800610a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800610c:	8bfb      	ldrh	r3, [r7, #30]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ea      	bne.n	80060e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006114:	4618      	mov	r0, r3
 8006116:	372c      	adds	r7, #44	; 0x2c
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4013      	ands	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <USB_CoreReset+0x64>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e01b      	b.n	80061ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	daf2      	bge.n	8006170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f043 0201 	orr.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <USB_CoreReset+0x64>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e006      	b.n	80061ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d0f0      	beq.n	800619a <USB_CoreReset+0x36>

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	00030d40 	.word	0x00030d40

080061cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061cc:	b084      	sub	sp, #16
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10a      	bne.n	800623e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006236:	f043 0304 	orr.w	r3, r3, #4
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e014      	b.n	8006268 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e009      	b.n	8006268 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006262:	f023 0304 	bic.w	r3, r3, #4
 8006266:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006268:	2110      	movs	r1, #16
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fe5e 	bl	8005f2c <USB_FlushTxFifo>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fe8a 	bl	8005f94 <USB_FlushRxFifo>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	e015      	b.n	80062bc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	461a      	mov	r2, r3
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3301      	adds	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3e5      	bcc.n	8006290 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a13      	ldr	r2, [pc, #76]	; (8006338 <USB_HostInit+0x16c>)
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a13      	ldr	r2, [pc, #76]	; (800633c <USB_HostInit+0x170>)
 80062f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80062f4:	e009      	b.n	800630a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <USB_HostInit+0x174>)
 8006300:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a0f      	ldr	r2, [pc, #60]	; (8006344 <USB_HostInit+0x178>)
 8006306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f043 0210 	orr.w	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <USB_HostInit+0x17c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006334:	b004      	add	sp, #16
 8006336:	4770      	bx	lr
 8006338:	01000200 	.word	0x01000200
 800633c:	00e00300 	.word	0x00e00300
 8006340:	00600080 	.word	0x00600080
 8006344:	004000e0 	.word	0x004000e0
 8006348:	a3200008 	.word	0xa3200008

0800634c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d107      	bne.n	800639e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006394:	461a      	mov	r2, r3
 8006396:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e009      	b.n	80063b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d106      	bne.n	80063b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	461a      	mov	r2, r3
 80063ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80063b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80063f0:	2064      	movs	r0, #100	; 0x64
 80063f2:	f7fa fed1 	bl	8001198 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006402:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006404:	200a      	movs	r0, #10
 8006406:	f7fa fec7 	bl	8001198 <HAL_Delay>

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006438:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <USB_DriveVbus+0x44>
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d106      	bne.n	8006458 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006456:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d109      	bne.n	8006478 <USB_DriveVbus+0x64>
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006476:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	0c5b      	lsrs	r3, r3, #17
 80064a4:	f003 0303 	and.w	r3, r3, #3
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	b29b      	uxth	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	70fb      	strb	r3, [r7, #3]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70bb      	strb	r3, [r7, #2]
 80064ee:	4613      	mov	r3, r2
 80064f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	461a      	mov	r2, r3
 8006508:	f04f 33ff 	mov.w	r3, #4294967295
 800650c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800650e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006512:	2b03      	cmp	r3, #3
 8006514:	d87e      	bhi.n	8006614 <USB_HC_Init+0x13c>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <USB_HC_Init+0x44>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	0800652d 	.word	0x0800652d
 8006520:	080065d7 	.word	0x080065d7
 8006524:	0800652d 	.word	0x0800652d
 8006528:	08006599 	.word	0x08006599
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	461a      	mov	r2, r3
 800653a:	f240 439d 	movw	r3, #1181	; 0x49d
 800653e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da10      	bge.n	800656a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	440a      	add	r2, r1
 800655e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006566:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006568:	e057      	b.n	800661a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d051      	beq.n	800661a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006594:	60d3      	str	r3, [r2, #12]
      break;
 8006596:	e040      	b.n	800661a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	461a      	mov	r2, r3
 80065a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80065aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da34      	bge.n	800661e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065d4:	e023      	b.n	800661e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	461a      	mov	r2, r3
 80065e4:	f240 2325 	movw	r3, #549	; 0x225
 80065e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da17      	bge.n	8006622 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	440a      	add	r2, r1
 8006608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006610:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006612:	e006      	b.n	8006622 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	77fb      	strb	r3, [r7, #31]
      break;
 8006618:	e004      	b.n	8006624 <USB_HC_Init+0x14c>
      break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <USB_HC_Init+0x14c>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <USB_HC_Init+0x14c>
      break;
 8006622:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	2101      	movs	r1, #1
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	6939      	ldr	r1, [r7, #16]
 800665a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800665e:	4313      	orrs	r3, r2
 8006660:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800666e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da03      	bge.n	800667e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e001      	b.n	8006682 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff feff 	bl	8006486 <USB_GetHostSpeed>
 8006688:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800668a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800668e:	2b02      	cmp	r3, #2
 8006690:	d106      	bne.n	80066a0 <USB_HC_Init+0x1c8>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d003      	beq.n	80066a0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e001      	b.n	80066a4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066a4:	787b      	ldrb	r3, [r7, #1]
 80066a6:	059b      	lsls	r3, r3, #22
 80066a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066ac:	78bb      	ldrb	r3, [r7, #2]
 80066ae:	02db      	lsls	r3, r3, #11
 80066b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066ba:	049b      	lsls	r3, r3, #18
 80066bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	0159      	lsls	r1, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	440b      	add	r3, r1
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066e0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80066e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d003      	beq.n	80066f2 <USB_HC_Init+0x21a>
 80066ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10f      	bne.n	8006712 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	440a      	add	r2, r1
 8006708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800670c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006710:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006712:	7ffb      	ldrb	r3, [r7, #31]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08c      	sub	sp, #48	; 0x30
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006738:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02d      	beq.n	80067a2 <USB_HC_StartXfer+0x86>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	791b      	ldrb	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d129      	bne.n	80067a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d117      	bne.n	8006784 <USB_HC_StartXfer+0x68>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	79db      	ldrb	r3, [r3, #7]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <USB_HC_StartXfer+0x48>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	79db      	ldrb	r3, [r3, #7]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d10f      	bne.n	8006784 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	440a      	add	r2, r1
 800677a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <USB_HC_StartXfer+0x86>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	795b      	ldrb	r3, [r3, #5]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d107      	bne.n	80067a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa0f 	bl	8006bbc <USB_DoPing>
      return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e0f8      	b.n	8006994 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d018      	beq.n	80067dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	8912      	ldrh	r2, [r2, #8]
 80067b2:	4413      	add	r3, r2
 80067b4:	3b01      	subs	r3, #1
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	8912      	ldrh	r2, [r2, #8]
 80067ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80067be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80067c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067c2:	8b7b      	ldrh	r3, [r7, #26]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d90b      	bls.n	80067e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80067c8:	8b7b      	ldrh	r3, [r7, #26]
 80067ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	8912      	ldrh	r2, [r2, #8]
 80067d2:	fb03 f202 	mul.w	r2, r3, r2
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	611a      	str	r2, [r3, #16]
 80067da:	e001      	b.n	80067e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80067dc:	2301      	movs	r3, #1
 80067de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	78db      	ldrb	r3, [r3, #3]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	8912      	ldrh	r2, [r2, #8]
 80067ee:	fb03 f202 	mul.w	r2, r3, r2
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	611a      	str	r2, [r3, #16]
 80067f6:	e003      	b.n	8006800 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800680a:	04d9      	lsls	r1, r3, #19
 800680c:	4b63      	ldr	r3, [pc, #396]	; (800699c <USB_HC_StartXfer+0x280>)
 800680e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006810:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	7a9b      	ldrb	r3, [r3, #10]
 8006816:	075b      	lsls	r3, r3, #29
 8006818:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800681c:	69f9      	ldr	r1, [r7, #28]
 800681e:	0148      	lsls	r0, r1, #5
 8006820:	6a39      	ldr	r1, [r7, #32]
 8006822:	4401      	add	r1, r0
 8006824:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006828:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800682a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	68d9      	ldr	r1, [r3, #12]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	460a      	mov	r2, r1
 8006844:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	bf0c      	ite	eq
 8006856:	2301      	moveq	r3, #1
 8006858:	2300      	movne	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	440a      	add	r2, r1
 8006874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006878:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800687c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	7e7b      	ldrb	r3, [r7, #25]
 800688e:	075b      	lsls	r3, r3, #29
 8006890:	69f9      	ldr	r1, [r7, #28]
 8006892:	0148      	lsls	r0, r1, #5
 8006894:	6a39      	ldr	r1, [r7, #32]
 8006896:	4401      	add	r1, r0
 8006898:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800689c:	4313      	orrs	r3, r2
 800689e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	e003      	b.n	80068d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e04e      	b.n	8006994 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	78db      	ldrb	r3, [r3, #3]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d149      	bne.n	8006992 <USB_HC_StartXfer+0x276>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d045      	beq.n	8006992 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	79db      	ldrb	r3, [r3, #7]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d830      	bhi.n	8006970 <USB_HC_StartXfer+0x254>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <USB_HC_StartXfer+0x1f8>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006925 	.word	0x08006925
 8006918:	08006949 	.word	0x08006949
 800691c:	08006925 	.word	0x08006925
 8006920:	08006949 	.word	0x08006949
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	3303      	adds	r3, #3
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800692e:	8afa      	ldrh	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	b29b      	uxth	r3, r3
 8006936:	429a      	cmp	r2, r3
 8006938:	d91c      	bls.n	8006974 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	619a      	str	r2, [r3, #24]
        }
        break;
 8006946:	e015      	b.n	8006974 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	3303      	adds	r3, #3
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006952:	8afa      	ldrh	r2, [r7, #22]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	b29b      	uxth	r3, r3
 800695e:	429a      	cmp	r2, r3
 8006960:	d90a      	bls.n	8006978 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	619a      	str	r2, [r3, #24]
        }
        break;
 800696e:	e003      	b.n	8006978 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <USB_HC_StartXfer+0x25e>
        break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <USB_HC_StartXfer+0x25e>
        break;
 8006978:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68d9      	ldr	r1, [r3, #12]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	785a      	ldrb	r2, [r3, #1]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	b29b      	uxth	r3, r3
 8006988:	2000      	movs	r0, #0
 800698a:	9000      	str	r0, [sp, #0]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fb31 	bl	8005ff4 <USB_WritePacket>
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3728      	adds	r7, #40	; 0x28
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	1ff80000 	.word	0x1ff80000

080069a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	b29b      	uxth	r3, r3
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b089      	sub	sp, #36	; 0x24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	0c9b      	lsrs	r3, r3, #18
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	0fdb      	lsrs	r3, r3, #31
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d104      	bne.n	8006a1c <USB_HC_Halt+0x5a>
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e0c8      	b.n	8006bae <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <USB_HC_Halt+0x66>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d163      	bne.n	8006af0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 80ab 	bne.w	8006bac <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d133      	bne.n	8006aca <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aae:	d81d      	bhi.n	8006aec <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac6:	d0ec      	beq.n	8006aa2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ac8:	e070      	b.n	8006bac <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ae8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aea:	e05f      	b.n	8006bac <USB_HC_Halt+0x1ea>
            break;
 8006aec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aee:	e05d      	b.n	8006bac <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d133      	bne.n	8006b88 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6c:	d81d      	bhi.n	8006baa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b84:	d0ec      	beq.n	8006b60 <USB_HC_Halt+0x19e>
 8006b86:	e011      	b.n	8006bac <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e000      	b.n	8006bac <USB_HC_Halt+0x1ea>
          break;
 8006baa:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3724      	adds	r7, #36	; 0x24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	04da      	lsls	r2, r3, #19
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <USB_DoPing+0x74>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	1ff80000 	.word	0x1ff80000

08006c34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff f911 	bl	8005e70 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c4e:	2110      	movs	r1, #16
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f96b 	bl	8005f2c <USB_FlushTxFifo>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff f997 	bl	8005f94 <USB_FlushRxFifo>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c70:	2300      	movs	r3, #0
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	e01f      	b.n	8006cb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	461a      	mov	r2, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d9dc      	bls.n	8006c76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e034      	b.n	8006d2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ce8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d08:	d80c      	bhi.n	8006d24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d0ec      	beq.n	8006cfc <USB_StopHost+0xc8>
 8006d22:	e000      	b.n	8006d26 <USB_StopHost+0xf2>
        break;
 8006d24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d9c7      	bls.n	8006cc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f880 	bl	8005e4e <USB_EnableGlobalInt>

  return ret;
 8006d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af04      	add	r7, sp, #16
 8006d5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d60:	2301      	movs	r3, #1
 8006d62:	2202      	movs	r2, #2
 8006d64:	2102      	movs	r1, #2
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fc66 	bl	8007638 <USBH_FindInterface>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d002      	beq.n	8006d7c <USBH_CDC_InterfaceInit+0x24>
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d901      	bls.n	8006d80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e13d      	b.n	8006ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc3b 	bl	8007600 <USBH_SelectInterface>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d94:	2302      	movs	r3, #2
 8006d96:	e131      	b.n	8006ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d9e:	2050      	movs	r0, #80	; 0x50
 8006da0:	f002 fafa 	bl	8009398 <malloc>
 8006da4:	4603      	mov	r3, r0
 8006da6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006db8:	2302      	movs	r3, #2
 8006dba:	e11f      	b.n	8006ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006dbc:	2250      	movs	r2, #80	; 0x50
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f002 faf9 	bl	80093b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	211a      	movs	r1, #26
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da15      	bge.n	8006e0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	211a      	movs	r1, #26
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	211a      	movs	r1, #26
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 ff2c 	bl	8008c6e <USBH_AllocPipe>
 8006e16:	4603      	mov	r3, r0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	7819      	ldrb	r1, [r3, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	7858      	ldrb	r0, [r3, #1]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	8952      	ldrh	r2, [r2, #10]
 8006e36:	9202      	str	r2, [sp, #8]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	9201      	str	r2, [sp, #4]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4623      	mov	r3, r4
 8006e40:	4602      	mov	r2, r0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fee4 	bl	8008c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 f9f3 	bl	800923c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	210a      	movs	r1, #10
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fbeb 	bl	8007638 <USBH_FindInterface>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2bff      	cmp	r3, #255	; 0xff
 8006e6a:	d002      	beq.n	8006e72 <USBH_CDC_InterfaceInit+0x11a>
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d901      	bls.n	8006e76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	e0c2      	b.n	8006ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	211a      	movs	r1, #26
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da16      	bge.n	8006ebc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	211a      	movs	r1, #26
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	211a      	movs	r1, #26
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	835a      	strh	r2, [r3, #26]
 8006eba:	e015      	b.n	8006ee8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	211a      	movs	r1, #26
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ecc:	781a      	ldrb	r2, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	211a      	movs	r1, #26
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ee2:	881a      	ldrh	r2, [r3, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	211a      	movs	r1, #26
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da16      	bge.n	8006f2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	211a      	movs	r1, #26
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	211a      	movs	r1, #26
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f26:	881a      	ldrh	r2, [r3, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	835a      	strh	r2, [r3, #26]
 8006f2c:	e015      	b.n	8006f5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	211a      	movs	r1, #26
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	211a      	movs	r1, #26
 8006f4a:	fb01 f303 	mul.w	r3, r1, r3
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f54:	881a      	ldrh	r2, [r3, #0]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	7b9b      	ldrb	r3, [r3, #14]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fe84 	bl	8008c6e <USBH_AllocPipe>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461a      	mov	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	7bdb      	ldrb	r3, [r3, #15]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fe7a 	bl	8008c6e <USBH_AllocPipe>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	7b59      	ldrb	r1, [r3, #13]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	7b98      	ldrb	r0, [r3, #14]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	8b12      	ldrh	r2, [r2, #24]
 8006f9a:	9202      	str	r2, [sp, #8]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	9201      	str	r2, [sp, #4]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fe32 	bl	8008c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	7b19      	ldrb	r1, [r3, #12]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	7bd8      	ldrb	r0, [r3, #15]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	8b52      	ldrh	r2, [r2, #26]
 8006fc4:	9202      	str	r2, [sp, #8]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	9201      	str	r2, [sp, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	4623      	mov	r3, r4
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fe1d 	bl	8008c10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	7b5b      	ldrb	r3, [r3, #13]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 f928 	bl	800923c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f002 f921 	bl	800923c <USBH_LL_SetToggle>

  return USBH_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	bd90      	pop	{r4, r7, pc}

08007004 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fe12 	bl	8008c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fe3d 	bl	8008cb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	7b1b      	ldrb	r3, [r3, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00e      	beq.n	8007062 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	7b1b      	ldrb	r3, [r3, #12]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fdff 	bl	8008c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	7b1b      	ldrb	r3, [r3, #12]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fe2a 	bl	8008cb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	7b5b      	ldrb	r3, [r3, #13]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	7b5b      	ldrb	r3, [r3, #13]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fdec 	bl	8008c4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	7b5b      	ldrb	r3, [r3, #13]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fe17 	bl	8008cb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	4618      	mov	r0, r3
 800709e:	f002 f983 	bl	80093a8 <free>
    phost->pActiveClass->pData = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a8:	2200      	movs	r2, #0
 80070aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3340      	adds	r3, #64	; 0x40
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8b1 	bl	8007236 <GetLineCoding>
 80070d4:	4603      	mov	r3, r0
 80070d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070e4:	2102      	movs	r1, #2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070ea:	7afb      	ldrb	r3, [r7, #11]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007114:	2b04      	cmp	r3, #4
 8007116:	d877      	bhi.n	8007208 <USBH_CDC_Process+0x114>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBH_CDC_Process+0x2c>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007135 	.word	0x08007135
 8007124:	0800713b 	.word	0x0800713b
 8007128:	0800716b 	.word	0x0800716b
 800712c:	080071df 	.word	0x080071df
 8007130:	080071ed 	.word	0x080071ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e06d      	b.n	8007216 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f897 	bl	8007274 <SetLineCoding>
 8007146:	4603      	mov	r3, r0
 8007148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007158:	e058      	b.n	800720c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d055      	beq.n	800720c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2204      	movs	r2, #4
 8007164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007168:	e050      	b.n	800720c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	3340      	adds	r3, #64	; 0x40
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f860 	bl	8007236 <GetLineCoding>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d126      	bne.n	80071ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007192:	791b      	ldrb	r3, [r3, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d13b      	bne.n	8007210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d133      	bne.n	8007210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d12b      	bne.n	8007210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d124      	bne.n	8007210 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f958 	bl	800747c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071cc:	e020      	b.n	8007210 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d01d      	beq.n	8007210 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2204      	movs	r2, #4
 80071d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071dc:	e018      	b.n	8007210 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f867 	bl	80072b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8da 	bl	800739e <CDC_ProcessReception>
      break;
 80071ea:	e014      	b.n	8007216 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ffef 	bl	80081d2 <USBH_ClrFeature>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007206:	e005      	b.n	8007214 <USBH_CDC_Process+0x120>

    default:
      break;
 8007208:	bf00      	nop
 800720a:	e004      	b.n	8007216 <USBH_CDC_Process+0x122>
      break;
 800720c:	bf00      	nop
 800720e:	e002      	b.n	8007216 <USBH_CDC_Process+0x122>
      break;
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <USBH_CDC_Process+0x122>
      break;
 8007214:	bf00      	nop

  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	22a1      	movs	r2, #161	; 0xa1
 8007244:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2221      	movs	r2, #33	; 0x21
 800724a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2207      	movs	r2, #7
 800725c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2207      	movs	r2, #7
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fa81 	bl	800876c <USBH_CtlReq>
 800726a:	4603      	mov	r3, r0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2221      	movs	r2, #33	; 0x21
 8007282:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2207      	movs	r2, #7
 800729a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2207      	movs	r2, #7
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fa62 	bl	800876c <USBH_CtlReq>
 80072a8:	4603      	mov	r3, r0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af02      	add	r7, sp, #8
 80072b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d002      	beq.n	80072d8 <CDC_ProcessTransmission+0x26>
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d023      	beq.n	800731e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072d6:	e05e      	b.n	8007396 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	8b12      	ldrh	r2, [r2, #24]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d90b      	bls.n	80072fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	69d9      	ldr	r1, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8b1a      	ldrh	r2, [r3, #24]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	7b5b      	ldrb	r3, [r3, #13]
 80072f0:	2001      	movs	r0, #1
 80072f2:	9000      	str	r0, [sp, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fc48 	bl	8008b8a <USBH_BulkSendData>
 80072fa:	e00b      	b.n	8007314 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	7b5b      	ldrb	r3, [r3, #13]
 800730a:	2001      	movs	r0, #1
 800730c:	9000      	str	r0, [sp, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fc3b 	bl	8008b8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800731c:	e03b      	b.n	8007396 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	7b5b      	ldrb	r3, [r3, #13]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 ff5f 	bl	80091e8 <USBH_LL_GetURBState>
 800732a:	4603      	mov	r3, r0
 800732c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d128      	bne.n	8007386 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	8b12      	ldrh	r2, [r2, #24]
 800733c:	4293      	cmp	r3, r2
 800733e:	d90e      	bls.n	800735e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	8b12      	ldrh	r2, [r2, #24]
 8007348:	1a9a      	subs	r2, r3, r2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	8b12      	ldrh	r2, [r2, #24]
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	61da      	str	r2, [r3, #28]
 800735c:	e002      	b.n	8007364 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007374:	e00e      	b.n	8007394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f868 	bl	8007454 <USBH_CDC_TransmitCallback>
      break;
 8007384:	e006      	b.n	8007394 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d103      	bne.n	8007394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007394:	bf00      	nop
  }
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d002      	beq.n	80073c4 <CDC_ProcessReception+0x26>
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d00e      	beq.n	80073e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073c2:	e043      	b.n	800744c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	6a19      	ldr	r1, [r3, #32]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	8b5a      	ldrh	r2, [r3, #26]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fbff 	bl	8008bd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2204      	movs	r2, #4
 80073da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073de:	e035      	b.n	800744c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	7b1b      	ldrb	r3, [r3, #12]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fefe 	bl	80091e8 <USBH_LL_GetURBState>
 80073ec:	4603      	mov	r3, r0
 80073ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d129      	bne.n	800744a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	7b1b      	ldrb	r3, [r3, #12]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fe61 	bl	80090c4 <USBH_LL_GetLastXferSize>
 8007402:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d016      	beq.n	800743c <CDC_ProcessReception+0x9e>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	8b5b      	ldrh	r3, [r3, #26]
 8007412:	461a      	mov	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4293      	cmp	r3, r2
 8007418:	d910      	bls.n	800743c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6a1a      	ldr	r2, [r3, #32]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	441a      	add	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2203      	movs	r2, #3
 8007436:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800743a:	e006      	b.n	800744a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f80f 	bl	8007468 <USBH_CDC_ReceiveCallback>
      break;
 800744a:	bf00      	nop
  }
}
 800744c:	bf00      	nop
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80074a4:	2302      	movs	r3, #2
 80074a6:	e029      	b.n	80074fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	79fa      	ldrb	r2, [r7, #7]
 80074ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f81f 	bl	8007504 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f001 fd31 	bl	8008f5c <USBH_LL_Init>

  return USBH_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e009      	b.n	800752a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	33e0      	adds	r3, #224	; 0xe0
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	2200      	movs	r2, #0
 8007522:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b0f      	cmp	r3, #15
 800752e:	d9f2      	bls.n	8007516 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e009      	b.n	800754a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d3f1      	bcc.n	8007536 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2240      	movs	r2, #64	; 0x40
 8007576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d016      	beq.n	80075ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10e      	bne.n	80075e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075d0:	1c59      	adds	r1, r3, #1
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	33de      	adds	r3, #222	; 0xde
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
 80075e6:	e004      	b.n	80075f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075e8:	2302      	movs	r3, #2
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	e001      	b.n	80075f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075ee:	2302      	movs	r3, #2
 80075f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	429a      	cmp	r2, r3
 800761a:	d204      	bcs.n	8007626 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007624:	e001      	b.n	800762a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007626:	2302      	movs	r3, #2
 8007628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	461a      	mov	r2, r3
 8007646:	4603      	mov	r3, r0
 8007648:	70fb      	strb	r3, [r7, #3]
 800764a:	460b      	mov	r3, r1
 800764c:	70bb      	strb	r3, [r7, #2]
 800764e:	4613      	mov	r3, r2
 8007650:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007660:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007662:	e025      	b.n	80076b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	221a      	movs	r2, #26
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	3308      	adds	r3, #8
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	3302      	adds	r3, #2
 8007674:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	429a      	cmp	r2, r3
 800767e:	d002      	beq.n	8007686 <USBH_FindInterface+0x4e>
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2bff      	cmp	r3, #255	; 0xff
 8007684:	d111      	bne.n	80076aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800768a:	78ba      	ldrb	r2, [r7, #2]
 800768c:	429a      	cmp	r2, r3
 800768e:	d002      	beq.n	8007696 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007690:	78bb      	ldrb	r3, [r7, #2]
 8007692:	2bff      	cmp	r3, #255	; 0xff
 8007694:	d109      	bne.n	80076aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800769a:	787a      	ldrb	r2, [r7, #1]
 800769c:	429a      	cmp	r2, r3
 800769e:	d002      	beq.n	80076a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076a0:	787b      	ldrb	r3, [r7, #1]
 80076a2:	2bff      	cmp	r3, #255	; 0xff
 80076a4:	d101      	bne.n	80076aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	e006      	b.n	80076b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	3301      	adds	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d9d6      	bls.n	8007664 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076b6:	23ff      	movs	r3, #255	; 0xff
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fc81 	bl	8008fd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80076d2:	2101      	movs	r1, #1
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fd9a 	bl	800920e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076ec:	2302      	movs	r3, #2
 80076ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d102      	bne.n	8007706 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2203      	movs	r2, #3
 8007704:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b0b      	cmp	r3, #11
 800770e:	f200 81be 	bhi.w	8007a8e <USBH_Process+0x3aa>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBH_Process+0x34>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007749 	.word	0x08007749
 800771c:	0800777b 	.word	0x0800777b
 8007720:	080077e3 	.word	0x080077e3
 8007724:	08007a29 	.word	0x08007a29
 8007728:	08007a8f 	.word	0x08007a8f
 800772c:	08007887 	.word	0x08007887
 8007730:	080079cf 	.word	0x080079cf
 8007734:	080078bd 	.word	0x080078bd
 8007738:	080078dd 	.word	0x080078dd
 800773c:	080078fd 	.word	0x080078fd
 8007740:	08007941 	.word	0x08007941
 8007744:	08007a11 	.word	0x08007a11
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 819e 	beq.w	8007a92 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800775c:	20c8      	movs	r0, #200	; 0xc8
 800775e:	f001 fd9d 	bl	800929c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fc93 	bl	800908e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007778:	e18b      	b.n	8007a92 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007780:	2b01      	cmp	r3, #1
 8007782:	d107      	bne.n	8007794 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007792:	e18d      	b.n	8007ab0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800779a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800779e:	d914      	bls.n	80077ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077a6:	3301      	adds	r3, #1
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d903      	bls.n	80077c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220d      	movs	r2, #13
 80077be:	701a      	strb	r2, [r3, #0]
      break;
 80077c0:	e176      	b.n	8007ab0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	701a      	strb	r2, [r3, #0]
      break;
 80077c8:	e172      	b.n	8007ab0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d0:	f103 020a 	add.w	r2, r3, #10
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80077da:	200a      	movs	r0, #10
 80077dc:	f001 fd5e 	bl	800929c <USBH_Delay>
      break;
 80077e0:	e166      	b.n	8007ab0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f2:	2104      	movs	r1, #4
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077f8:	2064      	movs	r0, #100	; 0x64
 80077fa:	f001 fd4f 	bl	800929c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fc1e 	bl	8009040 <USBH_LL_GetSpeed>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2205      	movs	r2, #5
 8007812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fa29 	bl	8008c6e <USBH_AllocPipe>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fa21 	bl	8008c6e <USBH_AllocPipe>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7919      	ldrb	r1, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007848:	b292      	uxth	r2, r2
 800784a:	9202      	str	r2, [sp, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	9201      	str	r2, [sp, #4]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	4603      	mov	r3, r0
 8007854:	2280      	movs	r2, #128	; 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f9da 	bl	8008c10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7959      	ldrb	r1, [r3, #5]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007870:	b292      	uxth	r2, r2
 8007872:	9202      	str	r2, [sp, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4603      	mov	r3, r0
 800787c:	2200      	movs	r2, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f9c6 	bl	8008c10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007884:	e114      	b.n	8007ab0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f918 	bl	8007abc <USBH_HandleEnum>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 80fe 	bne.w	8007a96 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d103      	bne.n	80078b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2208      	movs	r2, #8
 80078b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b2:	e0f0      	b.n	8007a96 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2207      	movs	r2, #7
 80078b8:	701a      	strb	r2, [r3, #0]
      break;
 80078ba:	e0ec      	b.n	8007a96 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80e9 	beq.w	8007a9a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ce:	2101      	movs	r1, #1
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2208      	movs	r2, #8
 80078d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80078da:	e0de      	b.n	8007a9a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fc2c 	bl	8008144 <USBH_SetCfg>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 80d5 	bne.w	8007a9e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2209      	movs	r2, #9
 80078f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078fa:	e0d0      	b.n	8007a9e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800790a:	2101      	movs	r1, #1
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc3c 	bl	800818a <USBH_SetFeature>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220a      	movs	r2, #10
 8007922:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007924:	e0bd      	b.n	8007aa2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	f040 80b9 	bne.w	8007aa2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	220a      	movs	r2, #10
 8007934:	701a      	strb	r2, [r3, #0]
      break;
 8007936:	e0b4      	b.n	8007aa2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	220a      	movs	r2, #10
 800793c:	701a      	strb	r2, [r3, #0]
      break;
 800793e:	e0b0      	b.n	8007aa2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80ad 	beq.w	8007aa6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
 8007958:	e016      	b.n	8007988 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800795a:	7bfa      	ldrb	r2, [r7, #15]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	32de      	adds	r2, #222	; 0xde
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	791a      	ldrb	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800796c:	429a      	cmp	r2, r3
 800796e:	d108      	bne.n	8007982 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32de      	adds	r2, #222	; 0xde
 8007976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007980:	e005      	b.n	800798e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	3301      	adds	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0e5      	beq.n	800795a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d016      	beq.n	80079c6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2206      	movs	r2, #6
 80079ae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079b6:	2103      	movs	r1, #3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079bc:	e073      	b.n	8007aa6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220d      	movs	r2, #13
 80079c2:	701a      	strb	r2, [r3, #0]
      break;
 80079c4:	e06f      	b.n	8007aa6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220d      	movs	r2, #13
 80079ca:	701a      	strb	r2, [r3, #0]
      break;
 80079cc:	e06b      	b.n	8007aa6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d017      	beq.n	8007a08 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
 80079e4:	4603      	mov	r3, r0
 80079e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	220b      	movs	r2, #11
 80079f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079f6:	e058      	b.n	8007aaa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d154      	bne.n	8007aaa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	220d      	movs	r2, #13
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e050      	b.n	8007aaa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	220d      	movs	r2, #13
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	e04c      	b.n	8007aaa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d049      	beq.n	8007aae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      }
      break;
 8007a26:	e042      	b.n	8007aae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fd67 	bl	8007504 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a64:	2105      	movs	r1, #5
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fe20 	bl	80076c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a84:	e014      	b.n	8007ab0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 faa4 	bl	8008fd4 <USBH_LL_Start>
      break;
 8007a8c:	e010      	b.n	8007ab0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a8e:	bf00      	nop
 8007a90:	e00e      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007a92:	bf00      	nop
 8007a94:	e00c      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007a96:	bf00      	nop
 8007a98:	e00a      	b.n	8007ab0 <USBH_Process+0x3cc>
    break;
 8007a9a:	bf00      	nop
 8007a9c:	e008      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e006      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007aa2:	bf00      	nop
 8007aa4:	e004      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007aa6:	bf00      	nop
 8007aa8:	e002      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <USBH_Process+0x3cc>
      break;
 8007aae:	bf00      	nop
  }
  return USBH_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop

08007abc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af04      	add	r7, sp, #16
 8007ac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b07      	cmp	r3, #7
 8007ad2:	f200 81c1 	bhi.w	8007e58 <USBH_HandleEnum+0x39c>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <USBH_HandleEnum+0x20>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007bbb 	.word	0x08007bbb
 8007ae4:	08007c25 	.word	0x08007c25
 8007ae8:	08007cb3 	.word	0x08007cb3
 8007aec:	08007d1d 	.word	0x08007d1d
 8007af0:	08007d8d 	.word	0x08007d8d
 8007af4:	08007dd3 	.word	0x08007dd3
 8007af8:	08007e19 	.word	0x08007e19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007afc:	2108      	movs	r1, #8
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa50 	bl	8007fa4 <USBH_Get_DevDesc>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d130      	bne.n	8007b70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	7919      	ldrb	r1, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b32:	b292      	uxth	r2, r2
 8007b34:	9202      	str	r2, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 f865 	bl	8008c10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7959      	ldrb	r1, [r3, #5]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	9202      	str	r2, [sp, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4603      	mov	r3, r0
 8007b66:	2200      	movs	r2, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f851 	bl	8008c10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b6e:	e175      	b.n	8007e5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f040 8172 	bne.w	8007e5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d903      	bls.n	8007b9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	220d      	movs	r2, #13
 8007b96:	701a      	strb	r2, [r3, #0]
      break;
 8007b98:	e160      	b.n	8007e5c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	795b      	ldrb	r3, [r3, #5]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f885 	bl	8008cb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f87f 	bl	8008cb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
      break;
 8007bb8:	e150      	b.n	8007e5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bba:	2112      	movs	r1, #18
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9f1 	bl	8007fa4 <USBH_Get_DevDesc>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bd2:	e145      	b.n	8007e60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	f040 8142 	bne.w	8007e60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d903      	bls.n	8007bfe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220d      	movs	r2, #13
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e130      	b.n	8007e60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	795b      	ldrb	r3, [r3, #5]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 f853 	bl	8008cb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	791b      	ldrb	r3, [r3, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f84d 	bl	8008cb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e11d      	b.n	8007e60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c24:	2101      	movs	r1, #1
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa68 	bl	80080fc <USBH_SetAddress>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d132      	bne.n	8007c9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c36:	2002      	movs	r0, #2
 8007c38:	f001 fb30 	bl	800929c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7919      	ldrb	r1, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	9202      	str	r2, [sp, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 ffcf 	bl	8008c10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7959      	ldrb	r1, [r3, #5]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c86:	b292      	uxth	r2, r2
 8007c88:	9202      	str	r2, [sp, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	9201      	str	r2, [sp, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 ffbb 	bl	8008c10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c9a:	e0e3      	b.n	8007e64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f040 80e0 	bne.w	8007e64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	220d      	movs	r2, #13
 8007ca8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	705a      	strb	r2, [r3, #1]
      break;
 8007cb0:	e0d8      	b.n	8007e64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f99d 	bl	8007ff4 <USBH_Get_CfgDesc>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cca:	e0cd      	b.n	8007e68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f040 80ca 	bne.w	8007e68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d903      	bls.n	8007cf6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220d      	movs	r2, #13
 8007cf2:	701a      	strb	r2, [r3, #0]
      break;
 8007cf4:	e0b8      	b.n	8007e68 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	795b      	ldrb	r3, [r3, #5]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ffd7 	bl	8008cb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	791b      	ldrb	r3, [r3, #4]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 ffd1 	bl	8008cb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
      break;
 8007d1a:	e0a5      	b.n	8007e68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f965 	bl	8007ff4 <USBH_Get_CfgDesc>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2205      	movs	r2, #5
 8007d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d3a:	e097      	b.n	8007e6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	f040 8094 	bne.w	8007e6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d903      	bls.n	8007d66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	701a      	strb	r2, [r3, #0]
      break;
 8007d64:	e082      	b.n	8007e6c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff9f 	bl	8008cb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 ff99 	bl	8008cb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
      break;
 8007d8a:	e06f      	b.n	8007e6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d019      	beq.n	8007dca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007da2:	23ff      	movs	r3, #255	; 0xff
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f949 	bl	800803c <USBH_Get_StringDesc>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2206      	movs	r2, #6
 8007db8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dba:	e059      	b.n	8007e70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d156      	bne.n	8007e70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2206      	movs	r2, #6
 8007dc6:	705a      	strb	r2, [r3, #1]
      break;
 8007dc8:	e052      	b.n	8007e70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2206      	movs	r2, #6
 8007dce:	705a      	strb	r2, [r3, #1]
      break;
 8007dd0:	e04e      	b.n	8007e70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d019      	beq.n	8007e10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007de8:	23ff      	movs	r3, #255	; 0xff
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f926 	bl	800803c <USBH_Get_StringDesc>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2207      	movs	r2, #7
 8007dfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e00:	e038      	b.n	8007e74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d135      	bne.n	8007e74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2207      	movs	r2, #7
 8007e0c:	705a      	strb	r2, [r3, #1]
      break;
 8007e0e:	e031      	b.n	8007e74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2207      	movs	r2, #7
 8007e14:	705a      	strb	r2, [r3, #1]
      break;
 8007e16:	e02d      	b.n	8007e74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d017      	beq.n	8007e52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e2e:	23ff      	movs	r3, #255	; 0xff
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f903 	bl	800803c <USBH_Get_StringDesc>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d102      	bne.n	8007e46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e44:	e018      	b.n	8007e78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d115      	bne.n	8007e78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e50:	e012      	b.n	8007e78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
      break;
 8007e56:	e00f      	b.n	8007e78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e58:	bf00      	nop
 8007e5a:	e00e      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e00c      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e60:	bf00      	nop
 8007e62:	e00a      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e64:	bf00      	nop
 8007e66:	e008      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e006      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <USBH_HandleEnum+0x3be>
      break;
 8007e78:	bf00      	nop
  }
  return Status;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f804 	bl	8007ec6 <USBH_HandleSof>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b0b      	cmp	r3, #11
 8007ed6:	d10a      	bne.n	8007eee <USBH_HandleSof+0x28>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f06:	bf00      	nop
}
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f22:	bf00      	nop
}
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f844 	bl	800900a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fe91 	bl	8008cb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fe8b 	bl	8008cb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f864 	bl	8008092 <USBH_GetDescriptor>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f000 f918 	bl	800821a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	331c      	adds	r3, #28
 8008004:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f83d 	bl	8008092 <USBH_GetDescriptor>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d107      	bne.n	8008032 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	461a      	mov	r2, r3
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f987 	bl	800833c <USBH_ParseCfgDesc>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af02      	add	r7, sp, #8
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	461a      	mov	r2, r3
 8008048:	460b      	mov	r3, r1
 800804a:	72fb      	strb	r3, [r7, #11]
 800804c:	4613      	mov	r3, r2
 800804e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008058:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008060:	893b      	ldrh	r3, [r7, #8]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	460b      	mov	r3, r1
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f812 	bl	8008092 <USBH_GetDescriptor>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800807e:	893a      	ldrh	r2, [r7, #8]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fb24 	bl	80086d0 <USBH_ParseStringDesc>
  }

  return status;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	72fb      	strb	r3, [r7, #11]
 80080a0:	4613      	mov	r3, r2
 80080a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	789b      	ldrb	r3, [r3, #2]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11c      	bne.n	80080e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2206      	movs	r2, #6
 80080bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	893a      	ldrh	r2, [r7, #8]
 80080c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080c4:	893b      	ldrh	r3, [r7, #8]
 80080c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ce:	d104      	bne.n	80080da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f240 4209 	movw	r2, #1033	; 0x409
 80080d6:	829a      	strh	r2, [r3, #20]
 80080d8:	e002      	b.n	80080e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8b3a      	ldrh	r2, [r7, #24]
 80080e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080e6:	8b3b      	ldrh	r3, [r7, #24]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fb3d 	bl	800876c <USBH_CtlReq>
 80080f2:	4603      	mov	r3, r0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	789b      	ldrb	r3, [r3, #2]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d10f      	bne.n	8008130 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2205      	movs	r2, #5
 800811a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fb19 	bl	800876c <USBH_CtlReq>
 800813a:	4603      	mov	r3, r0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	789b      	ldrb	r3, [r3, #2]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10e      	bne.n	8008176 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2209      	movs	r2, #9
 8008162:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	887a      	ldrh	r2, [r7, #2]
 8008168:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008176:	2200      	movs	r2, #0
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 faf6 	bl	800876c <USBH_CtlReq>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	789b      	ldrb	r3, [r3, #2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10f      	bne.n	80081be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2203      	movs	r2, #3
 80081a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081be:	2200      	movs	r2, #0
 80081c0:	2100      	movs	r1, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fad2 	bl	800876c <USBH_CtlReq>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	789b      	ldrb	r3, [r3, #2]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10f      	bne.n	8008206 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2202      	movs	r2, #2
 80081ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008206:	2200      	movs	r2, #0
 8008208:	2100      	movs	r1, #0
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 faae 	bl	800876c <USBH_CtlReq>
 8008210:	4603      	mov	r3, r0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	4613      	mov	r3, r2
 8008226:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	785a      	ldrb	r2, [r3, #1]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3302      	adds	r3, #2
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29a      	uxth	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3303      	adds	r3, #3
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	b29b      	uxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	791a      	ldrb	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	795a      	ldrb	r2, [r3, #5]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	799a      	ldrb	r2, [r3, #6]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	79da      	ldrb	r2, [r3, #7]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	79db      	ldrb	r3, [r3, #7]
 8008278:	2b20      	cmp	r3, #32
 800827a:	dc11      	bgt.n	80082a0 <USBH_ParseDevDesc+0x86>
 800827c:	2b08      	cmp	r3, #8
 800827e:	db16      	blt.n	80082ae <USBH_ParseDevDesc+0x94>
 8008280:	3b08      	subs	r3, #8
 8008282:	2201      	movs	r2, #1
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800828c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf14      	ite	ne
 8008294:	2301      	movne	r3, #1
 8008296:	2300      	moveq	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <USBH_ParseDevDesc+0x8a>
 800829e:	e006      	b.n	80082ae <USBH_ParseDevDesc+0x94>
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d104      	bne.n	80082ae <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	79da      	ldrb	r2, [r3, #7]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	71da      	strb	r2, [r3, #7]
      break;
 80082ac:	e003      	b.n	80082b6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2240      	movs	r2, #64	; 0x40
 80082b2:	71da      	strb	r2, [r3, #7]
      break;
 80082b4:	bf00      	nop
  }

  if (length > 8U)
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d939      	bls.n	8008330 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3308      	adds	r3, #8
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	3309      	adds	r3, #9
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	330a      	adds	r3, #10
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	330b      	adds	r3, #11
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	330c      	adds	r3, #12
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	330d      	adds	r3, #13
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	b29b      	uxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	7b9a      	ldrb	r2, [r3, #14]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	7bda      	ldrb	r2, [r3, #15]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	7c1a      	ldrb	r2, [r3, #16]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	7c5a      	ldrb	r2, [r3, #17]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	745a      	strb	r2, [r3, #17]
  }
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008350:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	785a      	ldrb	r2, [r3, #1]
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3302      	adds	r3, #2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29a      	uxth	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3303      	adds	r3, #3
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	b29b      	uxth	r3, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	b29b      	uxth	r3, r3
 8008394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008398:	bf28      	it	cs
 800839a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800839e:	b29a      	uxth	r2, r3
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	791a      	ldrb	r2, [r3, #4]
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	795a      	ldrb	r2, [r3, #5]
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	799a      	ldrb	r2, [r3, #6]
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	79da      	ldrb	r2, [r3, #7]
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	7a1a      	ldrb	r2, [r3, #8]
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d002      	beq.n	80083da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	2209      	movs	r2, #9
 80083d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	2b09      	cmp	r3, #9
 80083de:	f240 809d 	bls.w	800851c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80083e2:	2309      	movs	r3, #9
 80083e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083ea:	e081      	b.n	80084f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083ec:	f107 0316 	add.w	r3, r7, #22
 80083f0:	4619      	mov	r1, r3
 80083f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f4:	f000 f99f 	bl	8008736 <USBH_GetNextDesc>
 80083f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d176      	bne.n	80084f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b09      	cmp	r3, #9
 8008408:	d002      	beq.n	8008410 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2209      	movs	r2, #9
 800840e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008414:	221a      	movs	r2, #26
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	3308      	adds	r3, #8
 800841c:	6a3a      	ldr	r2, [r7, #32]
 800841e:	4413      	add	r3, r2
 8008420:	3302      	adds	r3, #2
 8008422:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008426:	69f8      	ldr	r0, [r7, #28]
 8008428:	f000 f87e 	bl	8008528 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008436:	e043      	b.n	80084c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008438:	f107 0316 	add.w	r3, r7, #22
 800843c:	4619      	mov	r1, r3
 800843e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008440:	f000 f979 	bl	8008736 <USBH_GetNextDesc>
 8008444:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b05      	cmp	r3, #5
 800844c:	d138      	bne.n	80084c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d10f      	bne.n	8008476 <USBH_ParseCfgDesc+0x13a>
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	799b      	ldrb	r3, [r3, #6]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d10b      	bne.n	8008476 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	79db      	ldrb	r3, [r3, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10f      	bne.n	8008486 <USBH_ParseCfgDesc+0x14a>
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b09      	cmp	r3, #9
 800846c:	d00b      	beq.n	8008486 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	2209      	movs	r2, #9
 8008472:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008474:	e007      	b.n	8008486 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b07      	cmp	r3, #7
 800847c:	d004      	beq.n	8008488 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	2207      	movs	r2, #7
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e000      	b.n	8008488 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008486:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008490:	3201      	adds	r2, #1
 8008492:	00d2      	lsls	r2, r2, #3
 8008494:	211a      	movs	r1, #26
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3308      	adds	r3, #8
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	4413      	add	r3, r2
 80084a2:	3304      	adds	r3, #4
 80084a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80084a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a8:	69b9      	ldr	r1, [r7, #24]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f86b 	bl	8008586 <USBH_ParseEPDesc>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80084b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084ba:	3301      	adds	r3, #1
 80084bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d204      	bcs.n	80084d6 <USBH_ParseCfgDesc+0x19a>
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	885a      	ldrh	r2, [r3, #2]
 80084d0:	8afb      	ldrh	r3, [r7, #22]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d8b0      	bhi.n	8008438 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80084de:	429a      	cmp	r2, r3
 80084e0:	d201      	bcs.n	80084e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e01c      	b.n	8008520 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80084e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ea:	3301      	adds	r3, #1
 80084ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d805      	bhi.n	8008504 <USBH_ParseCfgDesc+0x1c8>
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	885a      	ldrh	r2, [r3, #2]
 80084fc:	8afb      	ldrh	r3, [r7, #22]
 80084fe:	429a      	cmp	r2, r3
 8008500:	f63f af74 	bhi.w	80083ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	2b02      	cmp	r3, #2
 800850a:	bf28      	it	cs
 800850c:	2302      	movcs	r3, #2
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008514:	429a      	cmp	r2, r3
 8008516:	d201      	bcs.n	800851c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008518:	2303      	movs	r3, #3
 800851a:	e001      	b.n	8008520 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800851c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008520:	4618      	mov	r0, r3
 8008522:	3730      	adds	r7, #48	; 0x30
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	785a      	ldrb	r2, [r3, #1]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	789a      	ldrb	r2, [r3, #2]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	78da      	ldrb	r2, [r3, #3]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	791a      	ldrb	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	795a      	ldrb	r2, [r3, #5]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	799a      	ldrb	r2, [r3, #6]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	79da      	ldrb	r2, [r3, #7]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	7a1a      	ldrb	r2, [r3, #8]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	721a      	strb	r2, [r3, #8]
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	785a      	ldrb	r2, [r3, #1]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	789a      	ldrb	r2, [r3, #2]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	78da      	ldrb	r2, [r3, #3]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3304      	adds	r3, #4
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3305      	adds	r3, #5
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4313      	orrs	r3, r2
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	799a      	ldrb	r2, [r3, #6]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	889b      	ldrh	r3, [r3, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80085e2:	2303      	movs	r3, #3
 80085e4:	75fb      	strb	r3, [r7, #23]
 80085e6:	e033      	b.n	8008650 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	889b      	ldrh	r3, [r3, #4]
 80085ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085f0:	f023 0307 	bic.w	r3, r3, #7
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	889b      	ldrh	r3, [r3, #4]
 80085fe:	b21a      	sxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3304      	adds	r3, #4
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b299      	uxth	r1, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3305      	adds	r3, #5
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	430b      	orrs	r3, r1
 8008616:	b29b      	uxth	r3, r3
 8008618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800861c:	2b00      	cmp	r3, #0
 800861e:	d110      	bne.n	8008642 <USBH_ParseEPDesc+0xbc>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b299      	uxth	r1, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3305      	adds	r3, #5
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	b29b      	uxth	r3, r3
 8008634:	430b      	orrs	r3, r1
 8008636:	b29b      	uxth	r3, r3
 8008638:	b21b      	sxth	r3, r3
 800863a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800863e:	b21b      	sxth	r3, r3
 8008640:	e001      	b.n	8008646 <USBH_ParseEPDesc+0xc0>
 8008642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008646:	4313      	orrs	r3, r2
 8008648:	b21b      	sxth	r3, r3
 800864a:	b29a      	uxth	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008656:	2b00      	cmp	r3, #0
 8008658:	d116      	bne.n	8008688 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	78db      	ldrb	r3, [r3, #3]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b01      	cmp	r3, #1
 8008664:	d005      	beq.n	8008672 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	78db      	ldrb	r3, [r3, #3]
 800866a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800866e:	2b03      	cmp	r3, #3
 8008670:	d127      	bne.n	80086c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	799b      	ldrb	r3, [r3, #6]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <USBH_ParseEPDesc+0xfc>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	799b      	ldrb	r3, [r3, #6]
 800867e:	2b10      	cmp	r3, #16
 8008680:	d91f      	bls.n	80086c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008682:	2303      	movs	r3, #3
 8008684:	75fb      	strb	r3, [r7, #23]
 8008686:	e01c      	b.n	80086c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	78db      	ldrb	r3, [r3, #3]
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b01      	cmp	r3, #1
 8008692:	d10a      	bne.n	80086aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	799b      	ldrb	r3, [r3, #6]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <USBH_ParseEPDesc+0x11e>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	799b      	ldrb	r3, [r3, #6]
 80086a0:	2b10      	cmp	r3, #16
 80086a2:	d90e      	bls.n	80086c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80086a4:	2303      	movs	r3, #3
 80086a6:	75fb      	strb	r3, [r7, #23]
 80086a8:	e00b      	b.n	80086c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	78db      	ldrb	r3, [r3, #3]
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d105      	bne.n	80086c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	799b      	ldrb	r3, [r3, #6]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80086be:	2303      	movs	r3, #3
 80086c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d120      	bne.n	800872a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	1e9a      	subs	r2, r3, #2
 80086ee:	88fb      	ldrh	r3, [r7, #6]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bf28      	it	cs
 80086f4:	4613      	movcs	r3, r2
 80086f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3302      	adds	r3, #2
 80086fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086fe:	2300      	movs	r3, #0
 8008700:	82fb      	strh	r3, [r7, #22]
 8008702:	e00b      	b.n	800871c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008704:	8afb      	ldrh	r3, [r7, #22]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	781a      	ldrb	r2, [r3, #0]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3301      	adds	r3, #1
 8008714:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008716:	8afb      	ldrh	r3, [r7, #22]
 8008718:	3302      	adds	r3, #2
 800871a:	82fb      	strh	r3, [r7, #22]
 800871c:	8afa      	ldrh	r2, [r7, #22]
 800871e:	8abb      	ldrh	r3, [r7, #20]
 8008720:	429a      	cmp	r2, r3
 8008722:	d3ef      	bcc.n	8008704 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
  }
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	881a      	ldrh	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	4413      	add	r3, r2
 800874c:	b29a      	uxth	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800875e:	68fb      	ldr	r3, [r7, #12]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800877a:	2301      	movs	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	789b      	ldrb	r3, [r3, #2]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d002      	beq.n	800878c <USBH_CtlReq+0x20>
 8008786:	2b02      	cmp	r3, #2
 8008788:	d00f      	beq.n	80087aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800878a:	e027      	b.n	80087dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2202      	movs	r2, #2
 80087a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80087a4:	2301      	movs	r3, #1
 80087a6:	75fb      	strb	r3, [r7, #23]
      break;
 80087a8:	e018      	b.n	80087dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 f81c 	bl	80087e8 <USBH_HandleControl>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <USBH_CtlReq+0x54>
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d106      	bne.n	80087ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	761a      	strb	r2, [r3, #24]
      break;
 80087cc:	e005      	b.n	80087da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d102      	bne.n	80087da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2201      	movs	r2, #1
 80087d8:	709a      	strb	r2, [r3, #2]
      break;
 80087da:	bf00      	nop
  }
  return status;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	7e1b      	ldrb	r3, [r3, #24]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	2b0a      	cmp	r3, #10
 8008800:	f200 8156 	bhi.w	8008ab0 <USBH_HandleControl+0x2c8>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <USBH_HandleControl+0x24>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008839 	.word	0x08008839
 8008810:	08008853 	.word	0x08008853
 8008814:	080088bd 	.word	0x080088bd
 8008818:	080088e3 	.word	0x080088e3
 800881c:	0800891b 	.word	0x0800891b
 8008820:	08008945 	.word	0x08008945
 8008824:	08008997 	.word	0x08008997
 8008828:	080089b9 	.word	0x080089b9
 800882c:	080089f5 	.word	0x080089f5
 8008830:	08008a1b 	.word	0x08008a1b
 8008834:	08008a59 	.word	0x08008a59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f103 0110 	add.w	r1, r3, #16
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	795b      	ldrb	r3, [r3, #5]
 8008842:	461a      	mov	r2, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f943 	bl	8008ad0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	761a      	strb	r2, [r3, #24]
      break;
 8008850:	e139      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	795b      	ldrb	r3, [r3, #5]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fcc5 	bl	80091e8 <USBH_LL_GetURBState>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d11e      	bne.n	80088a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7c1b      	ldrb	r3, [r3, #16]
 800886c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008870:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8adb      	ldrh	r3, [r3, #22]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800887a:	7b7b      	ldrb	r3, [r7, #13]
 800887c:	2b80      	cmp	r3, #128	; 0x80
 800887e:	d103      	bne.n	8008888 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2203      	movs	r2, #3
 8008884:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008886:	e115      	b.n	8008ab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2205      	movs	r2, #5
 800888c:	761a      	strb	r2, [r3, #24]
      break;
 800888e:	e111      	b.n	8008ab4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008890:	7b7b      	ldrb	r3, [r7, #13]
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	d103      	bne.n	800889e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2209      	movs	r2, #9
 800889a:	761a      	strb	r2, [r3, #24]
      break;
 800889c:	e10a      	b.n	8008ab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2207      	movs	r2, #7
 80088a2:	761a      	strb	r2, [r3, #24]
      break;
 80088a4:	e106      	b.n	8008ab4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d003      	beq.n	80088b4 <USBH_HandleControl+0xcc>
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	f040 8100 	bne.w	8008ab4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	220b      	movs	r2, #11
 80088b8:	761a      	strb	r2, [r3, #24]
      break;
 80088ba:	e0fb      	b.n	8008ab4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6899      	ldr	r1, [r3, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	899a      	ldrh	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f93a 	bl	8008b4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	761a      	strb	r2, [r3, #24]
      break;
 80088e0:	e0f1      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc7d 	bl	80091e8 <USBH_LL_GetURBState>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d102      	bne.n	80088fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2209      	movs	r2, #9
 80088fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b05      	cmp	r3, #5
 8008902:	d102      	bne.n	800890a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008904:	2303      	movs	r3, #3
 8008906:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008908:	e0d6      	b.n	8008ab8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	2b04      	cmp	r3, #4
 800890e:	f040 80d3 	bne.w	8008ab8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	220b      	movs	r2, #11
 8008916:	761a      	strb	r2, [r3, #24]
      break;
 8008918:	e0ce      	b.n	8008ab8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6899      	ldr	r1, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	899a      	ldrh	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	795b      	ldrb	r3, [r3, #5]
 8008926:	2001      	movs	r0, #1
 8008928:	9000      	str	r0, [sp, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f8ea 	bl	8008b04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2206      	movs	r2, #6
 8008940:	761a      	strb	r2, [r3, #24]
      break;
 8008942:	e0c0      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	795b      	ldrb	r3, [r3, #5]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fc4c 	bl	80091e8 <USBH_LL_GetURBState>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d103      	bne.n	8008962 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2207      	movs	r2, #7
 800895e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008960:	e0ac      	b.n	8008abc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b05      	cmp	r3, #5
 8008966:	d105      	bne.n	8008974 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	220c      	movs	r2, #12
 800896c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800896e:	2303      	movs	r3, #3
 8008970:	73fb      	strb	r3, [r7, #15]
      break;
 8008972:	e0a3      	b.n	8008abc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d103      	bne.n	8008982 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2205      	movs	r2, #5
 800897e:	761a      	strb	r2, [r3, #24]
      break;
 8008980:	e09c      	b.n	8008abc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b04      	cmp	r3, #4
 8008986:	f040 8099 	bne.w	8008abc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	220b      	movs	r2, #11
 800898e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008990:	2302      	movs	r3, #2
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e092      	b.n	8008abc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	791b      	ldrb	r3, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	2100      	movs	r1, #0
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f8d5 	bl	8008b4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2208      	movs	r2, #8
 80089b4:	761a      	strb	r2, [r3, #24]

      break;
 80089b6:	e086      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc12 	bl	80091e8 <USBH_LL_GetURBState>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d105      	bne.n	80089da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	220d      	movs	r2, #13
 80089d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089d8:	e072      	b.n	8008ac0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d103      	bne.n	80089e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	220b      	movs	r2, #11
 80089e4:	761a      	strb	r2, [r3, #24]
      break;
 80089e6:	e06b      	b.n	8008ac0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	d168      	bne.n	8008ac0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80089ee:	2303      	movs	r3, #3
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e065      	b.n	8008ac0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	795b      	ldrb	r3, [r3, #5]
 80089f8:	2201      	movs	r2, #1
 80089fa:	9200      	str	r2, [sp, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f87f 	bl	8008b04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	220a      	movs	r2, #10
 8008a16:	761a      	strb	r2, [r3, #24]
      break;
 8008a18:	e055      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	795b      	ldrb	r3, [r3, #5]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fbe1 	bl	80091e8 <USBH_LL_GetURBState>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d105      	bne.n	8008a3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	220d      	movs	r2, #13
 8008a38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a3a:	e043      	b.n	8008ac4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d103      	bne.n	8008a4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2209      	movs	r2, #9
 8008a46:	761a      	strb	r2, [r3, #24]
      break;
 8008a48:	e03c      	b.n	8008ac4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d139      	bne.n	8008ac4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	220b      	movs	r2, #11
 8008a54:	761a      	strb	r2, [r3, #24]
      break;
 8008a56:	e035      	b.n	8008ac4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7e5b      	ldrb	r3, [r3, #25]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	765a      	strb	r2, [r3, #25]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7e5b      	ldrb	r3, [r3, #25]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d806      	bhi.n	8008a7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a78:	e025      	b.n	8008ac6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a80:	2106      	movs	r1, #6
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	795b      	ldrb	r3, [r3, #5]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f90c 	bl	8008cb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f906 	bl	8008cb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e00a      	b.n	8008ac6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008ab0:	bf00      	nop
 8008ab2:	e008      	b.n	8008ac6 <USBH_HandleControl+0x2de>
      break;
 8008ab4:	bf00      	nop
 8008ab6:	e006      	b.n	8008ac6 <USBH_HandleControl+0x2de>
      break;
 8008ab8:	bf00      	nop
 8008aba:	e004      	b.n	8008ac6 <USBH_HandleControl+0x2de>
      break;
 8008abc:	bf00      	nop
 8008abe:	e002      	b.n	8008ac6 <USBH_HandleControl+0x2de>
      break;
 8008ac0:	bf00      	nop
 8008ac2:	e000      	b.n	8008ac6 <USBH_HandleControl+0x2de>
      break;
 8008ac4:	bf00      	nop
  }

  return status;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af04      	add	r7, sp, #16
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ade:	79f9      	ldrb	r1, [r7, #7]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2300      	movs	r3, #0
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fb46 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	460b      	mov	r3, r1
 8008b14:	80fb      	strh	r3, [r7, #6]
 8008b16:	4613      	mov	r3, r2
 8008b18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b28:	7979      	ldrb	r1, [r7, #5]
 8008b2a:	7e3b      	ldrb	r3, [r7, #24]
 8008b2c:	9303      	str	r3, [sp, #12]
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	9302      	str	r3, [sp, #8]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	2301      	movs	r3, #1
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fb21 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af04      	add	r7, sp, #16
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	80fb      	strh	r3, [r7, #6]
 8008b60:	4613      	mov	r3, r2
 8008b62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b64:	7979      	ldrb	r1, [r7, #5]
 8008b66:	2300      	movs	r3, #0
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	2301      	movs	r3, #1
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	2300      	movs	r3, #0
 8008b78:	2201      	movs	r2, #1
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fb03 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b80:	2300      	movs	r3, #0

}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b088      	sub	sp, #32
 8008b8e:	af04      	add	r7, sp, #16
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	4611      	mov	r1, r2
 8008b96:	461a      	mov	r2, r3
 8008b98:	460b      	mov	r3, r1
 8008b9a:	80fb      	strh	r3, [r7, #6]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bae:	7979      	ldrb	r1, [r7, #5]
 8008bb0:	7e3b      	ldrb	r3, [r7, #24]
 8008bb2:	9303      	str	r3, [sp, #12]
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fade 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af04      	add	r7, sp, #16
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4611      	mov	r1, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	460b      	mov	r3, r1
 8008be4:	80fb      	strh	r3, [r7, #6]
 8008be6:	4613      	mov	r3, r2
 8008be8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bea:	7979      	ldrb	r1, [r7, #5]
 8008bec:	2300      	movs	r3, #0
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
 8008bf2:	9302      	str	r3, [sp, #8]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	2201      	movs	r2, #1
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 fac0 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af04      	add	r7, sp, #16
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	70fb      	strb	r3, [r7, #3]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70bb      	strb	r3, [r7, #2]
 8008c26:	4613      	mov	r3, r2
 8008c28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c2a:	7878      	ldrb	r0, [r7, #1]
 8008c2c:	78ba      	ldrb	r2, [r7, #2]
 8008c2e:	78f9      	ldrb	r1, [r7, #3]
 8008c30:	8b3b      	ldrh	r3, [r7, #24]
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	7d3b      	ldrb	r3, [r7, #20]
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	7c3b      	ldrb	r3, [r7, #16]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa53 	bl	80090ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa72 	bl	8009148 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f836 	bl	8008cec <USBH_GetFreePipe>
 8008c80:	4603      	mov	r3, r0
 8008c82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c84:	89fb      	ldrh	r3, [r7, #14]
 8008c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00a      	beq.n	8008ca4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	33e0      	adds	r3, #224	; 0xe0
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	b2db      	uxtb	r3, r3
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d80d      	bhi.n	8008cde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	33e0      	adds	r3, #224	; 0xe0
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	33e0      	adds	r3, #224	; 0xe0
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
 8008cfc:	e00f      	b.n	8008d1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	33e0      	adds	r3, #224	; 0xe0
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	e007      	b.n	8008d28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b0f      	cmp	r3, #15
 8008d22:	d9ec      	bls.n	8008cfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008d38:	2201      	movs	r2, #1
 8008d3a:	490e      	ldr	r1, [pc, #56]	; (8008d74 <MX_USB_HOST_Init+0x40>)
 8008d3c:	480e      	ldr	r0, [pc, #56]	; (8008d78 <MX_USB_HOST_Init+0x44>)
 8008d3e:	f7fe fba7 	bl	8007490 <USBH_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d48:	f7f7 ff0e 	bl	8000b68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d4c:	490b      	ldr	r1, [pc, #44]	; (8008d7c <MX_USB_HOST_Init+0x48>)
 8008d4e:	480a      	ldr	r0, [pc, #40]	; (8008d78 <MX_USB_HOST_Init+0x44>)
 8008d50:	f7fe fc2c 	bl	80075ac <USBH_RegisterClass>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d5a:	f7f7 ff05 	bl	8000b68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d5e:	4806      	ldr	r0, [pc, #24]	; (8008d78 <MX_USB_HOST_Init+0x44>)
 8008d60:	f7fe fcb0 	bl	80076c4 <USBH_Start>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d6a:	f7f7 fefd 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d6e:	bf00      	nop
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	08008d95 	.word	0x08008d95
 8008d78:	20000258 	.word	0x20000258
 8008d7c:	20000010 	.word	0x20000010

08008d80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d84:	4802      	ldr	r0, [pc, #8]	; (8008d90 <MX_USB_HOST_Process+0x10>)
 8008d86:	f7fe fcad 	bl	80076e4 <USBH_Process>
}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000258 	.word	0x20000258

08008d94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d819      	bhi.n	8008ddc <USBH_UserProcess+0x48>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBH_UserProcess+0x1c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008ddd 	.word	0x08008ddd
 8008db4:	08008dcd 	.word	0x08008dcd
 8008db8:	08008ddd 	.word	0x08008ddd
 8008dbc:	08008dd5 	.word	0x08008dd5
 8008dc0:	08008dc5 	.word	0x08008dc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <USBH_UserProcess+0x58>)
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	701a      	strb	r2, [r3, #0]
  break;
 8008dca:	e008      	b.n	8008dde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008dcc:	4b07      	ldr	r3, [pc, #28]	; (8008dec <USBH_UserProcess+0x58>)
 8008dce:	2202      	movs	r2, #2
 8008dd0:	701a      	strb	r2, [r3, #0]
  break;
 8008dd2:	e004      	b.n	8008dde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <USBH_UserProcess+0x58>)
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	701a      	strb	r2, [r3, #0]
  break;
 8008dda:	e000      	b.n	8008dde <USBH_UserProcess+0x4a>

  default:
  break;
 8008ddc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000630 	.word	0x20000630

08008df0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	605a      	str	r2, [r3, #4]
 8008e02:	609a      	str	r2, [r3, #8]
 8008e04:	60da      	str	r2, [r3, #12]
 8008e06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e10:	d147      	bne.n	8008ea2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	4b25      	ldr	r3, [pc, #148]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	4a24      	ldr	r2, [pc, #144]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e1c:	f043 0301 	orr.w	r3, r3, #1
 8008e20:	6313      	str	r3, [r2, #48]	; 0x30
 8008e22:	4b22      	ldr	r3, [pc, #136]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e34:	2300      	movs	r3, #0
 8008e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	4619      	mov	r1, r3
 8008e42:	481b      	ldr	r0, [pc, #108]	; (8008eb0 <HAL_HCD_MspInit+0xc0>)
 8008e44:	f7f8 fe5a 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4e:	2302      	movs	r3, #2
 8008e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e56:	2300      	movs	r3, #0
 8008e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5e:	f107 0314 	add.w	r3, r7, #20
 8008e62:	4619      	mov	r1, r3
 8008e64:	4812      	ldr	r0, [pc, #72]	; (8008eb0 <HAL_HCD_MspInit+0xc0>)
 8008e66:	f7f8 fe49 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e6a:	4b10      	ldr	r3, [pc, #64]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	4a0f      	ldr	r2, [pc, #60]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e74:	6353      	str	r3, [r2, #52]	; 0x34
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	4a0b      	ldr	r2, [pc, #44]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e84:	6453      	str	r3, [r2, #68]	; 0x44
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <HAL_HCD_MspInit+0xbc>)
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8008e92:	2200      	movs	r2, #0
 8008e94:	2101      	movs	r1, #1
 8008e96:	2043      	movs	r0, #67	; 0x43
 8008e98:	f7f8 fa7d 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e9c:	2043      	movs	r0, #67	; 0x43
 8008e9e:	f7f8 fa96 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	40023800 	.word	0x40023800
 8008eb0:	40020000 	.word	0x40020000

08008eb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe ffed 	bl	8007ea2 <USBH_LL_IncTimer>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff f825 	bl	8007f2e <USBH_LL_Connect>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff f82e 	bl	8007f5c <USBH_LL_Disconnect>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
 8008f14:	4613      	mov	r3, r2
 8008f16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe ffdf 	bl	8007ef6 <USBH_LL_PortEnabled>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe ffdf 	bl	8007f12 <USBH_LL_PortDisabled>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d12a      	bne.n	8008fc4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f6e:	4a18      	ldr	r2, [pc, #96]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f88:	2208      	movs	r2, #8
 8008f8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f8c:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008fa4:	480a      	ldr	r0, [pc, #40]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008fa6:	f7f8 ff8f 	bl	8001ec8 <HAL_HCD_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008fb0:	f7f7 fdda 	bl	8000b68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008fb4:	4806      	ldr	r0, [pc, #24]	; (8008fd0 <USBH_LL_Init+0x74>)
 8008fb6:	f7f9 fb72 	bl	800269e <HAL_HCD_GetCurrentFrame>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fe ff60 	bl	8007e84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000634 	.word	0x20000634

08008fd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 fae1 	bl	80025b2 <HAL_HCD_Start>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f95c 	bl	80092b4 <USBH_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009000:	7bbb      	ldrb	r3, [r7, #14]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009020:	4618      	mov	r0, r3
 8009022:	f7f9 fae9 	bl	80025f8 <HAL_HCD_Stop>
 8009026:	4603      	mov	r3, r0
 8009028:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f941 	bl	80092b4 <USBH_Get_USB_Status>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009036:	7bbb      	ldrb	r3, [r7, #14]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009048:	2301      	movs	r3, #1
 800904a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009052:	4618      	mov	r0, r3
 8009054:	f7f9 fb31 	bl	80026ba <HAL_HCD_GetCurrentSpeed>
 8009058:	4603      	mov	r3, r0
 800905a:	2b02      	cmp	r3, #2
 800905c:	d00c      	beq.n	8009078 <USBH_LL_GetSpeed+0x38>
 800905e:	2b02      	cmp	r3, #2
 8009060:	d80d      	bhi.n	800907e <USBH_LL_GetSpeed+0x3e>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <USBH_LL_GetSpeed+0x2c>
 8009066:	2b01      	cmp	r3, #1
 8009068:	d003      	beq.n	8009072 <USBH_LL_GetSpeed+0x32>
 800906a:	e008      	b.n	800907e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
    break;
 8009070:	e008      	b.n	8009084 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
    break;
 8009076:	e005      	b.n	8009084 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009078:	2302      	movs	r3, #2
 800907a:	73fb      	strb	r3, [r7, #15]
    break;
 800907c:	e002      	b.n	8009084 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
    break;
 8009082:	bf00      	nop
  }
  return  speed;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f9 fac4 	bl	8002632 <HAL_HCD_ResetPort>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8ff 	bl	80092b4 <USBH_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f9 facb 	bl	8002676 <HAL_HCD_HC_GetXferCount>
 80090e0:	4603      	mov	r3, r0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090ea:	b590      	push	{r4, r7, lr}
 80090ec:	b089      	sub	sp, #36	; 0x24
 80090ee:	af04      	add	r7, sp, #16
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009112:	787c      	ldrb	r4, [r7, #1]
 8009114:	78ba      	ldrb	r2, [r7, #2]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800911a:	9302      	str	r3, [sp, #8]
 800911c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4623      	mov	r3, r4
 800912a:	f7f8 ff2f 	bl	8001f8c <HAL_HCD_HC_Init>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f8bd 	bl	80092b4 <USBH_Get_USB_Status>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7f8 ff9f 	bl	80020aa <HAL_HCD_HC_Halt>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f89e 	bl	80092b4 <USBH_Get_USB_Status>
 8009178:	4603      	mov	r3, r0
 800917a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917c:	7bbb      	ldrb	r3, [r7, #14]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009186:	b590      	push	{r4, r7, lr}
 8009188:	b089      	sub	sp, #36	; 0x24
 800918a:	af04      	add	r7, sp, #16
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	461a      	mov	r2, r3
 8009194:	4603      	mov	r3, r0
 8009196:	70fb      	strb	r3, [r7, #3]
 8009198:	460b      	mov	r3, r1
 800919a:	70bb      	strb	r3, [r7, #2]
 800919c:	4613      	mov	r3, r2
 800919e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091ae:	787c      	ldrb	r4, [r7, #1]
 80091b0:	78ba      	ldrb	r2, [r7, #2]
 80091b2:	78f9      	ldrb	r1, [r7, #3]
 80091b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4623      	mov	r3, r4
 80091ca:	f7f8 ff91 	bl	80020f0 <HAL_HCD_HC_SubmitRequest>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f86d 	bl	80092b4 <USBH_Get_USB_Status>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091de:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd90      	pop	{r4, r7, pc}

080091e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f9 fa25 	bl	800264e <HAL_HCD_HC_GetURBState>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009220:	2b01      	cmp	r3, #1
 8009222:	d103      	bne.n	800922c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 f870 	bl	800930c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800922c:	20c8      	movs	r0, #200	; 0xc8
 800922e:	f7f7 ffb3 	bl	8001198 <HAL_Delay>
  return USBH_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	4613      	mov	r3, r2
 800924a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009252:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	212c      	movs	r1, #44	; 0x2c
 800925a:	fb01 f303 	mul.w	r3, r1, r3
 800925e:	4413      	add	r3, r2
 8009260:	333b      	adds	r3, #59	; 0x3b
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	212c      	movs	r1, #44	; 0x2c
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	3354      	adds	r3, #84	; 0x54
 8009276:	78ba      	ldrb	r2, [r7, #2]
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e008      	b.n	800928e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	212c      	movs	r1, #44	; 0x2c
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	3355      	adds	r3, #85	; 0x55
 800928a:	78ba      	ldrb	r2, [r7, #2]
 800928c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7f7 ff77 	bl	8001198 <HAL_Delay>
}
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d817      	bhi.n	80092f8 <USBH_Get_USB_Status+0x44>
 80092c8:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <USBH_Get_USB_Status+0x1c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	080092e7 	.word	0x080092e7
 80092d8:	080092ed 	.word	0x080092ed
 80092dc:	080092f3 	.word	0x080092f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	e00b      	b.n	80092fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092e6:	2302      	movs	r3, #2
 80092e8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ea:	e008      	b.n	80092fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
    break;
 80092f0:	e005      	b.n	80092fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092f2:	2302      	movs	r3, #2
 80092f4:	73fb      	strb	r3, [r7, #15]
    break;
 80092f6:	e002      	b.n	80092fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092f8:	2302      	movs	r3, #2
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	bf00      	nop
  }
  return usb_status;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e001      	b.n	800932a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	461a      	mov	r2, r3
 800932e:	2101      	movs	r1, #1
 8009330:	4803      	ldr	r0, [pc, #12]	; (8009340 <MX_DriverVbusFS+0x34>)
 8009332:	f7f8 fd97 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40020800 	.word	0x40020800

08009344 <__errno>:
 8009344:	4b01      	ldr	r3, [pc, #4]	; (800934c <__errno+0x8>)
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000030 	.word	0x20000030

08009350 <__libc_init_array>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4d0d      	ldr	r5, [pc, #52]	; (8009388 <__libc_init_array+0x38>)
 8009354:	4c0d      	ldr	r4, [pc, #52]	; (800938c <__libc_init_array+0x3c>)
 8009356:	1b64      	subs	r4, r4, r5
 8009358:	10a4      	asrs	r4, r4, #2
 800935a:	2600      	movs	r6, #0
 800935c:	42a6      	cmp	r6, r4
 800935e:	d109      	bne.n	8009374 <__libc_init_array+0x24>
 8009360:	4d0b      	ldr	r5, [pc, #44]	; (8009390 <__libc_init_array+0x40>)
 8009362:	4c0c      	ldr	r4, [pc, #48]	; (8009394 <__libc_init_array+0x44>)
 8009364:	f000 f92e 	bl	80095c4 <_init>
 8009368:	1b64      	subs	r4, r4, r5
 800936a:	10a4      	asrs	r4, r4, #2
 800936c:	2600      	movs	r6, #0
 800936e:	42a6      	cmp	r6, r4
 8009370:	d105      	bne.n	800937e <__libc_init_array+0x2e>
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	f855 3b04 	ldr.w	r3, [r5], #4
 8009378:	4798      	blx	r3
 800937a:	3601      	adds	r6, #1
 800937c:	e7ee      	b.n	800935c <__libc_init_array+0xc>
 800937e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009382:	4798      	blx	r3
 8009384:	3601      	adds	r6, #1
 8009386:	e7f2      	b.n	800936e <__libc_init_array+0x1e>
 8009388:	08009608 	.word	0x08009608
 800938c:	08009608 	.word	0x08009608
 8009390:	08009608 	.word	0x08009608
 8009394:	0800960c 	.word	0x0800960c

08009398 <malloc>:
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <malloc+0xc>)
 800939a:	4601      	mov	r1, r0
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f000 b87f 	b.w	80094a0 <_malloc_r>
 80093a2:	bf00      	nop
 80093a4:	20000030 	.word	0x20000030

080093a8 <free>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <free+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f000 b80b 	b.w	80093c8 <_free_r>
 80093b2:	bf00      	nop
 80093b4:	20000030 	.word	0x20000030

080093b8 <memset>:
 80093b8:	4402      	add	r2, r0
 80093ba:	4603      	mov	r3, r0
 80093bc:	4293      	cmp	r3, r2
 80093be:	d100      	bne.n	80093c2 <memset+0xa>
 80093c0:	4770      	bx	lr
 80093c2:	f803 1b01 	strb.w	r1, [r3], #1
 80093c6:	e7f9      	b.n	80093bc <memset+0x4>

080093c8 <_free_r>:
 80093c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ca:	2900      	cmp	r1, #0
 80093cc:	d044      	beq.n	8009458 <_free_r+0x90>
 80093ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d2:	9001      	str	r0, [sp, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f1a1 0404 	sub.w	r4, r1, #4
 80093da:	bfb8      	it	lt
 80093dc:	18e4      	addlt	r4, r4, r3
 80093de:	f000 f8e3 	bl	80095a8 <__malloc_lock>
 80093e2:	4a1e      	ldr	r2, [pc, #120]	; (800945c <_free_r+0x94>)
 80093e4:	9801      	ldr	r0, [sp, #4]
 80093e6:	6813      	ldr	r3, [r2, #0]
 80093e8:	b933      	cbnz	r3, 80093f8 <_free_r+0x30>
 80093ea:	6063      	str	r3, [r4, #4]
 80093ec:	6014      	str	r4, [r2, #0]
 80093ee:	b003      	add	sp, #12
 80093f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f4:	f000 b8de 	b.w	80095b4 <__malloc_unlock>
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	d908      	bls.n	800940e <_free_r+0x46>
 80093fc:	6825      	ldr	r5, [r4, #0]
 80093fe:	1961      	adds	r1, r4, r5
 8009400:	428b      	cmp	r3, r1
 8009402:	bf01      	itttt	eq
 8009404:	6819      	ldreq	r1, [r3, #0]
 8009406:	685b      	ldreq	r3, [r3, #4]
 8009408:	1949      	addeq	r1, r1, r5
 800940a:	6021      	streq	r1, [r4, #0]
 800940c:	e7ed      	b.n	80093ea <_free_r+0x22>
 800940e:	461a      	mov	r2, r3
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	b10b      	cbz	r3, 8009418 <_free_r+0x50>
 8009414:	42a3      	cmp	r3, r4
 8009416:	d9fa      	bls.n	800940e <_free_r+0x46>
 8009418:	6811      	ldr	r1, [r2, #0]
 800941a:	1855      	adds	r5, r2, r1
 800941c:	42a5      	cmp	r5, r4
 800941e:	d10b      	bne.n	8009438 <_free_r+0x70>
 8009420:	6824      	ldr	r4, [r4, #0]
 8009422:	4421      	add	r1, r4
 8009424:	1854      	adds	r4, r2, r1
 8009426:	42a3      	cmp	r3, r4
 8009428:	6011      	str	r1, [r2, #0]
 800942a:	d1e0      	bne.n	80093ee <_free_r+0x26>
 800942c:	681c      	ldr	r4, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	6053      	str	r3, [r2, #4]
 8009432:	4421      	add	r1, r4
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	e7da      	b.n	80093ee <_free_r+0x26>
 8009438:	d902      	bls.n	8009440 <_free_r+0x78>
 800943a:	230c      	movs	r3, #12
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	e7d6      	b.n	80093ee <_free_r+0x26>
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	1961      	adds	r1, r4, r5
 8009444:	428b      	cmp	r3, r1
 8009446:	bf04      	itt	eq
 8009448:	6819      	ldreq	r1, [r3, #0]
 800944a:	685b      	ldreq	r3, [r3, #4]
 800944c:	6063      	str	r3, [r4, #4]
 800944e:	bf04      	itt	eq
 8009450:	1949      	addeq	r1, r1, r5
 8009452:	6021      	streq	r1, [r4, #0]
 8009454:	6054      	str	r4, [r2, #4]
 8009456:	e7ca      	b.n	80093ee <_free_r+0x26>
 8009458:	b003      	add	sp, #12
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	20000938 	.word	0x20000938

08009460 <sbrk_aligned>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4e0e      	ldr	r6, [pc, #56]	; (800949c <sbrk_aligned+0x3c>)
 8009464:	460c      	mov	r4, r1
 8009466:	6831      	ldr	r1, [r6, #0]
 8009468:	4605      	mov	r5, r0
 800946a:	b911      	cbnz	r1, 8009472 <sbrk_aligned+0x12>
 800946c:	f000 f88c 	bl	8009588 <_sbrk_r>
 8009470:	6030      	str	r0, [r6, #0]
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f000 f887 	bl	8009588 <_sbrk_r>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d00a      	beq.n	8009494 <sbrk_aligned+0x34>
 800947e:	1cc4      	adds	r4, r0, #3
 8009480:	f024 0403 	bic.w	r4, r4, #3
 8009484:	42a0      	cmp	r0, r4
 8009486:	d007      	beq.n	8009498 <sbrk_aligned+0x38>
 8009488:	1a21      	subs	r1, r4, r0
 800948a:	4628      	mov	r0, r5
 800948c:	f000 f87c 	bl	8009588 <_sbrk_r>
 8009490:	3001      	adds	r0, #1
 8009492:	d101      	bne.n	8009498 <sbrk_aligned+0x38>
 8009494:	f04f 34ff 	mov.w	r4, #4294967295
 8009498:	4620      	mov	r0, r4
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	2000093c 	.word	0x2000093c

080094a0 <_malloc_r>:
 80094a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a4:	1ccd      	adds	r5, r1, #3
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	4607      	mov	r7, r0
 80094b6:	db01      	blt.n	80094bc <_malloc_r+0x1c>
 80094b8:	42a9      	cmp	r1, r5
 80094ba:	d905      	bls.n	80094c8 <_malloc_r+0x28>
 80094bc:	230c      	movs	r3, #12
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	2600      	movs	r6, #0
 80094c2:	4630      	mov	r0, r6
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	4e2e      	ldr	r6, [pc, #184]	; (8009584 <_malloc_r+0xe4>)
 80094ca:	f000 f86d 	bl	80095a8 <__malloc_lock>
 80094ce:	6833      	ldr	r3, [r6, #0]
 80094d0:	461c      	mov	r4, r3
 80094d2:	bb34      	cbnz	r4, 8009522 <_malloc_r+0x82>
 80094d4:	4629      	mov	r1, r5
 80094d6:	4638      	mov	r0, r7
 80094d8:	f7ff ffc2 	bl	8009460 <sbrk_aligned>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	4604      	mov	r4, r0
 80094e0:	d14d      	bne.n	800957e <_malloc_r+0xde>
 80094e2:	6834      	ldr	r4, [r6, #0]
 80094e4:	4626      	mov	r6, r4
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	d140      	bne.n	800956c <_malloc_r+0xcc>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	4631      	mov	r1, r6
 80094ee:	4638      	mov	r0, r7
 80094f0:	eb04 0803 	add.w	r8, r4, r3
 80094f4:	f000 f848 	bl	8009588 <_sbrk_r>
 80094f8:	4580      	cmp	r8, r0
 80094fa:	d13a      	bne.n	8009572 <_malloc_r+0xd2>
 80094fc:	6821      	ldr	r1, [r4, #0]
 80094fe:	3503      	adds	r5, #3
 8009500:	1a6d      	subs	r5, r5, r1
 8009502:	f025 0503 	bic.w	r5, r5, #3
 8009506:	3508      	adds	r5, #8
 8009508:	2d0c      	cmp	r5, #12
 800950a:	bf38      	it	cc
 800950c:	250c      	movcc	r5, #12
 800950e:	4629      	mov	r1, r5
 8009510:	4638      	mov	r0, r7
 8009512:	f7ff ffa5 	bl	8009460 <sbrk_aligned>
 8009516:	3001      	adds	r0, #1
 8009518:	d02b      	beq.n	8009572 <_malloc_r+0xd2>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	442b      	add	r3, r5
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	e00e      	b.n	8009540 <_malloc_r+0xa0>
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	1b52      	subs	r2, r2, r5
 8009526:	d41e      	bmi.n	8009566 <_malloc_r+0xc6>
 8009528:	2a0b      	cmp	r2, #11
 800952a:	d916      	bls.n	800955a <_malloc_r+0xba>
 800952c:	1961      	adds	r1, r4, r5
 800952e:	42a3      	cmp	r3, r4
 8009530:	6025      	str	r5, [r4, #0]
 8009532:	bf18      	it	ne
 8009534:	6059      	strne	r1, [r3, #4]
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	bf08      	it	eq
 800953a:	6031      	streq	r1, [r6, #0]
 800953c:	5162      	str	r2, [r4, r5]
 800953e:	604b      	str	r3, [r1, #4]
 8009540:	4638      	mov	r0, r7
 8009542:	f104 060b 	add.w	r6, r4, #11
 8009546:	f000 f835 	bl	80095b4 <__malloc_unlock>
 800954a:	f026 0607 	bic.w	r6, r6, #7
 800954e:	1d23      	adds	r3, r4, #4
 8009550:	1af2      	subs	r2, r6, r3
 8009552:	d0b6      	beq.n	80094c2 <_malloc_r+0x22>
 8009554:	1b9b      	subs	r3, r3, r6
 8009556:	50a3      	str	r3, [r4, r2]
 8009558:	e7b3      	b.n	80094c2 <_malloc_r+0x22>
 800955a:	6862      	ldr	r2, [r4, #4]
 800955c:	42a3      	cmp	r3, r4
 800955e:	bf0c      	ite	eq
 8009560:	6032      	streq	r2, [r6, #0]
 8009562:	605a      	strne	r2, [r3, #4]
 8009564:	e7ec      	b.n	8009540 <_malloc_r+0xa0>
 8009566:	4623      	mov	r3, r4
 8009568:	6864      	ldr	r4, [r4, #4]
 800956a:	e7b2      	b.n	80094d2 <_malloc_r+0x32>
 800956c:	4634      	mov	r4, r6
 800956e:	6876      	ldr	r6, [r6, #4]
 8009570:	e7b9      	b.n	80094e6 <_malloc_r+0x46>
 8009572:	230c      	movs	r3, #12
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	4638      	mov	r0, r7
 8009578:	f000 f81c 	bl	80095b4 <__malloc_unlock>
 800957c:	e7a1      	b.n	80094c2 <_malloc_r+0x22>
 800957e:	6025      	str	r5, [r4, #0]
 8009580:	e7de      	b.n	8009540 <_malloc_r+0xa0>
 8009582:	bf00      	nop
 8009584:	20000938 	.word	0x20000938

08009588 <_sbrk_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_sbrk_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f7 fd1c 	bl	8000fd0 <_sbrk>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_sbrk_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_sbrk_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000940 	.word	0x20000940

080095a8 <__malloc_lock>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__malloc_lock+0x8>)
 80095aa:	f000 b809 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 80095ae:	bf00      	nop
 80095b0:	20000944 	.word	0x20000944

080095b4 <__malloc_unlock>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__malloc_unlock+0x8>)
 80095b6:	f000 b804 	b.w	80095c2 <__retarget_lock_release_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000944 	.word	0x20000944

080095c0 <__retarget_lock_acquire_recursive>:
 80095c0:	4770      	bx	lr

080095c2 <__retarget_lock_release_recursive>:
 80095c2:	4770      	bx	lr

080095c4 <_init>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr

080095d0 <_fini>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr
