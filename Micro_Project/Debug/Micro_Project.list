
Micro_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b260  0800b260  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b268  0800b268  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008f0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000984  20000984  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae72  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f18  00000000  00000000  0003af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c8  00000000  00000000  00040288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248fe  00000000  00000000  00041550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc0f  00000000  00000000  00065e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce685  00000000  00000000  00081a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001500e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057b8  00000000  00000000  00150134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b220 	.word	0x0800b220

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800b220 	.word	0x0800b220

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000d70:	23aa      	movs	r3, #170	; 0xaa
 8000d72:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000d74:	8afa      	ldrh	r2, [r7, #22]
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	2316      	movs	r3, #22
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	463b      	mov	r3, r7
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	21ee      	movs	r1, #238	; 0xee
 8000d88:	4836      	ldr	r0, [pc, #216]	; (8000e64 <read_calliberation_data+0x10c>)
 8000d8a:	f003 fd33 	bl	80047f4 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000d8e:	783b      	ldrb	r3, [r7, #0]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <read_calliberation_data+0x110>)
 8000d9e:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000da0:	78bb      	ldrb	r3, [r7, #2]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <read_calliberation_data+0x114>)
 8000db0:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	797b      	ldrb	r3, [r7, #5]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <read_calliberation_data+0x118>)
 8000dc2:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <read_calliberation_data+0x11c>)
 8000dd6:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000dd8:	7a3b      	ldrb	r3, [r7, #8]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	7a7b      	ldrb	r3, [r7, #9]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <read_calliberation_data+0x120>)
 8000dea:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000dec:	7abb      	ldrb	r3, [r7, #10]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <read_calliberation_data+0x124>)
 8000dfe:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	7b7b      	ldrb	r3, [r7, #13]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <read_calliberation_data+0x128>)
 8000e10:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <read_calliberation_data+0x12c>)
 8000e22:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000e24:	7c3b      	ldrb	r3, [r7, #16]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	7c7b      	ldrb	r3, [r7, #17]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <read_calliberation_data+0x130>)
 8000e34:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000e36:	7cbb      	ldrb	r3, [r7, #18]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <read_calliberation_data+0x134>)
 8000e46:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000e48:	7d3b      	ldrb	r3, [r7, #20]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	7d7b      	ldrb	r3, [r7, #21]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <read_calliberation_data+0x138>)
 8000e58:	801a      	strh	r2, [r3, #0]

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000dc 	.word	0x200000dc
 8000e68:	200000b0 	.word	0x200000b0
 8000e6c:	200000b2 	.word	0x200000b2
 8000e70:	200000b4 	.word	0x200000b4
 8000e74:	200000b6 	.word	0x200000b6
 8000e78:	200000b8 	.word	0x200000b8
 8000e7c:	200000ba 	.word	0x200000ba
 8000e80:	200000bc 	.word	0x200000bc
 8000e84:	200000be 	.word	0x200000be
 8000e88:	200000c0 	.word	0x200000c0
 8000e8c:	200000c2 	.word	0x200000c2
 8000e90:	200000c4 	.word	0x200000c4

08000e94 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8000e9a:	232e      	movs	r3, #46	; 0x2e
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	22f4      	movs	r2, #244	; 0xf4
 8000eb4:	21ee      	movs	r1, #238	; 0xee
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <Get_UTemp+0x60>)
 8000eb8:	f003 fba2 	bl	8004600 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 ffd1 	bl	8001e64 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	22f6      	movs	r2, #246	; 0xf6
 8000ed4:	21ee      	movs	r1, #238	; 0xee
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <Get_UTemp+0x60>)
 8000ed8:	f003 fc8c 	bl	80047f4 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000dc 	.word	0x200000dc

08000ef8 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8000efc:	f7ff ffca 	bl	8000e94 <Get_UTemp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <BMP180_GetTemp+0x108>)
 8000f06:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000f08:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <BMP180_GetTemp+0x108>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <BMP180_GetTemp+0x10c>)
 8000f0e:	8812      	ldrh	r2, [r2, #0]
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff faaa 	bl	800046c <__aeabi_i2d>
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <BMP180_GetTemp+0x110>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff faa3 	bl	800046c <__aeabi_i2d>
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <BMP180_GetTemp+0x114>)
 8000f2c:	f7ff fc32 	bl	8000794 <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff fb02 	bl	8000540 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fd0e 	bl	8000964 <__aeabi_d2iz>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <BMP180_GetTemp+0x118>)
 8000f4c:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <BMP180_GetTemp+0x11c>)
 8000f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa89 	bl	800046c <__aeabi_i2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <BMP180_GetTemp+0x120>)
 8000f60:	f7ff faee 	bl	8000540 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <BMP180_GetTemp+0x124>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <BMP180_GetTemp+0x118>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa76 	bl	800046c <__aeabi_i2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	f7ff fc04 	bl	8000794 <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fce6 	bl	8000964 <__aeabi_d2iz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a21      	ldr	r2, [pc, #132]	; (8001020 <BMP180_GetTemp+0x128>)
 8000f9c:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <BMP180_GetTemp+0x118>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <BMP180_GetTemp+0x128>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <BMP180_GetTemp+0x12c>)
 8000faa:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <BMP180_GetTemp+0x12c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa5a 	bl	800046c <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <BMP180_GetTemp+0x130>)
 8000fbe:	f7ff fbe9 	bl	8000794 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fccb 	bl	8000964 <__aeabi_d2iz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <BMP180_GetTemp+0x134>)
 8000fd2:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <BMP180_GetTemp+0x134>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa47 	bl	800046c <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <BMP180_GetTemp+0x138>)
 8000fe4:	f7ff fbd6 	bl	8000794 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fce0 	bl	80009b4 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	ee07 3a90 	vmov	s15, r3
}
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	200000c8 	.word	0x200000c8
 8001004:	200000ba 	.word	0x200000ba
 8001008:	200000b8 	.word	0x200000b8
 800100c:	40e00000 	.word	0x40e00000
 8001010:	200000cc 	.word	0x200000cc
 8001014:	200000c2 	.word	0x200000c2
 8001018:	40a00000 	.word	0x40a00000
 800101c:	200000c4 	.word	0x200000c4
 8001020:	200000d0 	.word	0x200000d0
 8001024:	200000d4 	.word	0x200000d4
 8001028:	40300000 	.word	0x40300000
 800102c:	200000d8 	.word	0x200000d8
 8001030:	40240000 	.word	0x40240000

08001034 <BMP180_Start>:
	BMP180_GetPress (oss);
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
}

void BMP180_Start (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001038:	f7ff fe8e 	bl	8000d58 <read_calliberation_data>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fe9b 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f8d3 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fa19 	bl	8001484 <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 f9f7 	bl	8001444 <MX_DMA_Init>
  MX_I2C1_Init();
 8001056:	f000 f937 	bl	80012c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800105a:	f000 f963 	bl	8001324 <MX_I2S3_Init>
  MX_SPI1_Init();
 800105e:	f000 f991 	bl	8001384 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001062:	f009 fc95 	bl	800a990 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001066:	f000 f9c3 	bl	80013f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* bmp180 ve uart it sini baslat */
  BMP180_Start();
 800106a:	f7ff ffe3 	bl	8001034 <BMP180_Start>
  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 800106e:	2203      	movs	r2, #3
 8001070:	4956      	ldr	r1, [pc, #344]	; (80011cc <main+0x18c>)
 8001072:	4857      	ldr	r0, [pc, #348]	; (80011d0 <main+0x190>)
 8001074:	f005 fd20 	bl	8006ab8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001078:	f009 fcb0 	bl	800a9dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    uint8_t data[3] = "";
 800107c:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <main+0x194>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	733b      	strb	r3, [r7, #12]
 8001082:	f107 030d 	add.w	r3, r7, #13
 8001086:	2200      	movs	r2, #0
 8001088:	801a      	strh	r2, [r3, #0]
    /* sicaklik verisini oku */
    Temperature = BMP180_GetTemp();
 800108a:	f7ff ff35 	bl	8000ef8 <BMP180_GetTemp>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <main+0x198>)
 8001094:	edc3 7a00 	vstr	s15, [r3]
//    temperature = (int)Temperature;
//    sprintf(data, "%d", temperature + 300);
//    HAL_UART_Transmit (&huart2, data, sizeof (data), 10);

    /* kombinin acik olup olmadigini kontrol et */
    if(combi_state)
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <main+0x19c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <main+0x74>
    {
    	/* kombinin acik oldugunu ilet */
    	uint8_t dataon[1] = "a";
 80010a0:	2361      	movs	r3, #97	; 0x61
 80010a2:	723b      	strb	r3, [r7, #8]
    	HAL_UART_Transmit (&huart2, dataon, sizeof (dataon), 10);
 80010a4:	f107 0108 	add.w	r1, r7, #8
 80010a8:	230a      	movs	r3, #10
 80010aa:	2201      	movs	r2, #1
 80010ac:	4848      	ldr	r0, [pc, #288]	; (80011d0 <main+0x190>)
 80010ae:	f005 fc71 	bl	8006994 <HAL_UART_Transmit>
 80010b2:	e007      	b.n	80010c4 <main+0x84>
    }
    else
    {
    	/* kombinin kapali oldugunu ilet */
    	uint8_t dataoff[1] = "b";
 80010b4:	2362      	movs	r3, #98	; 0x62
 80010b6:	713b      	strb	r3, [r7, #4]
    	HAL_UART_Transmit (&huart2, dataoff, sizeof (dataoff), 10);
 80010b8:	1d39      	adds	r1, r7, #4
 80010ba:	230a      	movs	r3, #10
 80010bc:	2201      	movs	r2, #1
 80010be:	4844      	ldr	r0, [pc, #272]	; (80011d0 <main+0x190>)
 80010c0:	f005 fc68 	bl	8006994 <HAL_UART_Transmit>
    }
    HAL_Delay(200);
 80010c4:	20c8      	movs	r0, #200	; 0xc8
 80010c6:	f000 fecd 	bl	8001e64 <HAL_Delay>

    /* mode u kontrol et */
    if(!mode_select)
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <main+0x1a0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d125      	bne.n	800111e <main+0xde>
    {   /* mode a gore ledleri binary olarak kaydet */
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((lower_limit - 20) & 0x01));
 80010d2:	4b44      	ldr	r3, [pc, #272]	; (80011e4 <main+0x1a4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4841      	ldr	r0, [pc, #260]	; (80011e8 <main+0x1a8>)
 80010e4:	f001 fd0c 	bl	8002b00 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, ((lower_limit - 20) & 0x02));
 80010e8:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <main+0x1a4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	3b14      	subs	r3, #20
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fc:	483a      	ldr	r0, [pc, #232]	; (80011e8 <main+0x1a8>)
 80010fe:	f001 fcff 	bl	8002b00 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, ((lower_limit - 20) & 0x04));
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <main+0x1a4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3b14      	subs	r3, #20
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	4834      	ldr	r0, [pc, #208]	; (80011e8 <main+0x1a8>)
 8001118:	f001 fcf2 	bl	8002b00 <HAL_GPIO_WritePin>
 800111c:	e026      	b.n	800116c <main+0x12c>
    }
    else
    {
    	/* mode a gore ledleri binary olarak kaydet */
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((upper_limit - 21) & 0x01));
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <main+0x1ac>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3b15      	subs	r3, #21
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001132:	482d      	ldr	r0, [pc, #180]	; (80011e8 <main+0x1a8>)
 8001134:	f001 fce4 	bl	8002b00 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, ((upper_limit - 21) & 0x02));
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <main+0x1ac>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3b15      	subs	r3, #21
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	4826      	ldr	r0, [pc, #152]	; (80011e8 <main+0x1a8>)
 800114e:	f001 fcd7 	bl	8002b00 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, ((upper_limit - 21) & 0x04));
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <main+0x1ac>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b15      	subs	r3, #21
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4820      	ldr	r0, [pc, #128]	; (80011e8 <main+0x1a8>)
 8001168:	f001 fcca 	bl	8002b00 <HAL_GPIO_WritePin>
    }

    /* sicaklik alt limitin altindaysa kombiyi ac */
    if(Temperature < lower_limit)
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <main+0x1a4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <main+0x198>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dd08      	ble.n	800119a <main+0x15a>
    {
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <main+0x1b0>)
 8001190:	f001 fcb6 	bl	8002b00 <HAL_GPIO_WritePin>
    	combi_state = 1;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <main+0x19c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
    }
    /* sicaklik ust limitin ustundeyse kombiyi kapat */
    if(Temperature > upper_limit)
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <main+0x1ac>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <main+0x198>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d508      	bpl.n	80011c8 <main+0x188>
    {
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <main+0x1b0>)
 80011be:	f001 fc9f 	bl	8002b00 <HAL_GPIO_WritePin>
    	combi_state = 0;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <main+0x19c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  {
 80011c8:	e756      	b.n	8001078 <main+0x38>
 80011ca:	bf00      	nop
 80011cc:	2000027c 	.word	0x2000027c
 80011d0:	200001d0 	.word	0x200001d0
 80011d4:	0800b238 	.word	0x0800b238
 80011d8:	20000274 	.word	0x20000274
 80011dc:	20000284 	.word	0x20000284
 80011e0:	20000278 	.word	0x20000278
 80011e4:	20000000 	.word	0x20000000
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	20000001 	.word	0x20000001
 80011f0:	40021000 	.word	0x40021000

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f009 ff06 	bl	800b014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001264:	2308      	movs	r3, #8
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001272:	2307      	movs	r3, #7
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fcdc 	bl	8005c38 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001286:	f000 fad5 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001296:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2105      	movs	r1, #5
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 ff3d 	bl	8006128 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012b4:	f000 fabe 	bl	8001834 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	; 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f003 f837 	bl	8004378 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fa90 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000dc 	.word	0x200000dc
 800131c:	40005400 	.word	0x40005400
 8001320:	00061a80 	.word	0x00061a80

08001324 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_I2S3_Init+0x54>)
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <MX_I2S3_Init+0x58>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2S3_Init+0x54>)
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_I2S3_Init+0x54>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2S3_Init+0x54>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_I2S3_Init+0x54>)
 8001344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001348:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_I2S3_Init+0x54>)
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <MX_I2S3_Init+0x5c>)
 800134e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2S3_Init+0x54>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_I2S3_Init+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2S3_Init+0x54>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_I2S3_Init+0x54>)
 8001364:	f003 ffc8 	bl	80052f8 <HAL_I2S_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800136e:	f000 fa61 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000130 	.word	0x20000130
 800137c:	40003c00 	.word	0x40003c00
 8001380:	00017700 	.word	0x00017700

08001384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_SPI1_Init+0x64>)
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <MX_SPI1_Init+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d6:	f005 fa07 	bl	80067e8 <HAL_SPI_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e0:	f000 fa28 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000178 	.word	0x20000178
 80013ec:	40013000 	.word	0x40013000

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f005 fa67 	bl	80068fa <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f9ff 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001d0 	.word	0x200001d0
 8001440:	40004400 	.word	0x40004400

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_DMA_Init+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <MX_DMA_Init+0x3c>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2101      	movs	r1, #1
 800146a:	2010      	movs	r0, #16
 800146c:	f000 fdf9 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001470:	2010      	movs	r0, #16
 8001472:	f000 fe12 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a76      	ldr	r2, [pc, #472]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a6f      	ldr	r2, [pc, #444]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b6d      	ldr	r3, [pc, #436]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b69      	ldr	r3, [pc, #420]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a68      	ldr	r2, [pc, #416]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b66      	ldr	r3, [pc, #408]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a61      	ldr	r2, [pc, #388]	; (800167c <MX_GPIO_Init+0x1f8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <MX_GPIO_Init+0x1f8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <MX_GPIO_Init+0x1f8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a5a      	ldr	r2, [pc, #360]	; (800167c <MX_GPIO_Init+0x1f8>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <MX_GPIO_Init+0x1f8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <MX_GPIO_Init+0x1f8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a53      	ldr	r2, [pc, #332]	; (800167c <MX_GPIO_Init+0x1f8>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b51      	ldr	r3, [pc, #324]	; (800167c <MX_GPIO_Init+0x1f8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f248 0108 	movw	r1, #32776	; 0x8008
 8001548:	484d      	ldr	r0, [pc, #308]	; (8001680 <MX_GPIO_Init+0x1fc>)
 800154a:	f001 fad9 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	484c      	ldr	r0, [pc, #304]	; (8001684 <MX_GPIO_Init+0x200>)
 8001554:	f001 fad4 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001558:	2200      	movs	r2, #0
 800155a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <MX_GPIO_Init+0x204>)
 8001560:	f001 face 	bl	8002b00 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RELAY_Pin;
 8001564:	f248 0308 	movw	r3, #32776	; 0x8008
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4840      	ldr	r0, [pc, #256]	; (8001680 <MX_GPIO_Init+0x1fc>)
 800157e:	f001 f923 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	483a      	ldr	r0, [pc, #232]	; (8001684 <MX_GPIO_Init+0x200>)
 800159a:	f001 f915 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800159e:	2308      	movs	r3, #8
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ae:	2305      	movs	r3, #5
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4832      	ldr	r0, [pc, #200]	; (8001684 <MX_GPIO_Init+0x200>)
 80015ba:	f001 f905 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	482e      	ldr	r0, [pc, #184]	; (800168c <MX_GPIO_Init+0x208>)
 80015d4:	f001 f8f8 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015d8:	2304      	movs	r3, #4
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <MX_GPIO_Init+0x20c>)
 80015ec:	f001 f8ec 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001602:	2305      	movs	r3, #5
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <MX_GPIO_Init+0x20c>)
 800160e:	f001 f8db 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001612:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001616:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4817      	ldr	r0, [pc, #92]	; (8001688 <MX_GPIO_Init+0x204>)
 800162c:	f001 f8cc 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001630:	2320      	movs	r3, #32
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_GPIO_Init+0x204>)
 8001644:	f001 f8c0 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800164c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_GPIO_Init+0x1fc>)
 800165e:	f001 f8b3 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2101      	movs	r1, #1
 8001666:	2006      	movs	r0, #6
 8001668:	f000 fcfb 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800166c:	2006      	movs	r0, #6
 800166e:	f000 fd14 	bl	800209a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	/* interrupt gelen pini kontrol et */
	if(GPIO_Pin == GPIO_PIN_0)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d170      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0xf2>
	{
		/* pine art arda basilip basilmadigini kontrol et */
		if((HAL_GetTick() - tick_counter) > 3000)
 80016a4:	f000 fbd2 	bl	8001e4c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_GPIO_EXTI_Callback+0xfc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d924      	bls.n	8001702 <HAL_GPIO_EXTI_Callback+0x6e>
		{
			/* mode u 0 <-> 1 olarak degistir */
			mode_select++;
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 80016c2:	701a      	strb	r2, [r3, #0]
			if(mode_select > 1)
 80016c4:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d902      	bls.n	80016d2 <HAL_GPIO_EXTI_Callback+0x3e>
			{
				mode_select = 0;
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
			}
			if(mode_select)
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_GPIO_EXTI_Callback+0x5a>
			{
				/* turuncu ledi yak */
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e0:	482d      	ldr	r0, [pc, #180]	; (8001798 <HAL_GPIO_EXTI_Callback+0x104>)
 80016e2:	f001 fa0d 	bl	8002b00 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f000 fbbc 	bl	8001e64 <HAL_Delay>
 80016ec:	e046      	b.n	800177c <HAL_GPIO_EXTI_Callback+0xe8>
			}
			else
			{
				/* turuncu ledi sondur */
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f4:	4828      	ldr	r0, [pc, #160]	; (8001798 <HAL_GPIO_EXTI_Callback+0x104>)
 80016f6:	f001 fa03 	bl	8002b00 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f000 fbb2 	bl	8001e64 <HAL_Delay>
 8001700:	e03c      	b.n	800177c <HAL_GPIO_EXTI_Callback+0xe8>
			}
		}
		else
		{
			/* mode == 0 ise*/
			if(!mode_select)
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_GPIO_EXTI_Callback+0x100>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11c      	bne.n	8001744 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				lower_limit++;
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001714:	701a      	strb	r2, [r3, #0]
				if(lower_limit > 27)
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b1b      	cmp	r3, #27
 800171c:	d902      	bls.n	8001724 <HAL_GPIO_EXTI_Callback+0x90>
				{
					lower_limit = 20;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001720:	2214      	movs	r2, #20
 8001722:	701a      	strb	r2, [r3, #0]
				}

				/* ust limitin alt limitten buyuk olmasini sagla */
				if(upper_limit <= lower_limit)
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d805      	bhi.n	800173c <HAL_GPIO_EXTI_Callback+0xa8>
				{
					upper_limit = lower_limit + 1;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 800173a:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(50);
 800173c:	2032      	movs	r0, #50	; 0x32
 800173e:	f000 fb91 	bl	8001e64 <HAL_Delay>
 8001742:	e01b      	b.n	800177c <HAL_GPIO_EXTI_Callback+0xe8>
			}
			/* mode == 1 ise*/
			else
			{
				upper_limit++;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 800174e:	701a      	strb	r2, [r3, #0]
				if(upper_limit > 28)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b1c      	cmp	r3, #28
 8001756:	d902      	bls.n	800175e <HAL_GPIO_EXTI_Callback+0xca>
				{
					upper_limit = 21;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 800175a:	2215      	movs	r2, #21
 800175c:	701a      	strb	r2, [r3, #0]
				}

				/* alt limitin ust limikten kucuk olmasini sagla */
				if(upper_limit <= lower_limit)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d805      	bhi.n	8001776 <HAL_GPIO_EXTI_Callback+0xe2>
				{
					 lower_limit = upper_limit - 1;
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3b01      	subs	r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_GPIO_EXTI_Callback+0x108>)
 8001774:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(50);
 8001776:	2032      	movs	r0, #50	; 0x32
 8001778:	f000 fb74 	bl	8001e64 <HAL_Delay>
			}
		}
		/* tekrardan olcum yapabilmek icin tick i kaydet */
		tick_counter = HAL_GetTick();
 800177c:	f000 fb66 	bl	8001e4c <HAL_GetTick>
 8001780:	4603      	mov	r3, r0
 8001782:	4a03      	ldr	r2, [pc, #12]	; (8001790 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001784:	6013      	str	r3, [r2, #0]
	}
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000288 	.word	0x20000288
 8001794:	20000278 	.word	0x20000278
 8001798:	40020c00 	.word	0x40020c00
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000001 	.word	0x20000001

080017a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	/* interrupti tekrardan aktiflestir */
	HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80017ac:	2203      	movs	r2, #3
 80017ae:	491d      	ldr	r1, [pc, #116]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017b0:	481d      	ldr	r0, [pc, #116]	; (8001828 <HAL_UART_RxCpltCallback+0x84>)
 80017b2:	f005 f981 	bl	8006ab8 <HAL_UART_Receive_IT>
	/* hangi limit oldugunu kontrol et */
	if((Rx_data[0] - '0') == 1)
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b31      	cmp	r3, #49	; 0x31
 80017bc:	d114      	bne.n	80017e8 <HAL_UART_RxCpltCallback+0x44>
	{
		/* char dan int e donustur */
		lower_limit = (Rx_data[1] - '0') * 10;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	461a      	mov	r2, r3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3320      	adds	r3, #32
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_UART_RxCpltCallback+0x88>)
 80017d2:	701a      	strb	r2, [r3, #0]
		lower_limit += (Rx_data[2] - '0');
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017d6:	789a      	ldrb	r2, [r3, #2]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_RxCpltCallback+0x88>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3b30      	subs	r3, #48	; 0x30
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_RxCpltCallback+0x88>)
 80017e6:	701a      	strb	r2, [r3, #0]
	}
	if((Rx_data[0] - '0') == 2)
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b32      	cmp	r3, #50	; 0x32
 80017ee:	d114      	bne.n	800181a <HAL_UART_RxCpltCallback+0x76>
	{
		/* char dan int e donustur */
		upper_limit = (Rx_data[1] - '0') * 10;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	461a      	mov	r2, r3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3320      	adds	r3, #32
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_UART_RxCpltCallback+0x8c>)
 8001804:	701a      	strb	r2, [r3, #0]
		upper_limit += (Rx_data[2] - '0');
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_UART_RxCpltCallback+0x80>)
 8001808:	789a      	ldrb	r2, [r3, #2]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_UART_RxCpltCallback+0x8c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	3b30      	subs	r3, #48	; 0x30
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_UART_RxCpltCallback+0x8c>)
 8001818:	701a      	strb	r2, [r3, #0]
	}

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000027c 	.word	0x2000027c
 8001828:	200001d0 	.word	0x200001d0
 800182c:	20000000 	.word	0x20000000
 8001830:	20000001 	.word	0x20000001

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	e7fe      	b.n	800183c <Error_Handler+0x8>
	...

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_MspInit+0x94>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <HAL_MspInit+0x94>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_MspInit+0x94>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_MspInit+0x94>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_MspInit+0x94>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_MspInit+0x94>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800187e:	2006      	movs	r0, #6
 8001880:	f000 fbe4 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2101      	movs	r1, #1
 8001888:	f06f 000b 	mvn.w	r0, #11
 800188c:	f000 fbe9 	bl	8002062 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2101      	movs	r1, #1
 8001894:	f06f 000a 	mvn.w	r0, #10
 8001898:	f000 fbe3 	bl	8002062 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2101      	movs	r1, #1
 80018a0:	f06f 0009 	mvn.w	r0, #9
 80018a4:	f000 fbdd 	bl	8002062 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2101      	movs	r1, #1
 80018ac:	f06f 0004 	mvn.w	r0, #4
 80018b0:	f000 fbd7 	bl	8002062 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2101      	movs	r1, #1
 80018b8:	f06f 0003 	mvn.w	r0, #3
 80018bc:	f000 fbd1 	bl	8002062 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	f06f 0001 	mvn.w	r0, #1
 80018c8:	f000 fbcb 	bl	8002062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_I2C_MspInit+0x84>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12b      	bne.n	8001952 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_I2C_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001916:	23c0      	movs	r3, #192	; 0xc0
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191a:	2312      	movs	r3, #18
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001926:	2304      	movs	r3, #4
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <HAL_I2C_MspInit+0x8c>)
 8001932:	f000 ff49 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_I2C_MspInit+0x88>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40005400 	.word	0x40005400
 8001960:	40023800 	.word	0x40023800
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_I2S_MspInit+0xf0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d15a      	bne.n	8001a4e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fddd 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80019b4:	f7ff ff3e 	bl	8001834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <HAL_I2S_MspInit+0xf8>)
 8001a28:	f000 fece 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a2c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <HAL_I2S_MspInit+0xfc>)
 8001a4a:	f000 febd 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3738      	adds	r7, #56	; 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40003c00 	.word	0x40003c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020800 	.word	0x40020800

08001a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_SPI_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12b      	bne.n	8001ae2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ac2:	23e0      	movs	r3, #224	; 0xe0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_SPI_MspInit+0x8c>)
 8001ade:	f000 fe73 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40013000 	.word	0x40013000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <HAL_UART_MspInit+0xf0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d162      	bne.n	8001be0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_UART_MspInit+0xf4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b52:	230c      	movs	r3, #12
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b62:	2307      	movs	r3, #7
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4820      	ldr	r0, [pc, #128]	; (8001bf0 <HAL_UART_MspInit+0xf8>)
 8001b6e:	f000 fe2b 	bl	80027c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_UART_MspInit+0x100>)
 8001b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bb4:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001bb6:	f000 fa8b 	bl	80020d0 <HAL_DMA_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001bc0:	f7ff fe38 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_UART_MspInit+0xfc>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2026      	movs	r0, #38	; 0x26
 8001bd6:	f000 fa44 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bda:	2026      	movs	r0, #38	; 0x26
 8001bdc:	f000 fa5d 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40004400 	.word	0x40004400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	20000214 	.word	0x20000214
 8001bf8:	40026088 	.word	0x40026088

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f8ec 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f000 ff6d 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA1_Stream5_IRQHandler+0x10>)
 8001c66:	f000 fb73 	bl	8002350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000214 	.word	0x20000214

08001c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <USART2_IRQHandler+0x10>)
 8001c7a:	f004 ff4d 	bl	8006b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001d0 	.word	0x200001d0

08001c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <OTG_FS_IRQHandler+0x10>)
 8001c8e:	f001 f9d3 	bl	8003038 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000670 	.word	0x20000670

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f009 f968 	bl	800afa0 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20020000 	.word	0x20020000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	2000028c 	.word	0x2000028c
 8001d04:	20000988 	.word	0x20000988

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd7 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f009 f927 	bl	800afac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff f96f 	bl	8001040 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001d70:	0800b270 	.word	0x0800b270
  ldr r2, =_sbss
 8001d74:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001d78:	20000984 	.word	0x20000984

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f94f 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fd44 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f967 	bl	80020b6 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f92f 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000290 	.word	0x20000290

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000290 	.word	0x20000290

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff feb6 	bl	8001e4c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e099      	b.n	8002220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210c:	e00f      	b.n	800212e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800210e:	f7ff fe9d 	bl	8001e4c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b05      	cmp	r3, #5
 800211a:	d908      	bls.n	800212e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e078      	b.n	8002220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e8      	bne.n	800210e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4b38      	ldr	r3, [pc, #224]	; (8002228 <HAL_DMA_Init+0x158>)
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4313      	orrs	r3, r2
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0307 	bic.w	r3, r3, #7
 80021ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d117      	bne.n	80021f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa7b 	bl	80026d0 <DMA_CheckFifoParam>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ee:	2301      	movs	r3, #1
 80021f0:	e016      	b.n	8002220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa32 	bl	8002664 <DMA_CalcBaseAndBitshift>
 8002200:	4603      	mov	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	223f      	movs	r2, #63	; 0x3f
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	f010803f 	.word	0xf010803f

0800222c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223a:	f7ff fe07 	bl	8001e4c <HAL_GetTick>
 800223e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d008      	beq.n	800225e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e052      	b.n	8002304 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_Abort+0x62>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ae:	e013      	b.n	80022d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b0:	f7ff fdcc 	bl	8001e4c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d90c      	bls.n	80022d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e015      	b.n	8002304 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e4      	bne.n	80022b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d004      	beq.n	800232a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00c      	b.n	8002344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800235c:	4b8e      	ldr	r3, [pc, #568]	; (8002598 <HAL_DMA_IRQHandler+0x248>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a8e      	ldr	r2, [pc, #568]	; (800259c <HAL_DMA_IRQHandler+0x24c>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2208      	movs	r2, #8
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01a      	beq.n	80023bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2208      	movs	r2, #8
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2201      	movs	r2, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2201      	movs	r2, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0202 	orr.w	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2204      	movs	r2, #4
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2204      	movs	r2, #4
 8002416:	409a      	lsls	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	2210      	movs	r2, #16
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d043      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03c      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2210      	movs	r2, #16
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d018      	beq.n	8002492 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d024      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
 800247e:	e01f      	b.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e016      	b.n	80024c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0208 	bic.w	r2, r2, #8
 80024ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2220      	movs	r2, #32
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 808f 	beq.w	80025f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8087 	beq.w	80025f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2220      	movs	r2, #32
 80024e8:	409a      	lsls	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d136      	bne.n	8002568 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0216 	bic.w	r2, r2, #22
 8002508:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002518:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_DMA_IRQHandler+0x1da>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0208 	bic.w	r2, r2, #8
 8002538:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	223f      	movs	r2, #63	; 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d07e      	beq.n	800265c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
        }
        return;
 8002566:	e079      	b.n	800265c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	2b00      	cmp	r3, #0
 800258a:	d031      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e02c      	b.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
 8002596:	bf00      	nop
 8002598:	20000004 	.word	0x20000004
 800259c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e01e      	b.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10f      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0210 	bic.w	r2, r2, #16
 80025ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d032      	beq.n	800265e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d022      	beq.n	800264a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2205      	movs	r2, #5
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3301      	adds	r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d307      	bcc.n	8002638 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f2      	bne.n	800261c <HAL_DMA_IRQHandler+0x2cc>
 8002636:	e000      	b.n	800263a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002638:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e000      	b.n	800265e <HAL_DMA_IRQHandler+0x30e>
        return;
 800265c:	bf00      	nop
    }
  }
}
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3b10      	subs	r3, #16
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <DMA_CalcBaseAndBitshift+0x68>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d909      	bls.n	80026a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	1d1a      	adds	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58
 80026a4:	e007      	b.n	80026b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	aaaaaaab 	.word	0xaaaaaaab
 80026cc:	0800b258 	.word	0x0800b258

080026d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11f      	bne.n	800272a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d856      	bhi.n	800279e <DMA_CheckFifoParam+0xce>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <DMA_CheckFifoParam+0x28>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002709 	.word	0x08002709
 80026fc:	0800271b 	.word	0x0800271b
 8002700:	08002709 	.word	0x08002709
 8002704:	0800279f 	.word	0x0800279f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d046      	beq.n	80027a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e043      	b.n	80027a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002722:	d140      	bne.n	80027a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002728:	e03d      	b.n	80027a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002732:	d121      	bne.n	8002778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d837      	bhi.n	80027aa <DMA_CheckFifoParam+0xda>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <DMA_CheckFifoParam+0x70>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002757 	.word	0x08002757
 8002748:	08002751 	.word	0x08002751
 800274c:	08002769 	.word	0x08002769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e030      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d025      	beq.n	80027ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002766:	e022      	b.n	80027ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002770:	d11f      	bne.n	80027b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002776:	e01c      	b.n	80027b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d903      	bls.n	8002786 <DMA_CheckFifoParam+0xb6>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d003      	beq.n	800278c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002784:	e018      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      break;
 800278a:	e015      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e00b      	b.n	80027b6 <DMA_CheckFifoParam+0xe6>
      break;
 800279e:	bf00      	nop
 80027a0:	e00a      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e008      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e006      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e004      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027b6:	bf00      	nop
    }
  } 
  
  return status; 
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e16b      	b.n	8002abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 815a 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80b4 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5f      	ldr	r2, [pc, #380]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_GPIO_Init+0x314>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d025      	beq.n	80029ea <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_GPIO_Init+0x324>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x216>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_GPIO_Init+0x328>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_GPIO_Init+0x32c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <HAL_GPIO_Init+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00e      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d2:	2308      	movs	r3, #8
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d6:	2306      	movs	r3, #6
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f ae90 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800
 8002af8:	40021c00 	.word	0x40021c00
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fd9e 	bl	8001694 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b08f      	sub	sp, #60	; 0x3c
 8002b68:	af0a      	add	r7, sp, #40	; 0x28
 8002b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e054      	b.n	8002c20 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f007 ff5b 	bl	800aa4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 ff89 	bl	8007acc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	687e      	ldr	r6, [r7, #4]
 8002bc2:	466d      	mov	r5, sp
 8002bc4:	f106 0410 	add.w	r4, r6, #16
 8002bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd8:	1d33      	adds	r3, r6, #4
 8002bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f004 ff03 	bl	80079e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 ff80 	bl	8007aee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	687e      	ldr	r6, [r7, #4]
 8002bf6:	466d      	mov	r5, sp
 8002bf8:	f106 0410 	add.w	r4, r6, #16
 8002bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c0c:	1d33      	adds	r3, r6, #4
 8002c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c10:	6838      	ldr	r0, [r7, #0]
 8002c12:	f005 f909 	bl	8007e28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c28 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70bb      	strb	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_HCD_HC_Init+0x28>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e076      	b.n	8002d3e <HAL_HCD_HC_Init+0x116>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	333d      	adds	r3, #61	; 0x3d
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3338      	adds	r3, #56	; 0x38
 8002c78:	787a      	ldrb	r2, [r7, #1]
 8002c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3340      	adds	r3, #64	; 0x40
 8002c8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c8c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3339      	adds	r3, #57	; 0x39
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	333f      	adds	r3, #63	; 0x3f
 8002cae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	78ba      	ldrb	r2, [r7, #2]
 8002cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cbc:	b2d0      	uxtb	r0, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	333a      	adds	r3, #58	; 0x3a
 8002cca:	4602      	mov	r2, r0
 8002ccc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da09      	bge.n	8002cea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	333b      	adds	r3, #59	; 0x3b
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e008      	b.n	8002cfc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	333b      	adds	r3, #59	; 0x3b
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	333c      	adds	r3, #60	; 0x3c
 8002d0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d0e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	787c      	ldrb	r4, [r7, #1]
 8002d16:	78ba      	ldrb	r2, [r7, #2]
 8002d18:	78f9      	ldrb	r1, [r7, #3]
 8002d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f005 fa02 	bl	8008134 <USB_HC_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_HCD_HC_Halt+0x1e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e00f      	b.n	8002d84 <HAL_HCD_HC_Halt+0x3e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 fc52 	bl	800861e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	70fb      	strb	r3, [r7, #3]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70bb      	strb	r3, [r7, #2]
 8002da2:	4613      	mov	r3, r2
 8002da4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	333b      	adds	r3, #59	; 0x3b
 8002db4:	78ba      	ldrb	r2, [r7, #2]
 8002db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	333f      	adds	r3, #63	; 0x3f
 8002dc6:	787a      	ldrb	r2, [r7, #1]
 8002dc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002dca:	7c3b      	ldrb	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d112      	bne.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3342      	adds	r3, #66	; 0x42
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	333d      	adds	r3, #61	; 0x3d
 8002df0:	7f3a      	ldrb	r2, [r7, #28]
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e008      	b.n	8002e08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3342      	adds	r3, #66	; 0x42
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	f200 80c6 	bhi.w	8002f9c <HAL_HCD_HC_SubmitRequest+0x210>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002f89 	.word	0x08002f89
 8002e20:	08002e8d 	.word	0x08002e8d
 8002e24:	08002f0b 	.word	0x08002f0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002e28:	7c3b      	ldrb	r3, [r7, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80b8 	bne.w	8002fa0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002e30:	78bb      	ldrb	r3, [r7, #2]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 80b4 	bne.w	8002fa0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002e38:	8b3b      	ldrh	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3355      	adds	r3, #85	; 0x55
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3355      	adds	r3, #85	; 0x55
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3342      	adds	r3, #66	; 0x42
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e76:	e093      	b.n	8002fa0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3342      	adds	r3, #66	; 0x42
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
      break;
 8002e8a:	e089      	b.n	8002fa0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e8c:	78bb      	ldrb	r3, [r7, #2]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11d      	bne.n	8002ece <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3355      	adds	r3, #85	; 0x55
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3342      	adds	r3, #66	; 0x42
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002eb8:	e073      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3342      	adds	r3, #66	; 0x42
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      break;
 8002ecc:	e069      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3354      	adds	r3, #84	; 0x54
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3342      	adds	r3, #66	; 0x42
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
      break;
 8002ef4:	e055      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3342      	adds	r3, #66	; 0x42
 8002f04:	2202      	movs	r2, #2
 8002f06:	701a      	strb	r2, [r3, #0]
      break;
 8002f08:	e04b      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f0a:	78bb      	ldrb	r3, [r7, #2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11d      	bne.n	8002f4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3355      	adds	r3, #85	; 0x55
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3342      	adds	r3, #66	; 0x42
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f36:	e034      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3342      	adds	r3, #66	; 0x42
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
      break;
 8002f4a:	e02a      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3354      	adds	r3, #84	; 0x54
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3342      	adds	r3, #66	; 0x42
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
      break;
 8002f72:	e016      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3342      	adds	r3, #66	; 0x42
 8002f82:	2202      	movs	r2, #2
 8002f84:	701a      	strb	r2, [r3, #0]
      break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3342      	adds	r3, #66	; 0x42
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002f9c:	bf00      	nop
 8002f9e:	e000      	b.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002fa0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3344      	adds	r3, #68	; 0x44
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	8b3a      	ldrh	r2, [r7, #24]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	202c      	movs	r0, #44	; 0x2c
 8002fbc:	fb00 f303 	mul.w	r3, r0, r3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	; 0x4c
 8002fc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3350      	adds	r3, #80	; 0x50
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3339      	adds	r3, #57	; 0x39
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3361      	adds	r3, #97	; 0x61
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	222c      	movs	r2, #44	; 0x2c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	18d1      	adds	r1, r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	f005 f9a6 	bl	8008378 <USB_HC_StartXfer>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop

08003038 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fea7 	bl	8007da2 <USB_GetMode>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	f040 80f6 	bne.w	8003248 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fe8b 	bl	8007d7c <USB_ReadInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80ec 	beq.w	8003246 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fe82 	bl	8007d7c <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003082:	d104      	bne.n	800308e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800308c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fe72 	bl	8007d7c <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a2:	d104      	bne.n	80030ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fe62 	bl	8007d7c <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c2:	d104      	bne.n	80030ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fe52 	bl	8007d7c <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d103      	bne.n	80030ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fe44 	bl	8007d7c <USB_ReadInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fe:	d11c      	bne.n	800313a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003108:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800311a:	2110      	movs	r1, #16
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f004 fd33 	bl	8007b88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003122:	6938      	ldr	r0, [r7, #16]
 8003124:	f004 fd64 	bl	8007bf0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f004 ff3a 	bl	8007fa8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f007 fd07 	bl	800ab48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fe1c 	bl	8007d7c <USB_ReadInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314e:	d102      	bne.n	8003156 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f001 f89e 	bl	8004292 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fe0e 	bl	8007d7c <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b08      	cmp	r3, #8
 8003168:	d106      	bne.n	8003178 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f007 fcd0 	bl	800ab10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fdfd 	bl	8007d7c <USB_ReadInterrupts>
 8003182:	4603      	mov	r3, r0
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	d101      	bne.n	8003190 <HAL_HCD_IRQHandler+0x158>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_HCD_IRQHandler+0x15a>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d012      	beq.n	80031bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 ffa1 	bl	80040ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0210 	orr.w	r2, r2, #16
 80031ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fddb 	bl	8007d7c <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d0:	d13a      	bne.n	8003248 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 fa10 	bl	80085fc <USB_HC_ReadInterrupt>
 80031dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e025      	b.n	8003230 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d106      	bne.n	800321e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8ab 	bl	8003372 <HCD_HC_IN_IRQHandler>
 800321c:	e005      	b.n	800322a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fbf9 	bl	8003a1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	429a      	cmp	r2, r3
 8003238:	d3d4      	bcc.n	80031e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	e000      	b.n	8003248 <HAL_HCD_IRQHandler+0x210>
      return;
 8003246:	bf00      	nop
    }
  }
}
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_HCD_Start+0x16>
 8003260:	2302      	movs	r3, #2
 8003262:	e013      	b.n	800328c <HAL_HCD_Start+0x3e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fefc 	bl	8008070 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f004 fc14 	bl	8007aaa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_HCD_Stop+0x16>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e00d      	b.n	80032c6 <HAL_HCD_Stop+0x32>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 faea 	bl	8008890 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fe9e 	bl	800801c <USB_ResetPort>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3360      	adds	r3, #96	; 0x60
 8003304:	781b      	ldrb	r3, [r3, #0]
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3350      	adds	r3, #80	; 0x50
 800332c:	681b      	ldr	r3, [r3, #0]
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fee2 	bl	8008110 <USB_GetCurrentFrame>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f004 febd 	bl	80080e2 <USB_GetHostSpeed>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d11a      	bne.n	80033d8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	461a      	mov	r2, r3
 80033b0:	2304      	movs	r3, #4
 80033b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	; 0x61
 80033c2:	2206      	movs	r2, #6
 80033c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f005 f924 	bl	800861e <USB_HC_Halt>
 80033d6:	e0af      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d11b      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003402:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3361      	adds	r3, #97	; 0x61
 8003412:	2207      	movs	r2, #7
 8003414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f005 f8fc 	bl	800861e <USB_HC_Halt>
 8003426:	e087      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d109      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	461a      	mov	r2, r3
 800344c:	2320      	movs	r3, #32
 800344e:	6093      	str	r3, [r2, #8]
 8003450:	e072      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d11a      	bne.n	800349e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	2308      	movs	r3, #8
 8003478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3361      	adds	r3, #97	; 0x61
 8003488:	2205      	movs	r2, #5
 800348a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f005 f8c1 	bl	800861e <USB_HC_Halt>
 800349c:	e04c      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d11b      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	461a      	mov	r2, r3
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3361      	adds	r3, #97	; 0x61
 80034d8:	2208      	movs	r2, #8
 80034da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 f899 	bl	800861e <USB_HC_Halt>
 80034ec:	e024      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d119      	bne.n	8003538 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3361      	adds	r3, #97	; 0x61
 8003524:	2206      	movs	r2, #6
 8003526:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f005 f873 	bl	800861e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d112      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f005 f85f 	bl	800861e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003572:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003574:	e24e      	b.n	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 80df 	bne.w	800374c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d019      	beq.n	80035ca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0159      	lsls	r1, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	202c      	movs	r0, #44	; 0x2c
 80035c0:	fb00 f303 	mul.w	r3, r0, r3
 80035c4:	440b      	add	r3, r1
 80035c6:	3350      	adds	r3, #80	; 0x50
 80035c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3361      	adds	r3, #97	; 0x61
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	335c      	adds	r3, #92	; 0x5c
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	461a      	mov	r2, r3
 80035fc:	2301      	movs	r3, #1
 80035fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	333f      	adds	r3, #63	; 0x3f
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	333f      	adds	r3, #63	; 0x3f
 8003622:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003624:	2b02      	cmp	r3, #2
 8003626:	d111      	bne.n	800364c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fff3 	bl	800861e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	2310      	movs	r3, #16
 8003648:	6093      	str	r3, [r2, #8]
 800364a:	e03a      	b.n	80036c2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	333f      	adds	r3, #63	; 0x3f
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d009      	beq.n	8003674 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	333f      	adds	r3, #63	; 0x3f
 800366e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003670:	2b01      	cmp	r3, #1
 8003672:	d126      	bne.n	80036c2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	440a      	add	r2, r1
 800368a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003692:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	b2d9      	uxtb	r1, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	202c      	movs	r0, #44	; 0x2c
 80036b0:	fb00 f303 	mul.w	r3, r0, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3360      	adds	r3, #96	; 0x60
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f007 fa51 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d12b      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3348      	adds	r3, #72	; 0x48
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	202c      	movs	r0, #44	; 0x2c
 80036e0:	fb00 f202 	mul.w	r2, r0, r2
 80036e4:	440a      	add	r2, r1
 80036e6:	3240      	adds	r2, #64	; 0x40
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 818e 	beq.w	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3354      	adds	r3, #84	; 0x54
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3354      	adds	r3, #84	; 0x54
 800371c:	4602      	mov	r2, r0
 800371e:	701a      	strb	r2, [r3, #0]
}
 8003720:	e178      	b.n	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3354      	adds	r3, #84	; 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2d8      	uxtb	r0, r3
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3354      	adds	r3, #84	; 0x54
 8003746:	4602      	mov	r2, r0
 8003748:	701a      	strb	r2, [r3, #0]
}
 800374a:	e163      	b.n	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	f040 80f6 	bne.w	8003950 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3361      	adds	r3, #97	; 0x61
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d109      	bne.n	800378c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3360      	adds	r3, #96	; 0x60
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e0c9      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3361      	adds	r3, #97	; 0x61
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d109      	bne.n	80037b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3360      	adds	r3, #96	; 0x60
 80037ae:	2205      	movs	r2, #5
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e0b5      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3361      	adds	r3, #97	; 0x61
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d009      	beq.n	80037dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3361      	adds	r3, #97	; 0x61
 80037d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d150      	bne.n	800387e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	335c      	adds	r3, #92	; 0x5c
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	202c      	movs	r0, #44	; 0x2c
 80037f4:	fb00 f303 	mul.w	r3, r0, r3
 80037f8:	440b      	add	r3, r1
 80037fa:	335c      	adds	r3, #92	; 0x5c
 80037fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	212c      	movs	r1, #44	; 0x2c
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d912      	bls.n	8003838 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	335c      	adds	r3, #92	; 0x5c
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3360      	adds	r3, #96	; 0x60
 8003832:	2204      	movs	r2, #4
 8003834:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003836:	e073      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003860:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003868:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800387c:	e050      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3361      	adds	r3, #97	; 0x61
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d122      	bne.n	80038d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	; 0x60
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e023      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	3361      	adds	r3, #97	; 0x61
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b07      	cmp	r3, #7
 80038ea:	d119      	bne.n	8003920 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	335c      	adds	r3, #92	; 0x5c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	202c      	movs	r0, #44	; 0x2c
 8003904:	fb00 f303 	mul.w	r3, r0, r3
 8003908:	440b      	add	r3, r1
 800390a:	335c      	adds	r3, #92	; 0x5c
 800390c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3360      	adds	r3, #96	; 0x60
 800391c:	2204      	movs	r2, #4
 800391e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	2302      	movs	r3, #2
 8003930:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	b2d9      	uxtb	r1, r3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	202c      	movs	r0, #44	; 0x2c
 800393c:	fb00 f303 	mul.w	r3, r0, r3
 8003940:	4413      	add	r3, r2
 8003942:	3360      	adds	r3, #96	; 0x60
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f007 f90b 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800394e:	e061      	b.n	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d156      	bne.n	8003a14 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d111      	bne.n	800399e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fe41 	bl	800861e <USB_HC_Halt>
 800399c:	e031      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	333f      	adds	r3, #63	; 0x3f
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	333f      	adds	r3, #63	; 0x3f
 80039c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d11d      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	335c      	adds	r3, #92	; 0x5c
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d110      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3361      	adds	r3, #97	; 0x61
 80039ee:	2203      	movs	r2, #3
 80039f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 fe0e 	bl	800861e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2310      	movs	r3, #16
 8003a12:	6093      	str	r3, [r2, #8]
}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d11a      	bne.n	8003a82 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3361      	adds	r3, #97	; 0x61
 8003a6c:	2206      	movs	r2, #6
 8003a6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 fdcf 	bl	800861e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003a80:	e331      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d12e      	bne.n	8003af6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	333d      	adds	r3, #61	; 0x3d
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f040 8313 	bne.w	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	333d      	adds	r3, #61	; 0x3d
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3360      	adds	r3, #96	; 0x60
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 fd95 	bl	800861e <USB_HC_Halt>
}
 8003af4:	e2f7      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0c:	d112      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 fd76 	bl	800861e <USB_HC_Halt>
}
 8003b32:	e2d8      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d140      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d111      	bne.n	8003b96 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	333d      	adds	r3, #61	; 0x3d
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	2340      	movs	r3, #64	; 0x40
 8003b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3361      	adds	r3, #97	; 0x61
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fd2a 	bl	800861e <USB_HC_Halt>
}
 8003bca:	e28c      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d12c      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3361      	adds	r3, #97	; 0x61
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	333d      	adds	r3, #61	; 0x3d
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f004 fcfb 	bl	800861e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2340      	movs	r3, #64	; 0x40
 8003c38:	6093      	str	r3, [r2, #8]
}
 8003c3a:	e254      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11a      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2308      	movs	r3, #8
 8003c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3361      	adds	r3, #97	; 0x61
 8003c72:	2205      	movs	r2, #5
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 fccc 	bl	800861e <USB_HC_Halt>
}
 8003c86:	e22e      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d140      	bne.n	8003d20 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	335c      	adds	r3, #92	; 0x5c
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3361      	adds	r3, #97	; 0x61
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	333d      	adds	r3, #61	; 0x3d
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d112      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	333c      	adds	r3, #60	; 0x3c
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d108      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	333d      	adds	r3, #61	; 0x3d
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fc89 	bl	800861e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	6093      	str	r3, [r2, #8]
}
 8003d1e:	e1e2      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d164      	bne.n	8003e00 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d111      	bne.n	8003d62 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	212c      	movs	r1, #44	; 0x2c
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	3361      	adds	r3, #97	; 0x61
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fc5f 	bl	800861e <USB_HC_Halt>
 8003d60:	e044      	b.n	8003dec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	335c      	adds	r3, #92	; 0x5c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	202c      	movs	r0, #44	; 0x2c
 8003d7a:	fb00 f303 	mul.w	r3, r0, r3
 8003d7e:	440b      	add	r3, r1
 8003d80:	335c      	adds	r3, #92	; 0x5c
 8003d82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	335c      	adds	r3, #92	; 0x5c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d920      	bls.n	8003dda <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	335c      	adds	r3, #92	; 0x5c
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3360      	adds	r3, #96	; 0x60
 8003db8:	2204      	movs	r2, #4
 8003dba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	b2d9      	uxtb	r1, r3
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	202c      	movs	r0, #44	; 0x2c
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3360      	adds	r3, #96	; 0x60
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f006 fec6 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dd8:	e008      	b.n	8003dec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3360      	adds	r3, #96	; 0x60
 8003de8:	2202      	movs	r2, #2
 8003dea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	6093      	str	r3, [r2, #8]
}
 8003dfe:	e172      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d11b      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	2208      	movs	r2, #8
 8003e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f004 fbf2 	bl	800861e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	461a      	mov	r2, r3
 8003e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4c:	6093      	str	r3, [r2, #8]
}
 8003e4e:	e14a      	b.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	f040 813f 	bne.w	80040e6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3361      	adds	r3, #97	; 0x61
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d17d      	bne.n	8003f78 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	333f      	adds	r3, #63	; 0x3f
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d00a      	beq.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	333f      	adds	r3, #63	; 0x3f
 8003eb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	f040 8100 	bne.w	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d113      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3355      	adds	r3, #85	; 0x55
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2d8      	uxtb	r0, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3355      	adds	r3, #85	; 0x55
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 80e3 	bne.w	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	334c      	adds	r3, #76	; 0x4c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80d8 	beq.w	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	334c      	adds	r3, #76	; 0x4c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	202c      	movs	r0, #44	; 0x2c
 8003f1e:	fb00 f202 	mul.w	r2, r0, r2
 8003f22:	440a      	add	r2, r1
 8003f24:	3240      	adds	r2, #64	; 0x40
 8003f26:	8812      	ldrh	r2, [r2, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	202c      	movs	r0, #44	; 0x2c
 8003f32:	fb00 f202 	mul.w	r2, r0, r2
 8003f36:	440a      	add	r2, r1
 8003f38:	3240      	adds	r2, #64	; 0x40
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80b5 	beq.w	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3355      	adds	r3, #85	; 0x55
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f083 0301 	eor.w	r3, r3, #1
 8003f62:	b2d8      	uxtb	r0, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3355      	adds	r3, #85	; 0x55
 8003f72:	4602      	mov	r2, r0
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e09f      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3361      	adds	r3, #97	; 0x61
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d109      	bne.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3360      	adds	r3, #96	; 0x60
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e08b      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3361      	adds	r3, #97	; 0x61
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d109      	bne.n	8003fc8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3360      	adds	r3, #96	; 0x60
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e077      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3361      	adds	r3, #97	; 0x61
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d109      	bne.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3360      	adds	r3, #96	; 0x60
 8003fea:	2205      	movs	r2, #5
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e063      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3361      	adds	r3, #97	; 0x61
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b06      	cmp	r3, #6
 8004002:	d009      	beq.n	8004018 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3361      	adds	r3, #97	; 0x61
 8004012:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004014:	2b08      	cmp	r3, #8
 8004016:	d14f      	bne.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	335c      	adds	r3, #92	; 0x5c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	202c      	movs	r0, #44	; 0x2c
 8004030:	fb00 f303 	mul.w	r3, r0, r3
 8004034:	440b      	add	r3, r1
 8004036:	335c      	adds	r3, #92	; 0x5c
 8004038:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	335c      	adds	r3, #92	; 0x5c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d912      	bls.n	8004074 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	335c      	adds	r3, #92	; 0x5c
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3360      	adds	r3, #96	; 0x60
 800406e:	2204      	movs	r2, #4
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e021      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3360      	adds	r3, #96	; 0x60
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800409c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	461a      	mov	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	2302      	movs	r3, #2
 80040c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	b2d9      	uxtb	r1, r3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	202c      	movs	r0, #44	; 0x2c
 80040d4:	fb00 f303 	mul.w	r3, r0, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3360      	adds	r3, #96	; 0x60
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f006 fd3f 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040e6:	bf00      	nop
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b08a      	sub	sp, #40	; 0x28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	0c5b      	lsrs	r3, r3, #17
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004122:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d004      	beq.n	8004134 <HCD_RXQLVL_IRQHandler+0x46>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b05      	cmp	r3, #5
 800412e:	f000 80a9 	beq.w	8004284 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004132:	e0aa      	b.n	800428a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a6 	beq.w	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3344      	adds	r3, #68	; 0x44
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 809b 	beq.w	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3350      	adds	r3, #80	; 0x50
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	441a      	add	r2, r3
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	202c      	movs	r0, #44	; 0x2c
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	440b      	add	r3, r1
 8004172:	334c      	adds	r3, #76	; 0x4c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d87a      	bhi.n	8004270 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3344      	adds	r3, #68	; 0x44
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	b292      	uxth	r2, r2
 8004192:	4619      	mov	r1, r3
 8004194:	f003 fd9a 	bl	8007ccc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3344      	adds	r3, #68	; 0x44
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	441a      	add	r2, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	202c      	movs	r0, #44	; 0x2c
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	440b      	add	r3, r1
 80041b8:	3344      	adds	r3, #68	; 0x44
 80041ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3350      	adds	r3, #80	; 0x50
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	441a      	add	r2, r3
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	202c      	movs	r0, #44	; 0x2c
 80041d6:	fb00 f303 	mul.w	r3, r0, r3
 80041da:	440b      	add	r3, r1
 80041dc:	3350      	adds	r3, #80	; 0x50
 80041de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	0cdb      	lsrs	r3, r3, #19
 80041f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3340      	adds	r3, #64	; 0x40
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4293      	cmp	r3, r2
 800420c:	d13c      	bne.n	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d039      	beq.n	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800422a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004232:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3354      	adds	r3, #84	; 0x54
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2d8      	uxtb	r0, r3
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3354      	adds	r3, #84	; 0x54
 800426a:	4602      	mov	r2, r0
 800426c:	701a      	strb	r2, [r3, #0]
      break;
 800426e:	e00b      	b.n	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3360      	adds	r3, #96	; 0x60
 800427e:	2204      	movs	r2, #4
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e001      	b.n	8004288 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004288:	bf00      	nop
  }
}
 800428a:	bf00      	nop
 800428c:	3728      	adds	r7, #40	; 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d10b      	bne.n	80042e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f006 fc29 	bl	800ab2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d132      	bne.n	8004352 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f043 0308 	orr.w	r3, r3, #8
 80042f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d126      	bne.n	800434c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d113      	bne.n	800432e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800430c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004310:	d106      	bne.n	8004320 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2102      	movs	r1, #2
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fe45 	bl	8007fa8 <USB_InitFSLSPClkSel>
 800431e:	e011      	b.n	8004344 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f003 fe3e 	bl	8007fa8 <USB_InitFSLSPClkSel>
 800432c:	e00a      	b.n	8004344 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d106      	bne.n	8004344 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433c:	461a      	mov	r2, r3
 800433e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004342:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f006 fc1b 	bl	800ab80 <HAL_HCD_PortEnabled_Callback>
 800434a:	e002      	b.n	8004352 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f006 fc25 	bl	800ab9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d103      	bne.n	8004364 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f043 0320 	orr.w	r3, r3, #32
 8004362:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800436a:	461a      	mov	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6013      	str	r3, [r2, #0]
}
 8004370:	bf00      	nop
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e12b      	b.n	80045e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd fa9a 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043dc:	f002 f89c 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 80043e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4a81      	ldr	r2, [pc, #516]	; (80045ec <HAL_I2C_Init+0x274>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d807      	bhi.n	80043fc <HAL_I2C_Init+0x84>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a80      	ldr	r2, [pc, #512]	; (80045f0 <HAL_I2C_Init+0x278>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf94      	ite	ls
 80043f4:	2301      	movls	r3, #1
 80043f6:	2300      	movhi	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e006      	b.n	800440a <HAL_I2C_Init+0x92>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a7d      	ldr	r2, [pc, #500]	; (80045f4 <HAL_I2C_Init+0x27c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	bf94      	ite	ls
 8004404:	2301      	movls	r3, #1
 8004406:	2300      	movhi	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0e7      	b.n	80045e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a78      	ldr	r2, [pc, #480]	; (80045f8 <HAL_I2C_Init+0x280>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0c9b      	lsrs	r3, r3, #18
 800441c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a6a      	ldr	r2, [pc, #424]	; (80045ec <HAL_I2C_Init+0x274>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d802      	bhi.n	800444c <HAL_I2C_Init+0xd4>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3301      	adds	r3, #1
 800444a:	e009      	b.n	8004460 <HAL_I2C_Init+0xe8>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	4a69      	ldr	r2, [pc, #420]	; (80045fc <HAL_I2C_Init+0x284>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	3301      	adds	r3, #1
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	430b      	orrs	r3, r1
 8004466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	495c      	ldr	r1, [pc, #368]	; (80045ec <HAL_I2C_Init+0x274>)
 800447c:	428b      	cmp	r3, r1
 800447e:	d819      	bhi.n	80044b4 <HAL_I2C_Init+0x13c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1e59      	subs	r1, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fbb1 f3f3 	udiv	r3, r1, r3
 800448e:	1c59      	adds	r1, r3, #1
 8004490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004494:	400b      	ands	r3, r1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_I2C_Init+0x138>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1e59      	subs	r1, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ae:	e051      	b.n	8004554 <HAL_I2C_Init+0x1dc>
 80044b0:	2304      	movs	r3, #4
 80044b2:	e04f      	b.n	8004554 <HAL_I2C_Init+0x1dc>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d111      	bne.n	80044e0 <HAL_I2C_Init+0x168>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1e58      	subs	r0, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6859      	ldr	r1, [r3, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	440b      	add	r3, r1
 80044ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e012      	b.n	8004506 <HAL_I2C_Init+0x18e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	0099      	lsls	r1, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Init+0x196>
 800450a:	2301      	movs	r3, #1
 800450c:	e022      	b.n	8004554 <HAL_I2C_Init+0x1dc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10e      	bne.n	8004534 <HAL_I2C_Init+0x1bc>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1e58      	subs	r0, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	440b      	add	r3, r1
 8004524:	fbb0 f3f3 	udiv	r3, r0, r3
 8004528:	3301      	adds	r3, #1
 800452a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004532:	e00f      	b.n	8004554 <HAL_I2C_Init+0x1dc>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1e58      	subs	r0, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	0099      	lsls	r1, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	fbb0 f3f3 	udiv	r3, r0, r3
 800454a:	3301      	adds	r3, #1
 800454c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	6809      	ldr	r1, [r1, #0]
 8004558:	4313      	orrs	r3, r2
 800455a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6911      	ldr	r1, [r2, #16]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68d2      	ldr	r2, [r2, #12]
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	000186a0 	.word	0x000186a0
 80045f0:	001e847f 	.word	0x001e847f
 80045f4:	003d08ff 	.word	0x003d08ff
 80045f8:	431bde83 	.word	0x431bde83
 80045fc:	10624dd3 	.word	0x10624dd3

08004600 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800461a:	f7fd fc17 	bl	8001e4c <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 80d9 	bne.w	80047e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2319      	movs	r3, #25
 8004634:	2201      	movs	r2, #1
 8004636:	496d      	ldr	r1, [pc, #436]	; (80047ec <HAL_I2C_Mem_Write+0x1ec>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fc7f 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	e0cc      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Mem_Write+0x56>
 8004652:	2302      	movs	r3, #2
 8004654:	e0c5      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2221      	movs	r2, #33	; 0x21
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a4d      	ldr	r2, [pc, #308]	; (80047f0 <HAL_I2C_Mem_Write+0x1f0>)
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046be:	88f8      	ldrh	r0, [r7, #6]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fab6 	bl	8004c40 <I2C_RequestMemoryWrite>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d052      	beq.n	8004780 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e081      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fd00 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d107      	bne.n	8004706 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e06b      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b04      	cmp	r3, #4
 8004746:	d11b      	bne.n	8004780 <HAL_I2C_Mem_Write+0x180>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d017      	beq.n	8004780 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1aa      	bne.n	80046de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fcec 	bl	800516a <I2C_WaitOnBTFFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b04      	cmp	r3, #4
 800479e:	d107      	bne.n	80047b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e016      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	e000      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	00100002 	.word	0x00100002
 80047f0:	ffff0000 	.word	0xffff0000

080047f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08c      	sub	sp, #48	; 0x30
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480e:	f7fd fb1d 	bl	8001e4c <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	f040 8208 	bne.w	8004c32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2319      	movs	r3, #25
 8004828:	2201      	movs	r2, #1
 800482a:	497b      	ldr	r1, [pc, #492]	; (8004a18 <HAL_I2C_Mem_Read+0x224>)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fb85 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
 800483a:	e1fb      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_I2C_Mem_Read+0x56>
 8004846:	2302      	movs	r3, #2
 8004848:	e1f4      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d007      	beq.n	8004870 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2222      	movs	r2, #34	; 0x22
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a5b      	ldr	r2, [pc, #364]	; (8004a1c <HAL_I2C_Mem_Read+0x228>)
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048b2:	88f8      	ldrh	r0, [r7, #6]
 80048b4:	893a      	ldrh	r2, [r7, #8]
 80048b6:	8979      	ldrh	r1, [r7, #10]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4603      	mov	r3, r0
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fa52 	bl	8004d6c <I2C_RequestMemoryRead>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1b0      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d113      	bne.n	8004902 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e184      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	2b01      	cmp	r3, #1
 8004908:	d11b      	bne.n	8004942 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e164      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	2b02      	cmp	r3, #2
 8004948:	d11b      	bne.n	8004982 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	e144      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004998:	e138      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b03      	cmp	r3, #3
 80049a0:	f200 80f1 	bhi.w	8004b86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d123      	bne.n	80049f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fc1b 	bl	80051ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e139      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049f2:	e10b      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d14e      	bne.n	8004a9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2200      	movs	r2, #0
 8004a04:	4906      	ldr	r1, [pc, #24]	; (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa98 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e10e      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
 8004a16:	bf00      	nop
 8004a18:	00100002 	.word	0x00100002
 8004a1c:	ffff0000 	.word	0xffff0000
 8004a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a98:	e0b8      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4966      	ldr	r1, [pc, #408]	; (8004c3c <HAL_I2C_Mem_Read+0x448>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fa49 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0bf      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2200      	movs	r2, #0
 8004afe:	494f      	ldr	r1, [pc, #316]	; (8004c3c <HAL_I2C_Mem_Read+0x448>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa1b 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e091      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b84:	e042      	b.n	8004c0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fb2e 	bl	80051ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e04c      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d118      	bne.n	8004c0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f aec2 	bne.w	800499a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	00010004 	.word	0x00010004

08004c40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	460b      	mov	r3, r1
 8004c54:	813b      	strh	r3, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f960 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00d      	beq.n	8004c9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c90:	d103      	bne.n	8004c9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e05f      	b.n	8004d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c9e:	897b      	ldrh	r3, [r7, #10]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	6a3a      	ldr	r2, [r7, #32]
 8004cb2:	492d      	ldr	r1, [pc, #180]	; (8004d68 <I2C_RequestMemoryWrite+0x128>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f998 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e04c      	b.n	8004d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	6a39      	ldr	r1, [r7, #32]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fa02 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d107      	bne.n	8004d02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e02b      	b.n	8004d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]
 8004d16:	e021      	b.n	8004d5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d18:	893b      	ldrh	r3, [r7, #8]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	6a39      	ldr	r1, [r7, #32]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f9dc 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d107      	bne.n	8004d4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e005      	b.n	8004d5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d52:	893b      	ldrh	r3, [r7, #8]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	00010002 	.word	0x00010002

08004d6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	817b      	strh	r3, [r7, #10]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	813b      	strh	r3, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f8c2 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dcc:	d103      	bne.n	8004dd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0aa      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	4952      	ldr	r1, [pc, #328]	; (8004f38 <I2C_RequestMemoryRead+0x1cc>)
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f8fa 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e097      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f964 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d107      	bne.n	8004e3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e076      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	611a      	str	r2, [r3, #16]
 8004e52:	e021      	b.n	8004e98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e54:	893b      	ldrh	r3, [r7, #8]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	6a39      	ldr	r1, [r7, #32]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f93e 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d107      	bne.n	8004e8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e050      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8e:	893b      	ldrh	r3, [r7, #8]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	6a39      	ldr	r1, [r7, #32]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f923 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d107      	bne.n	8004ec0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e035      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f82b 	bl	8004f3c <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d103      	bne.n	8004f04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e013      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f08:	897b      	ldrh	r3, [r7, #10]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <I2C_RequestMemoryRead+0x1cc>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f863 	bl	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	00010002 	.word	0x00010002

08004f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f4c:	e025      	b.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d021      	beq.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fc ff79 	bl	8001e4c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d116      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e023      	b.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10d      	bne.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	43da      	mvns	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	e00c      	b.n	8004fda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d0b6      	beq.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff8:	e051      	b.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d123      	bne.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005022:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e046      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d021      	beq.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505a:	f7fc fef7 	bl	8001e4c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e020      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e00b      	b.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	43da      	mvns	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d18d      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f4:	e02d      	b.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f8ce 	bl	8005298 <I2C_IsAcknowledgeFailed>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e02d      	b.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d021      	beq.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fc fe9d 	bl	8001e4c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d116      	bne.n	8005152 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e007      	b.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d1ca      	bne.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005176:	e02d      	b.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f88d 	bl	8005298 <I2C_IsAcknowledgeFailed>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e02d      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d021      	beq.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fc fe5c 	bl	8001e4c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d1ca      	bne.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f8:	e042      	b.n	8005280 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b10      	cmp	r3, #16
 8005206:	d119      	bne.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e029      	b.n	8005290 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fc fe06 	bl	8001e4c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d1b5      	bne.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d11b      	bne.n	80052e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	f043 0204 	orr.w	r2, r3, #4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e128      	b.n	800555c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a90      	ldr	r2, [pc, #576]	; (8005564 <HAL_I2S_Init+0x26c>)
 8005322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fc fb1f 	bl	8001968 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005340:	f023 030f 	bic.w	r3, r3, #15
 8005344:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2202      	movs	r2, #2
 800534c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d060      	beq.n	8005418 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800535e:	2310      	movs	r3, #16
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e001      	b.n	8005368 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005364:	2320      	movs	r3, #32
 8005366:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b20      	cmp	r3, #32
 800536e:	d802      	bhi.n	8005376 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005376:	2001      	movs	r0, #1
 8005378:	f001 f9d8 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 800537c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d125      	bne.n	80053d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	fbb2 f2f3 	udiv	r2, r2, r3
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	461a      	mov	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	3305      	adds	r3, #5
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	e01f      	b.n	80053f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	461a      	mov	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	3305      	adds	r3, #5
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e00e      	b.n	80053f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	3305      	adds	r3, #5
 80053f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4a5c      	ldr	r2, [pc, #368]	; (8005568 <HAL_I2S_Init+0x270>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e003      	b.n	8005420 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005418:	2302      	movs	r3, #2
 800541a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d902      	bls.n	800542c <HAL_I2S_Init+0x134>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2bff      	cmp	r3, #255	; 0xff
 800542a:	d907      	bls.n	800543c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	f043 0210 	orr.w	r2, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e08f      	b.n	800555c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	ea42 0103 	orr.w	r1, r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	430a      	orrs	r2, r1
 800544e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800545a:	f023 030f 	bic.w	r3, r3, #15
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6851      	ldr	r1, [r2, #4]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68d2      	ldr	r2, [r2, #12]
 800546c:	4311      	orrs	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6992      	ldr	r2, [r2, #24]
 8005472:	430a      	orrs	r2, r1
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d161      	bne.n	800554c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a38      	ldr	r2, [pc, #224]	; (800556c <HAL_I2S_Init+0x274>)
 800548c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <HAL_I2S_Init+0x278>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <HAL_I2S_Init+0x1a4>
 8005498:	4b36      	ldr	r3, [pc, #216]	; (8005574 <HAL_I2S_Init+0x27c>)
 800549a:	e001      	b.n	80054a0 <HAL_I2S_Init+0x1a8>
 800549c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	4932      	ldr	r1, [pc, #200]	; (8005570 <HAL_I2S_Init+0x278>)
 80054a8:	428a      	cmp	r2, r1
 80054aa:	d101      	bne.n	80054b0 <HAL_I2S_Init+0x1b8>
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_I2S_Init+0x27c>)
 80054ae:	e001      	b.n	80054b4 <HAL_I2S_Init+0x1bc>
 80054b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80054b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054b8:	f023 030f 	bic.w	r3, r3, #15
 80054bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <HAL_I2S_Init+0x278>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_I2S_Init+0x1d4>
 80054c8:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_I2S_Init+0x27c>)
 80054ca:	e001      	b.n	80054d0 <HAL_I2S_Init+0x1d8>
 80054cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d0:	2202      	movs	r2, #2
 80054d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_I2S_Init+0x278>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_I2S_Init+0x1ea>
 80054de:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_I2S_Init+0x27c>)
 80054e0:	e001      	b.n	80054e6 <HAL_I2S_Init+0x1ee>
 80054e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f2:	d003      	beq.n	80054fc <HAL_I2S_Init+0x204>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80054fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e001      	b.n	8005508 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005512:	4313      	orrs	r3, r2
 8005514:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800551c:	4313      	orrs	r3, r2
 800551e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005526:	4313      	orrs	r3, r2
 8005528:	b29a      	uxth	r2, r3
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	4313      	orrs	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005534:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <HAL_I2S_Init+0x278>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <HAL_I2S_Init+0x24c>
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_I2S_Init+0x27c>)
 8005542:	e001      	b.n	8005548 <HAL_I2S_Init+0x250>
 8005544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005548:	897a      	ldrh	r2, [r7, #10]
 800554a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	0800566f 	.word	0x0800566f
 8005568:	cccccccd 	.word	0xcccccccd
 800556c:	08005785 	.word	0x08005785
 8005570:	40003800 	.word	0x40003800
 8005574:	40003400 	.word	0x40003400

08005578 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ffb8 	bl	8005578 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	b292      	uxth	r2, r2
 8005624:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10e      	bne.n	8005666 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005656:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff93 	bl	800558c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b04      	cmp	r3, #4
 8005688:	d13a      	bne.n	8005700 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	d109      	bne.n	80056a8 <I2S_IRQHandler+0x3a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d102      	bne.n	80056a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ffb4 	bl	8005610 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d126      	bne.n	8005700 <I2S_IRQHandler+0x92>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d11f      	bne.n	8005700 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ff50 	bl	80055a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b03      	cmp	r3, #3
 800570a:	d136      	bne.n	800577a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d109      	bne.n	800572a <I2S_IRQHandler+0xbc>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d102      	bne.n	800572a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff45 	bl	80055b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d122      	bne.n	800577a <I2S_IRQHandler+0x10c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d11b      	bne.n	800577a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005750:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff13 	bl	80055a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a92      	ldr	r2, [pc, #584]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800579e:	4b92      	ldr	r3, [pc, #584]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057a0:	e001      	b.n	80057a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a8b      	ldr	r2, [pc, #556]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057bc:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057be:	e001      	b.n	80057c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d004      	beq.n	80057dc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 8099 	bne.w	800590e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d107      	bne.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f925 	bl	8005a40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9c8 	bl	8005ba0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d13a      	bne.n	8005890 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d035      	beq.n	8005890 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a6e      	ldr	r2, [pc, #440]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005830:	e001      	b.n	8005836 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4969      	ldr	r1, [pc, #420]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800583e:	428b      	cmp	r3, r1
 8005840:	d101      	bne.n	8005846 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005842:	4b69      	ldr	r3, [pc, #420]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005844:	e001      	b.n	800584a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800584a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800584e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fe88 	bl	80055a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	f040 80c3 	bne.w	8005a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80bd 	beq.w	8005a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a49      	ldr	r2, [pc, #292]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058c2:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058c4:	e001      	b.n	80058ca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4944      	ldr	r1, [pc, #272]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058d2:	428b      	cmp	r3, r1
 80058d4:	d101      	bne.n	80058da <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058d6:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d8:	e001      	b.n	80058de <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058e2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058e4:	2300      	movs	r3, #0
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f043 0204 	orr.w	r2, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fe4a 	bl	80055a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800590c:	e089      	b.n	8005a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d107      	bne.n	8005928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8be 	bl	8005aa4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f8fd 	bl	8005b3c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d12f      	bne.n	80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02a      	beq.n	80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005964:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005972:	e001      	b.n	8005978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4919      	ldr	r1, [pc, #100]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005980:	428b      	cmp	r3, r1
 8005982:	d101      	bne.n	8005988 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005986:	e001      	b.n	800598c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800598c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005990:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f043 0202 	orr.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fdfa 	bl	80055a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d136      	bne.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d031      	beq.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059cc:	e001      	b.n	80059d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4902      	ldr	r1, [pc, #8]	; (80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059da:	428b      	cmp	r3, r1
 80059dc:	d106      	bne.n	80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80059de:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059e0:	e006      	b.n	80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80059e2:	bf00      	nop
 80059e4:	40003800 	.word	0x40003800
 80059e8:	40003400 	.word	0x40003400
 80059ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059f4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	f043 0204 	orr.w	r2, r3, #4
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fdc0 	bl	80055a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a20:	e000      	b.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a22:	bf00      	nop
}
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	1c99      	adds	r1, r3, #2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6251      	str	r1, [r2, #36]	; 0x24
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d113      	bne.n	8005a9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ffc9 	bl	8005a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c99      	adds	r1, r3, #2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6251      	str	r1, [r2, #36]	; 0x24
 8005ab6:	8819      	ldrh	r1, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <I2SEx_TxISR_I2SExt+0x90>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <I2SEx_TxISR_I2SExt+0x22>
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <I2SEx_TxISR_I2SExt+0x94>)
 8005ac4:	e001      	b.n	8005aca <I2SEx_TxISR_I2SExt+0x26>
 8005ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aca:	460a      	mov	r2, r1
 8005acc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d121      	bne.n	8005b2a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <I2SEx_TxISR_I2SExt+0x90>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <I2SEx_TxISR_I2SExt+0x50>
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <I2SEx_TxISR_I2SExt+0x94>)
 8005af2:	e001      	b.n	8005af8 <I2SEx_TxISR_I2SExt+0x54>
 8005af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	490d      	ldr	r1, [pc, #52]	; (8005b34 <I2SEx_TxISR_I2SExt+0x90>)
 8005b00:	428b      	cmp	r3, r1
 8005b02:	d101      	bne.n	8005b08 <I2SEx_TxISR_I2SExt+0x64>
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <I2SEx_TxISR_I2SExt+0x94>)
 8005b06:	e001      	b.n	8005b0c <I2SEx_TxISR_I2SExt+0x68>
 8005b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ff81 	bl	8005a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40003800 	.word	0x40003800
 8005b38:	40003400 	.word	0x40003400

08005b3c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68d8      	ldr	r0, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	1c99      	adds	r1, r3, #2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005b54:	b282      	uxth	r2, r0
 8005b56:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d113      	bne.n	8005b98 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b7e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ff4a 	bl	8005a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <I2SEx_RxISR_I2SExt+0x90>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d101      	bne.n	8005bb6 <I2SEx_RxISR_I2SExt+0x16>
 8005bb2:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <I2SEx_RxISR_I2SExt+0x94>)
 8005bb4:	e001      	b.n	8005bba <I2SEx_RxISR_I2SExt+0x1a>
 8005bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bba:	68d8      	ldr	r0, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	1c99      	adds	r1, r3, #2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bc6:	b282      	uxth	r2, r0
 8005bc8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d121      	bne.n	8005c26 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <I2SEx_RxISR_I2SExt+0x90>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <I2SEx_RxISR_I2SExt+0x50>
 8005bec:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <I2SEx_RxISR_I2SExt+0x94>)
 8005bee:	e001      	b.n	8005bf4 <I2SEx_RxISR_I2SExt+0x54>
 8005bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	490d      	ldr	r1, [pc, #52]	; (8005c30 <I2SEx_RxISR_I2SExt+0x90>)
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	d101      	bne.n	8005c04 <I2SEx_RxISR_I2SExt+0x64>
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <I2SEx_RxISR_I2SExt+0x94>)
 8005c02:	e001      	b.n	8005c08 <I2SEx_RxISR_I2SExt+0x68>
 8005c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff03 	bl	8005a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40003800 	.word	0x40003800
 8005c34:	40003400 	.word	0x40003400

08005c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e267      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d075      	beq.n	8005d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c56:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00c      	beq.n	8005c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c62:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d112      	bne.n	8005c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6e:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7a:	d10b      	bne.n	8005c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7c:	4b7e      	ldr	r3, [pc, #504]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05b      	beq.n	8005d40 <HAL_RCC_OscConfig+0x108>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d157      	bne.n	8005d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e242      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d106      	bne.n	8005cac <HAL_RCC_OscConfig+0x74>
 8005c9e:	4b76      	ldr	r3, [pc, #472]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a75      	ldr	r2, [pc, #468]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e01d      	b.n	8005ce8 <HAL_RCC_OscConfig+0xb0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x98>
 8005cb6:	4b70      	ldr	r3, [pc, #448]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6f      	ldr	r2, [pc, #444]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b6d      	ldr	r3, [pc, #436]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a6c      	ldr	r2, [pc, #432]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0xb0>
 8005cd0:	4b69      	ldr	r3, [pc, #420]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a68      	ldr	r2, [pc, #416]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf0:	f7fc f8ac 	bl	8001e4c <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fc f8a8 	bl	8001e4c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e207      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xc0>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fc f898 	bl	8001e4c <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d20:	f7fc f894 	bl	8001e4c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e1f3      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	4b51      	ldr	r3, [pc, #324]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0xe8>
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5a:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d11c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_RCC_OscConfig+0x152>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e1c7      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4937      	ldr	r1, [pc, #220]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	e03a      	b.n	8005e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d020      	beq.n	8005dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da8:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fc f84d 	bl	8001e4c <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fc f849 	bl	8001e4c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e1a8      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4925      	ldr	r1, [pc, #148]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	e015      	b.n	8005e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fc f82c 	bl	8001e4c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fc f828 	bl	8001e4c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e187      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d036      	beq.n	8005e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_RCC_OscConfig+0x248>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fc f80c 	bl	8001e4c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e38:	f7fc f808 	bl	8001e4c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e167      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x200>
 8005e56:	e01b      	b.n	8005e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <HAL_RCC_OscConfig+0x248>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5e:	f7fb fff5 	bl	8001e4c <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e64:	e00e      	b.n	8005e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e66:	f7fb fff1 	bl	8001e4c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d907      	bls.n	8005e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e150      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	42470000 	.word	0x42470000
 8005e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e84:	4b88      	ldr	r3, [pc, #544]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ea      	bne.n	8005e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8097 	beq.w	8005fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea2:	4b81      	ldr	r3, [pc, #516]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	4b7d      	ldr	r3, [pc, #500]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	4a7c      	ldr	r2, [pc, #496]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ebe:	4b7a      	ldr	r3, [pc, #488]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b77      	ldr	r3, [pc, #476]	; (80060ac <HAL_RCC_OscConfig+0x474>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d118      	bne.n	8005f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eda:	4b74      	ldr	r3, [pc, #464]	; (80060ac <HAL_RCC_OscConfig+0x474>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a73      	ldr	r2, [pc, #460]	; (80060ac <HAL_RCC_OscConfig+0x474>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee6:	f7fb ffb1 	bl	8001e4c <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eee:	f7fb ffad 	bl	8001e4c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e10c      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	4b6a      	ldr	r3, [pc, #424]	; (80060ac <HAL_RCC_OscConfig+0x474>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x2ea>
 8005f14:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	4a63      	ldr	r2, [pc, #396]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f20:	e01c      	b.n	8005f5c <HAL_RCC_OscConfig+0x324>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x30c>
 8005f2a:	4b5f      	ldr	r3, [pc, #380]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a5e      	ldr	r2, [pc, #376]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	4b5c      	ldr	r3, [pc, #368]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a5b      	ldr	r2, [pc, #364]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
 8005f42:	e00b      	b.n	8005f5c <HAL_RCC_OscConfig+0x324>
 8005f44:	4b58      	ldr	r3, [pc, #352]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a57      	ldr	r2, [pc, #348]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f50:	4b55      	ldr	r3, [pc, #340]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	4a54      	ldr	r2, [pc, #336]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f56:	f023 0304 	bic.w	r3, r3, #4
 8005f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d015      	beq.n	8005f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fb ff72 	bl	8001e4c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6c:	f7fb ff6e 	bl	8001e4c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0cb      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f82:	4b49      	ldr	r3, [pc, #292]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ee      	beq.n	8005f6c <HAL_RCC_OscConfig+0x334>
 8005f8e:	e014      	b.n	8005fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f90:	f7fb ff5c 	bl	8001e4c <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fb ff58 	bl	8001e4c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0b5      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fae:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1ee      	bne.n	8005f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d105      	bne.n	8005fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc0:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	4a38      	ldr	r2, [pc, #224]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a1 	beq.w	8006118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fd6:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d05c      	beq.n	800609c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d141      	bne.n	800606e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_RCC_OscConfig+0x478>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff0:	f7fb ff2c 	bl	8001e4c <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fb ff28 	bl	8001e4c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e087      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f0      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	019b      	lsls	r3, r3, #6
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	3b01      	subs	r3, #1
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	491b      	ldr	r1, [pc, #108]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <HAL_RCC_OscConfig+0x478>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006046:	f7fb ff01 	bl	8001e4c <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800604e:	f7fb fefd 	bl	8001e4c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e05c      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x416>
 800606c:	e054      	b.n	8006118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_OscConfig+0x478>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fb feea 	bl	8001e4c <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607c:	f7fb fee6 	bl	8001e4c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e045      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_RCC_OscConfig+0x470>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x444>
 800609a:	e03d      	b.n	8006118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e038      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
 80060a8:	40023800 	.word	0x40023800
 80060ac:	40007000 	.word	0x40007000
 80060b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <HAL_RCC_OscConfig+0x4ec>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d028      	beq.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d121      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d11a      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d111      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	3b01      	subs	r3, #1
 80060fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006110:	429a      	cmp	r2, r3
 8006112:	d001      	beq.n	8006118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40023800 	.word	0x40023800

08006128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0cc      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d90c      	bls.n	8006164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b65      	ldr	r3, [pc, #404]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006152:	4b63      	ldr	r3, [pc, #396]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0b8      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d020      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800617c:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a58      	ldr	r2, [pc, #352]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006194:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4a52      	ldr	r2, [pc, #328]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800619e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a0:	4b50      	ldr	r3, [pc, #320]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	494d      	ldr	r1, [pc, #308]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d044      	beq.n	8006248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d107      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c6:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d119      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e07f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d003      	beq.n	80061e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e06f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f6:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e067      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f023 0203 	bic.w	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4934      	ldr	r1, [pc, #208]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	4313      	orrs	r3, r2
 8006216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006218:	f7fb fe18 	bl	8001e4c <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	e00a      	b.n	8006236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006220:	f7fb fe14 	bl	8001e4c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f241 3288 	movw	r2, #5000	; 0x1388
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e04f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006236:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 020c 	and.w	r2, r3, #12
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	429a      	cmp	r2, r3
 8006246:	d1eb      	bne.n	8006220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d20c      	bcs.n	8006270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e032      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4916      	ldr	r1, [pc, #88]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	490e      	ldr	r1, [pc, #56]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062ae:	f000 f821 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	490a      	ldr	r1, [pc, #40]	; (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	5ccb      	ldrb	r3, [r1, r3]
 80062c2:	fa22 f303 	lsr.w	r3, r2, r3
 80062c6:	4a09      	ldr	r2, [pc, #36]	; (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fb fd78 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023c00 	.word	0x40023c00
 80062e4:	40023800 	.word	0x40023800
 80062e8:	0800b240 	.word	0x0800b240
 80062ec:	20000004 	.word	0x20000004
 80062f0:	20000008 	.word	0x20000008

080062f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f8:	b094      	sub	sp, #80	; 0x50
 80062fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006300:	2300      	movs	r3, #0
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006304:	2300      	movs	r3, #0
 8006306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800630c:	4b79      	ldr	r3, [pc, #484]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 030c 	and.w	r3, r3, #12
 8006314:	2b08      	cmp	r3, #8
 8006316:	d00d      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0x40>
 8006318:	2b08      	cmp	r3, #8
 800631a:	f200 80e1 	bhi.w	80064e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_RCC_GetSysClockFreq+0x34>
 8006322:	2b04      	cmp	r3, #4
 8006324:	d003      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0x3a>
 8006326:	e0db      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006328:	4b73      	ldr	r3, [pc, #460]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800632a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800632c:	e0db      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800632e:	4b73      	ldr	r3, [pc, #460]	; (80064fc <HAL_RCC_GetSysClockFreq+0x208>)
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006332:	e0d8      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006334:	4b6f      	ldr	r3, [pc, #444]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800633e:	4b6d      	ldr	r3, [pc, #436]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d063      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634a:	4b6a      	ldr	r3, [pc, #424]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	099b      	lsrs	r3, r3, #6
 8006350:	2200      	movs	r2, #0
 8006352:	63bb      	str	r3, [r7, #56]	; 0x38
 8006354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635c:	633b      	str	r3, [r7, #48]	; 0x30
 800635e:	2300      	movs	r3, #0
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
 8006362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	f04f 0000 	mov.w	r0, #0
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	0159      	lsls	r1, r3, #5
 8006374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006378:	0150      	lsls	r0, r2, #5
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4621      	mov	r1, r4
 8006380:	1a51      	subs	r1, r2, r1
 8006382:	6139      	str	r1, [r7, #16]
 8006384:	4629      	mov	r1, r5
 8006386:	eb63 0301 	sbc.w	r3, r3, r1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006398:	4659      	mov	r1, fp
 800639a:	018b      	lsls	r3, r1, #6
 800639c:	4651      	mov	r1, sl
 800639e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063a2:	4651      	mov	r1, sl
 80063a4:	018a      	lsls	r2, r1, #6
 80063a6:	4651      	mov	r1, sl
 80063a8:	ebb2 0801 	subs.w	r8, r2, r1
 80063ac:	4659      	mov	r1, fp
 80063ae:	eb63 0901 	sbc.w	r9, r3, r1
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c6:	4690      	mov	r8, r2
 80063c8:	4699      	mov	r9, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	eb18 0303 	adds.w	r3, r8, r3
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	462b      	mov	r3, r5
 80063d4:	eb49 0303 	adc.w	r3, r9, r3
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063e6:	4629      	mov	r1, r5
 80063e8:	024b      	lsls	r3, r1, #9
 80063ea:	4621      	mov	r1, r4
 80063ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063f0:	4621      	mov	r1, r4
 80063f2:	024a      	lsls	r2, r1, #9
 80063f4:	4610      	mov	r0, r2
 80063f6:	4619      	mov	r1, r3
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	2200      	movs	r2, #0
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006404:	f7fa fb26 	bl	8000a54 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4613      	mov	r3, r2
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006410:	e058      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006412:	4b38      	ldr	r3, [pc, #224]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	2200      	movs	r2, #0
 800641a:	4618      	mov	r0, r3
 800641c:	4611      	mov	r1, r2
 800641e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	2300      	movs	r3, #0
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
 8006428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	f04f 0000 	mov.w	r0, #0
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800643e:	0150      	lsls	r0, r2, #5
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4641      	mov	r1, r8
 8006446:	ebb2 0a01 	subs.w	sl, r2, r1
 800644a:	4649      	mov	r1, r9
 800644c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800645c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006464:	ebb2 040a 	subs.w	r4, r2, sl
 8006468:	eb63 050b 	sbc.w	r5, r3, fp
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	00eb      	lsls	r3, r5, #3
 8006476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800647a:	00e2      	lsls	r2, r4, #3
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	4643      	mov	r3, r8
 8006482:	18e3      	adds	r3, r4, r3
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	464b      	mov	r3, r9
 8006488:	eb45 0303 	adc.w	r3, r5, r3
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800649a:	4629      	mov	r1, r5
 800649c:	028b      	lsls	r3, r1, #10
 800649e:	4621      	mov	r1, r4
 80064a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064a4:	4621      	mov	r1, r4
 80064a6:	028a      	lsls	r2, r1, #10
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ae:	2200      	movs	r2, #0
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	61fa      	str	r2, [r7, #28]
 80064b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b8:	f7fa facc 	bl	8000a54 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4613      	mov	r3, r2
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	3301      	adds	r3, #1
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80064d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064de:	e002      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3750      	adds	r7, #80	; 0x50
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f2:	bf00      	nop
 80064f4:	40023800 	.word	0x40023800
 80064f8:	00f42400 	.word	0x00f42400
 80064fc:	007a1200 	.word	0x007a1200

08006500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <HAL_RCC_GetHCLKFreq+0x14>)
 8006506:	681b      	ldr	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000004 	.word	0x20000004

08006518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800651c:	f7ff fff0 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	0a9b      	lsrs	r3, r3, #10
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4903      	ldr	r1, [pc, #12]	; (800653c <HAL_RCC_GetPCLK1Freq+0x24>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40023800 	.word	0x40023800
 800653c:	0800b250 	.word	0x0800b250

08006540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006544:	f7ff ffdc 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006548:	4602      	mov	r2, r0
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	0b5b      	lsrs	r3, r3, #13
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006556:	5ccb      	ldrb	r3, [r1, r3]
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40023800 	.word	0x40023800
 8006564:	0800b250 	.word	0x0800b250

08006568 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800658c:	2b00      	cmp	r3, #0
 800658e:	d035      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006590:	4b62      	ldr	r3, [pc, #392]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006596:	f7fb fc59 	bl	8001e4c <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800659e:	f7fb fc55 	bl	8001e4c <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0b0      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065b0:	4b5b      	ldr	r3, [pc, #364]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f0      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	019a      	lsls	r2, r3, #6
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	071b      	lsls	r3, r3, #28
 80065c8:	4955      	ldr	r1, [pc, #340]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065d0:	4b52      	ldr	r3, [pc, #328]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065d6:	f7fb fc39 	bl	8001e4c <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065de:	f7fb fc35 	bl	8001e4c <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e090      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065f0:	4b4b      	ldr	r3, [pc, #300]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8083 	beq.w	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	4b44      	ldr	r3, [pc, #272]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	4a43      	ldr	r2, [pc, #268]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006618:	6413      	str	r3, [r2, #64]	; 0x40
 800661a:	4b41      	ldr	r3, [pc, #260]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3e      	ldr	r2, [pc, #248]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fb fc0b 	bl	8001e4c <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800663a:	f7fb fc07 	bl	8001e4c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e062      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006658:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006660:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	d028      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006676:	4b2a      	ldr	r3, [pc, #168]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006680:	4b29      	ldr	r3, [pc, #164]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006686:	4b28      	ldr	r3, [pc, #160]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800668c:	4a24      	ldr	r2, [pc, #144]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006692:	4b23      	ldr	r3, [pc, #140]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d114      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800669e:	f7fb fbd5 	bl	8001e4c <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	e00a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7fb fbd1 	bl	8001e4c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e02a      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	4b18      	ldr	r3, [pc, #96]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ee      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d4:	d10d      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80066d6:	4b12      	ldr	r3, [pc, #72]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	490d      	ldr	r1, [pc, #52]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	608b      	str	r3, [r1, #8]
 80066f0:	e005      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066fc:	6093      	str	r3, [r2, #8]
 80066fe:	4b08      	ldr	r3, [pc, #32]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	4905      	ldr	r1, [pc, #20]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800670c:	4313      	orrs	r3, r2
 800670e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	42470068 	.word	0x42470068
 8006720:	40023800 	.word	0x40023800
 8006724:	40007000 	.word	0x40007000
 8006728:	42470e40 	.word	0x42470e40

0800672c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d13e      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800674a:	4b23      	ldr	r3, [pc, #140]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d12f      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006760:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006762:	617b      	str	r3, [r7, #20]
          break;
 8006764:	e02f      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006772:	d108      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006774:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800677c:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e007      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006786:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678e:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679c:	099b      	lsrs	r3, r3, #6
 800679e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80067ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b0:	0f1b      	lsrs	r3, r3, #28
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]
          break;
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]
          break;
 80067c4:	bf00      	nop
        }
      }
      break;
 80067c6:	bf00      	nop
    }
  }
  return frequency;
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40023800 	.word	0x40023800
 80067dc:	00bb8000 	.word	0x00bb8000
 80067e0:	007a1200 	.word	0x007a1200
 80067e4:	00f42400 	.word	0x00f42400

080067e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e07b      	b.n	80068f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800680a:	d009      	beq.n	8006820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]
 8006812:	e005      	b.n	8006820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f914 	bl	8001a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	ea42 0103 	orr.w	r1, r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	f003 0104 	and.w	r1, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	f003 0210 	and.w	r2, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e03f      	b.n	800698c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fb f8e9 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2224      	movs	r2, #36	; 0x24
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800693c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fdde 	bl	8007500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006952:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006962:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006972:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d17c      	bne.n	8006aae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <HAL_UART_Transmit+0x2c>
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e075      	b.n	8006ab0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Transmit+0x3e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e06e      	b.n	8006ab0 <HAL_UART_Transmit+0x11c>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2221      	movs	r2, #33	; 0x21
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e8:	f7fb fa30 	bl	8001e4c <HAL_GetTick>
 80069ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	88fa      	ldrh	r2, [r7, #6]
 80069f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d108      	bne.n	8006a16 <HAL_UART_Transmit+0x82>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	e003      	b.n	8006a1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a26:	e02a      	b.n	8006a7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fb1e 	bl	8007074 <UART_WaitOnFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e036      	b.n	8006ab0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e007      	b.n	8006a70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1cf      	bne.n	8006a28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 faee 	bl	8007074 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e006      	b.n	8006ab0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d11d      	bne.n	8006b0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_UART_Receive_IT+0x26>
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e016      	b.n	8006b10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_UART_Receive_IT+0x38>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e00f      	b.n	8006b10 <HAL_UART_Receive_IT+0x58>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	461a      	mov	r2, r3
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fb23 	bl	8007150 <UART_Start_Receive_IT>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	e000      	b.n	8006b10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
  }
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b0ba      	sub	sp, #232	; 0xe8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10f      	bne.n	8006b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_UART_IRQHandler+0x66>
 8006b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc07 	bl	800738a <UART_Receive_IT>
      return;
 8006b7c:	e256      	b.n	800702c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80de 	beq.w	8006d44 <HAL_UART_IRQHandler+0x22c>
 8006b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80d1 	beq.w	8006d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xae>
 8006bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <HAL_UART_IRQHandler+0xd2>
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f043 0202 	orr.w	r2, r3, #2
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <HAL_UART_IRQHandler+0xf6>
 8006bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f043 0204 	orr.w	r2, r3, #4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <HAL_UART_IRQHandler+0x126>
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0208 	orr.w	r2, r3, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 81ed 	beq.w	8007022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <HAL_UART_IRQHandler+0x14e>
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb92 	bl	800738a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d103      	bne.n	8006c92 <HAL_UART_IRQHandler+0x17a>
 8006c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04f      	beq.n	8006d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa9a 	bl	80071cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d141      	bne.n	8006d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1d9      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d013      	beq.n	8006d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	4a7d      	ldr	r2, [pc, #500]	; (8006ef4 <HAL_UART_IRQHandler+0x3dc>)
 8006d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fb fb00 	bl	800230c <HAL_DMA_Abort_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e00e      	b.n	8006d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f990 	bl	8007048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e00a      	b.n	8006d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f98c 	bl	8007048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	e006      	b.n	8006d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f988 	bl	8007048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d3e:	e170      	b.n	8007022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	bf00      	nop
    return;
 8006d42:	e16e      	b.n	8007022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	f040 814a 	bne.w	8006fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 8143 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 813c 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	60bb      	str	r3, [r7, #8]
 8006d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	f040 80b4 	bne.w	8006ef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8140 	beq.w	8007026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f080 8139 	bcs.w	8007026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc6:	f000 8088 	beq.w	8006eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1d9      	bne.n	8006dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3314      	adds	r3, #20
 8006e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3314      	adds	r3, #20
 8006e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e1      	bne.n	8006e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eaa:	f023 0310 	bic.w	r3, r3, #16
 8006eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e3      	bne.n	8006e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fb f9a9 	bl	800222c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8b6 	bl	800705c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef0:	e099      	b.n	8007026 <HAL_UART_IRQHandler+0x50e>
 8006ef2:	bf00      	nop
 8006ef4:	08007293 	.word	0x08007293
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 808b 	beq.w	800702a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8086 	beq.w	800702a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f42:	647a      	str	r2, [r7, #68]	; 0x44
 8006f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e3      	bne.n	8006f1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3314      	adds	r3, #20
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3314      	adds	r3, #20
 8006f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e3      	bne.n	8006f56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0310 	bic.w	r3, r3, #16
 8006fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fc0:	61fa      	str	r2, [r7, #28]
 8006fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	69b9      	ldr	r1, [r7, #24]
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e3      	bne.n	8006f9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f83e 	bl	800705c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fe0:	e023      	b.n	800702a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_UART_IRQHandler+0x4ea>
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f95d 	bl	80072ba <UART_Transmit_IT>
    return;
 8007000:	e014      	b.n	800702c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00e      	beq.n	800702c <HAL_UART_IRQHandler+0x514>
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f99d 	bl	800735a <UART_EndTransmit_IT>
    return;
 8007020:	e004      	b.n	800702c <HAL_UART_IRQHandler+0x514>
    return;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <HAL_UART_IRQHandler+0x514>
      return;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <HAL_UART_IRQHandler+0x514>
      return;
 800702a:	bf00      	nop
  }
}
 800702c:	37e8      	adds	r7, #232	; 0xe8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	; 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007084:	e050      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d04c      	beq.n	8007128 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800708e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007094:	f7fa feda 	bl	8001e4c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d241      	bcs.n	8007128 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070c4:	637a      	str	r2, [r7, #52]	; 0x34
 80070c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3314      	adds	r3, #20
 80070de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	613b      	str	r3, [r7, #16]
   return(result);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3314      	adds	r3, #20
 80070f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070f8:	623a      	str	r2, [r7, #32]
 80070fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	61bb      	str	r3, [r7, #24]
   return(result);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e5      	bne.n	80070d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e00f      	b.n	8007148 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	429a      	cmp	r2, r3
 8007144:	d09f      	beq.n	8007086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3740      	adds	r7, #64	; 0x40
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2222      	movs	r2, #34	; 0x22
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800719c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0220 	orr.w	r2, r2, #32
 80071bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b095      	sub	sp, #84	; 0x54
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f4:	643a      	str	r2, [r7, #64]	; 0x40
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e5      	bne.n	80071d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	61fb      	str	r3, [r7, #28]
   return(result);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3314      	adds	r3, #20
 8007226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e5      	bne.n	8007208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	2b01      	cmp	r3, #1
 8007242:	d119      	bne.n	8007278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60bb      	str	r3, [r7, #8]
   return(result);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	647b      	str	r3, [r7, #68]	; 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007264:	61ba      	str	r2, [r7, #24]
 8007266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6979      	ldr	r1, [r7, #20]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007286:	bf00      	nop
 8007288:	3754      	adds	r7, #84	; 0x54
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fecb 	bl	8007048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b21      	cmp	r3, #33	; 0x21
 80072cc:	d13e      	bne.n	800734c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d6:	d114      	bne.n	8007302 <UART_Transmit_IT+0x48>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d110      	bne.n	8007302 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	1c9a      	adds	r2, r3, #2
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]
 8007300:	e008      	b.n	8007314 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6211      	str	r1, [r2, #32]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007318:	b29b      	uxth	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10f      	bne.n	8007348 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007336:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007346:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e000      	b.n	800734e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007370:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe5a 	bl	8007034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b08c      	sub	sp, #48	; 0x30
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b22      	cmp	r3, #34	; 0x22
 800739c:	f040 80ab 	bne.w	80074f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a8:	d117      	bne.n	80073da <UART_Receive_IT+0x50>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d113      	bne.n	80073da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	1c9a      	adds	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	629a      	str	r2, [r3, #40]	; 0x28
 80073d8:	e026      	b.n	8007428 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ec:	d007      	beq.n	80073fe <UART_Receive_IT+0x74>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <UART_Receive_IT+0x82>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e008      	b.n	800741e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007418:	b2da      	uxtb	r2, r3
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29b      	uxth	r3, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4619      	mov	r1, r3
 8007436:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007438:	2b00      	cmp	r3, #0
 800743a:	d15a      	bne.n	80074f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0220 	bic.w	r2, r2, #32
 800744a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800745a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0201 	bic.w	r2, r2, #1
 800746a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	2b01      	cmp	r3, #1
 800747a:	d135      	bne.n	80074e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	623a      	str	r2, [r7, #32]
 80074a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	69f9      	ldr	r1, [r7, #28]
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e5      	bne.n	8007482 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d10a      	bne.n	80074da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff fdbb 	bl	800705c <HAL_UARTEx_RxEventCallback>
 80074e6:	e002      	b.n	80074ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fa f95b 	bl	80017a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e002      	b.n	80074f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e000      	b.n	80074f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3730      	adds	r7, #48	; 0x30
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007504:	b0c0      	sub	sp, #256	; 0x100
 8007506:	af00      	add	r7, sp, #0
 8007508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	ea40 0301 	orr.w	r3, r0, r1
 8007528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	431a      	orrs	r2, r3
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	431a      	orrs	r2, r3
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007558:	f021 010c 	bic.w	r1, r1, #12
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007566:	430b      	orrs	r3, r1
 8007568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757a:	6999      	ldr	r1, [r3, #24]
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	ea40 0301 	orr.w	r3, r0, r1
 8007586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8f      	ldr	r3, [pc, #572]	; (80077cc <UART_SetConfig+0x2cc>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <UART_SetConfig+0xa0>
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b8d      	ldr	r3, [pc, #564]	; (80077d0 <UART_SetConfig+0x2d0>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d104      	bne.n	80075aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a0:	f7fe ffce 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 80075a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075a8:	e003      	b.n	80075b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075aa:	f7fe ffb5 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 80075ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	f040 810c 	bne.w	80077d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80075da:	415b      	adcs	r3, r3
 80075dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075e2:	4621      	mov	r1, r4
 80075e4:	eb12 0801 	adds.w	r8, r2, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb43 0901 	adc.w	r9, r3, r1
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007602:	4690      	mov	r8, r2
 8007604:	4699      	mov	r9, r3
 8007606:	4623      	mov	r3, r4
 8007608:	eb18 0303 	adds.w	r3, r8, r3
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007610:	462b      	mov	r3, r5
 8007612:	eb49 0303 	adc.w	r3, r9, r3
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800762a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800762e:	460b      	mov	r3, r1
 8007630:	18db      	adds	r3, r3, r3
 8007632:	653b      	str	r3, [r7, #80]	; 0x50
 8007634:	4613      	mov	r3, r2
 8007636:	eb42 0303 	adc.w	r3, r2, r3
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
 800763c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007644:	f7f9 fa06 	bl	8000a54 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b61      	ldr	r3, [pc, #388]	; (80077d4 <UART_SetConfig+0x2d4>)
 800764e:	fba3 2302 	umull	r2, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	011c      	lsls	r4, r3, #4
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007670:	415b      	adcs	r3, r3
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007678:	4641      	mov	r1, r8
 800767a:	eb12 0a01 	adds.w	sl, r2, r1
 800767e:	4649      	mov	r1, r9
 8007680:	eb43 0b01 	adc.w	fp, r3, r1
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007698:	4692      	mov	sl, r2
 800769a:	469b      	mov	fp, r3
 800769c:	4643      	mov	r3, r8
 800769e:	eb1a 0303 	adds.w	r3, sl, r3
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a6:	464b      	mov	r3, r9
 80076a8:	eb4b 0303 	adc.w	r3, fp, r3
 80076ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076c4:	460b      	mov	r3, r1
 80076c6:	18db      	adds	r3, r3, r3
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	4613      	mov	r3, r2
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
 80076d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076da:	f7f9 f9bb 	bl	8000a54 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	4b3b      	ldr	r3, [pc, #236]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076e6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	2264      	movs	r2, #100	; 0x64
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	1acb      	subs	r3, r1, r3
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076fa:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007708:	441c      	add	r4, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770e:	2200      	movs	r2, #0
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	1891      	adds	r1, r2, r2
 8007722:	63b9      	str	r1, [r7, #56]	; 0x38
 8007724:	415b      	adcs	r3, r3
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800772c:	4641      	mov	r1, r8
 800772e:	1851      	adds	r1, r2, r1
 8007730:	6339      	str	r1, [r7, #48]	; 0x30
 8007732:	4649      	mov	r1, r9
 8007734:	414b      	adcs	r3, r1
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007744:	4659      	mov	r1, fp
 8007746:	00cb      	lsls	r3, r1, #3
 8007748:	4651      	mov	r1, sl
 800774a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774e:	4651      	mov	r1, sl
 8007750:	00ca      	lsls	r2, r1, #3
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	4603      	mov	r3, r0
 8007758:	4642      	mov	r2, r8
 800775a:	189b      	adds	r3, r3, r2
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007760:	464b      	mov	r3, r9
 8007762:	460a      	mov	r2, r1
 8007764:	eb42 0303 	adc.w	r3, r2, r3
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800777c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007780:	460b      	mov	r3, r1
 8007782:	18db      	adds	r3, r3, r3
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
 8007786:	4613      	mov	r3, r2
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007796:	f7f9 f95d 	bl	8000a54 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077a0:	fba3 1302 	umull	r1, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	2164      	movs	r1, #100	; 0x64
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	3332      	adds	r3, #50	; 0x32
 80077b2:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f003 0207 	and.w	r2, r3, #7
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4422      	add	r2, r4
 80077c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077c8:	e105      	b.n	80079d6 <UART_SetConfig+0x4d6>
 80077ca:	bf00      	nop
 80077cc:	40011000 	.word	0x40011000
 80077d0:	40011400 	.word	0x40011400
 80077d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	1891      	adds	r1, r2, r2
 80077f0:	6239      	str	r1, [r7, #32]
 80077f2:	415b      	adcs	r3, r3
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fa:	4641      	mov	r1, r8
 80077fc:	1854      	adds	r4, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb43 0501 	adc.w	r5, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	00eb      	lsls	r3, r5, #3
 800780e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007812:	00e2      	lsls	r2, r4, #3
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	4643      	mov	r3, r8
 800781a:	18e3      	adds	r3, r4, r3
 800781c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007820:	464b      	mov	r3, r9
 8007822:	eb45 0303 	adc.w	r3, r5, r3
 8007826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007846:	4629      	mov	r1, r5
 8007848:	008b      	lsls	r3, r1, #2
 800784a:	4621      	mov	r1, r4
 800784c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007850:	4621      	mov	r1, r4
 8007852:	008a      	lsls	r2, r1, #2
 8007854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007858:	f7f9 f8fc 	bl	8000a54 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4b60      	ldr	r3, [pc, #384]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007862:	fba3 2302 	umull	r2, r3, r3, r2
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	011c      	lsls	r4, r3, #4
 800786a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	1891      	adds	r1, r2, r2
 8007882:	61b9      	str	r1, [r7, #24]
 8007884:	415b      	adcs	r3, r3
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788c:	4641      	mov	r1, r8
 800788e:	1851      	adds	r1, r2, r1
 8007890:	6139      	str	r1, [r7, #16]
 8007892:	4649      	mov	r1, r9
 8007894:	414b      	adcs	r3, r1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a4:	4659      	mov	r1, fp
 80078a6:	00cb      	lsls	r3, r1, #3
 80078a8:	4651      	mov	r1, sl
 80078aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ae:	4651      	mov	r1, sl
 80078b0:	00ca      	lsls	r2, r1, #3
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	4642      	mov	r2, r8
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078c0:	464b      	mov	r3, r9
 80078c2:	460a      	mov	r2, r1
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078e4:	4649      	mov	r1, r9
 80078e6:	008b      	lsls	r3, r1, #2
 80078e8:	4641      	mov	r1, r8
 80078ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ee:	4641      	mov	r1, r8
 80078f0:	008a      	lsls	r2, r1, #2
 80078f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078f6:	f7f9 f8ad 	bl	8000a54 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007900:	fba3 1302 	umull	r1, r3, r3, r2
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	2164      	movs	r1, #100	; 0x64
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	3332      	adds	r3, #50	; 0x32
 8007912:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007914:	fba2 2303 	umull	r2, r3, r2, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791e:	441c      	add	r4, r3
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007924:	2200      	movs	r2, #0
 8007926:	673b      	str	r3, [r7, #112]	; 0x70
 8007928:	677a      	str	r2, [r7, #116]	; 0x74
 800792a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800792e:	4642      	mov	r2, r8
 8007930:	464b      	mov	r3, r9
 8007932:	1891      	adds	r1, r2, r2
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	415b      	adcs	r3, r3
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800793e:	4641      	mov	r1, r8
 8007940:	1851      	adds	r1, r2, r1
 8007942:	6039      	str	r1, [r7, #0]
 8007944:	4649      	mov	r1, r9
 8007946:	414b      	adcs	r3, r1
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007956:	4659      	mov	r1, fp
 8007958:	00cb      	lsls	r3, r1, #3
 800795a:	4651      	mov	r1, sl
 800795c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007960:	4651      	mov	r1, sl
 8007962:	00ca      	lsls	r2, r1, #3
 8007964:	4610      	mov	r0, r2
 8007966:	4619      	mov	r1, r3
 8007968:	4603      	mov	r3, r0
 800796a:	4642      	mov	r2, r8
 800796c:	189b      	adds	r3, r3, r2
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	464b      	mov	r3, r9
 8007972:	460a      	mov	r2, r1
 8007974:	eb42 0303 	adc.w	r3, r2, r3
 8007978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	663b      	str	r3, [r7, #96]	; 0x60
 8007984:	667a      	str	r2, [r7, #100]	; 0x64
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007992:	4649      	mov	r1, r9
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	4641      	mov	r1, r8
 8007998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799c:	4641      	mov	r1, r8
 800799e:	008a      	lsls	r2, r1, #2
 80079a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079a4:	f7f9 f856 	bl	8000a54 <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 1302 	umull	r1, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2164      	movs	r1, #100	; 0x64
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3332      	adds	r3, #50	; 0x32
 80079c0:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4422      	add	r2, r4
 80079d4:	609a      	str	r2, [r3, #8]
}
 80079d6:	bf00      	nop
 80079d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	51eb851f 	.word	0x51eb851f

080079e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e8:	b084      	sub	sp, #16
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	f107 001c 	add.w	r0, r7, #28
 80079f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d122      	bne.n	8007a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d105      	bne.n	8007a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9c0 	bl	8007dc0 <USB_CoreReset>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
 8007a44:	e01a      	b.n	8007a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9b4 	bl	8007dc0 <USB_CoreReset>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a6e:	e005      	b.n	8007a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d10b      	bne.n	8007a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f043 0206 	orr.w	r2, r3, #6
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aa6:	b004      	add	sp, #16
 8007aa8:	4770      	bx	lr

08007aaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f023 0201 	bic.w	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d115      	bne.n	8007b3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	f7fa f9a1 	bl	8001e64 <HAL_Delay>
      ms++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f93a 	bl	8007da2 <USB_GetMode>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d01e      	beq.n	8007b72 <USB_SetCurrentMode+0x84>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b31      	cmp	r3, #49	; 0x31
 8007b38:	d9f0      	bls.n	8007b1c <USB_SetCurrentMode+0x2e>
 8007b3a:	e01a      	b.n	8007b72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d115      	bne.n	8007b6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f7fa f988 	bl	8001e64 <HAL_Delay>
      ms++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f921 	bl	8007da2 <USB_GetMode>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <USB_SetCurrentMode+0x84>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b31      	cmp	r3, #49	; 0x31
 8007b6a:	d9f0      	bls.n	8007b4e <USB_SetCurrentMode+0x60>
 8007b6c:	e001      	b.n	8007b72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e005      	b.n	8007b7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b32      	cmp	r3, #50	; 0x32
 8007b76:	d101      	bne.n	8007b7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a13      	ldr	r2, [pc, #76]	; (8007bec <USB_FlushTxFifo+0x64>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d901      	bls.n	8007ba8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e01b      	b.n	8007be0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	daf2      	bge.n	8007b96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	019b      	lsls	r3, r3, #6
 8007bb8:	f043 0220 	orr.w	r2, r3, #32
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a08      	ldr	r2, [pc, #32]	; (8007bec <USB_FlushTxFifo+0x64>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e006      	b.n	8007be0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d0f0      	beq.n	8007bc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	00030d40 	.word	0x00030d40

08007bf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <USB_FlushRxFifo+0x5c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e018      	b.n	8007c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	daf2      	bge.n	8007bfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <USB_FlushRxFifo+0x5c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d0f0      	beq.n	8007c20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	00030d40 	.word	0x00030d40

08007c50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	460b      	mov	r3, r1
 8007c60:	71fb      	strb	r3, [r7, #7]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d123      	bne.n	8007cbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c76:	88bb      	ldrh	r3, [r7, #4]
 8007c78:	3303      	adds	r3, #3
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	e018      	b.n	8007cb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	031a      	lsls	r2, r3, #12
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	461a      	mov	r2, r3
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	3301      	adds	r3, #1
 8007cae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d3e2      	bcc.n	8007c84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3724      	adds	r7, #36	; 0x24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b08b      	sub	sp, #44	; 0x2c
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	089b      	lsrs	r3, r3, #2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	e014      	b.n	8007d22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	3301      	adds	r3, #1
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	3301      	adds	r3, #1
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	623b      	str	r3, [r7, #32]
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d3e6      	bcc.n	8007cf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d2a:	8bfb      	ldrh	r3, [r7, #30]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01e      	beq.n	8007d6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f107 0310 	add.w	r3, r7, #16
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	701a      	strb	r2, [r3, #0]
      i++;
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	3301      	adds	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d62:	8bfb      	ldrh	r3, [r7, #30]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d68:	8bfb      	ldrh	r3, [r7, #30]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ea      	bne.n	8007d44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	372c      	adds	r7, #44	; 0x2c
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4013      	ands	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d94:	68fb      	ldr	r3, [r7, #12]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0301 	and.w	r3, r3, #1
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <USB_CoreReset+0x64>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d901      	bls.n	8007dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e01b      	b.n	8007e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	daf2      	bge.n	8007dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f043 0201 	orr.w	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <USB_CoreReset+0x64>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d901      	bls.n	8007e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d0f0      	beq.n	8007df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	00030d40 	.word	0x00030d40

08007e28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e28:	b084      	sub	sp, #16
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d018      	beq.n	8007eb0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d10a      	bne.n	8007e9a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e92:	f043 0304 	orr.w	r3, r3, #4
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	e014      	b.n	8007ec4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ea8:	f023 0304 	bic.w	r3, r3, #4
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	e009      	b.n	8007ec4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ebe:	f023 0304 	bic.w	r3, r3, #4
 8007ec2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ec4:	2110      	movs	r1, #16
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fe5e 	bl	8007b88 <USB_FlushTxFifo>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fe8a 	bl	8007bf0 <USB_FlushRxFifo>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	613b      	str	r3, [r7, #16]
 8007eea:	e015      	b.n	8007f18 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f04f 33ff 	mov.w	r3, #4294967295
 8007efe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3301      	adds	r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3e5      	bcc.n	8007eec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <USB_HostInit+0x16c>)
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <USB_HostInit+0x170>)
 8007f4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f50:	e009      	b.n	8007f66 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <USB_HostInit+0x174>)
 8007f5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a0f      	ldr	r2, [pc, #60]	; (8007fa0 <USB_HostInit+0x178>)
 8007f62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	f043 0210 	orr.w	r2, r3, #16
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <USB_HostInit+0x17c>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f90:	b004      	add	sp, #16
 8007f92:	4770      	bx	lr
 8007f94:	01000200 	.word	0x01000200
 8007f98:	00e00300 	.word	0x00e00300
 8007f9c:	00600080 	.word	0x00600080
 8007fa0:	004000e0 	.word	0x004000e0
 8007fa4:	a3200008 	.word	0xa3200008

08007fa8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d107      	bne.n	8007ffa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ff6:	6053      	str	r3, [r2, #4]
 8007ff8:	e009      	b.n	800800e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d106      	bne.n	800800e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008006:	461a      	mov	r2, r3
 8008008:	f241 7370 	movw	r3, #6000	; 0x1770
 800800c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800803c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	f7f9 ff09 	bl	8001e64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800805a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800805e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008060:	200a      	movs	r0, #10
 8008062:	f7f9 feff 	bl	8001e64 <HAL_Delay>

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008094:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <USB_DriveVbus+0x44>
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d106      	bne.n	80080b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d109      	bne.n	80080d4 <USB_DriveVbus+0x64>
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	0c5b      	lsrs	r3, r3, #17
 8008100:	f003 0303 	and.w	r3, r3, #3
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	b29b      	uxth	r3, r3
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	461a      	mov	r2, r3
 8008142:	4603      	mov	r3, r0
 8008144:	70fb      	strb	r3, [r7, #3]
 8008146:	460b      	mov	r3, r1
 8008148:	70bb      	strb	r3, [r7, #2]
 800814a:	4613      	mov	r3, r2
 800814c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4413      	add	r3, r2
 800815e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008162:	461a      	mov	r2, r3
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800816a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800816e:	2b03      	cmp	r3, #3
 8008170:	d87e      	bhi.n	8008270 <USB_HC_Init+0x13c>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <USB_HC_Init+0x44>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	08008189 	.word	0x08008189
 800817c:	08008233 	.word	0x08008233
 8008180:	08008189 	.word	0x08008189
 8008184:	080081f5 	.word	0x080081f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008194:	461a      	mov	r2, r3
 8008196:	f240 439d 	movw	r3, #1181	; 0x49d
 800819a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800819c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da10      	bge.n	80081c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80081c4:	e057      	b.n	8008276 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d051      	beq.n	8008276 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081f0:	60d3      	str	r3, [r2, #12]
      break;
 80081f2:	e040      	b.n	8008276 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008200:	461a      	mov	r2, r3
 8008202:	f240 639d 	movw	r3, #1693	; 0x69d
 8008206:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008208:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da34      	bge.n	800827a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	440a      	add	r2, r1
 8008226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800822a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008230:	e023      	b.n	800827a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4413      	add	r3, r2
 800823a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823e:	461a      	mov	r2, r3
 8008240:	f240 2325 	movw	r3, #549	; 0x225
 8008244:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da17      	bge.n	800827e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	440a      	add	r2, r1
 8008264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008268:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800826c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800826e:	e006      	b.n	800827e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	77fb      	strb	r3, [r7, #31]
      break;
 8008274:	e004      	b.n	8008280 <USB_HC_Init+0x14c>
      break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <USB_HC_Init+0x14c>
      break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <USB_HC_Init+0x14c>
      break;
 800827e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	440a      	add	r2, r1
 8008296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800829a:	f043 0302 	orr.w	r3, r3, #2
 800829e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	2101      	movs	r1, #1
 80082b0:	fa01 f303 	lsl.w	r3, r1, r3
 80082b4:	6939      	ldr	r1, [r7, #16]
 80082b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082ba:	4313      	orrs	r3, r2
 80082bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80082ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	da03      	bge.n	80082da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80082d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e001      	b.n	80082de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff feff 	bl	80080e2 <USB_GetHostSpeed>
 80082e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80082e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d106      	bne.n	80082fc <USB_HC_Init+0x1c8>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d003      	beq.n	80082fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80082f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	e001      	b.n	8008300 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008300:	787b      	ldrb	r3, [r7, #1]
 8008302:	059b      	lsls	r3, r3, #22
 8008304:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008308:	78bb      	ldrb	r3, [r7, #2]
 800830a:	02db      	lsls	r3, r3, #11
 800830c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008310:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008312:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008316:	049b      	lsls	r3, r3, #18
 8008318:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800831c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800831e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008320:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008324:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	0159      	lsls	r1, r3, #5
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	440b      	add	r3, r1
 8008332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008336:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800833c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800833e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008342:	2b03      	cmp	r3, #3
 8008344:	d003      	beq.n	800834e <USB_HC_Init+0x21a>
 8008346:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800834a:	2b01      	cmp	r3, #1
 800834c:	d10f      	bne.n	800836e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	440a      	add	r2, r1
 8008364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800836c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800836e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08c      	sub	sp, #48	; 0x30
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008394:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d02d      	beq.n	80083fe <USB_HC_StartXfer+0x86>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d129      	bne.n	80083fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d117      	bne.n	80083e0 <USB_HC_StartXfer+0x68>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	79db      	ldrb	r3, [r3, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <USB_HC_StartXfer+0x48>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	79db      	ldrb	r3, [r3, #7]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d10f      	bne.n	80083e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <USB_HC_StartXfer+0x86>
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	795b      	ldrb	r3, [r3, #5]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d107      	bne.n	80083fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fa0f 	bl	8008818 <USB_DoPing>
      return HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e0f8      	b.n	80085f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	8912      	ldrh	r2, [r2, #8]
 800840e:	4413      	add	r3, r2
 8008410:	3b01      	subs	r3, #1
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	8912      	ldrh	r2, [r2, #8]
 8008416:	fbb3 f3f2 	udiv	r3, r3, r2
 800841a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800841c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800841e:	8b7b      	ldrh	r3, [r7, #26]
 8008420:	429a      	cmp	r2, r3
 8008422:	d90b      	bls.n	800843c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008424:	8b7b      	ldrh	r3, [r7, #26]
 8008426:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	8912      	ldrh	r2, [r2, #8]
 800842e:	fb03 f202 	mul.w	r2, r3, r2
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	611a      	str	r2, [r3, #16]
 8008436:	e001      	b.n	800843c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008438:	2301      	movs	r3, #1
 800843a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	78db      	ldrb	r3, [r3, #3]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	8912      	ldrh	r2, [r2, #8]
 800844a:	fb03 f202 	mul.w	r2, r3, r2
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	611a      	str	r2, [r3, #16]
 8008452:	e003      	b.n	800845c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008466:	04d9      	lsls	r1, r3, #19
 8008468:	4b63      	ldr	r3, [pc, #396]	; (80085f8 <USB_HC_StartXfer+0x280>)
 800846a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800846c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	7a9b      	ldrb	r3, [r3, #10]
 8008472:	075b      	lsls	r3, r3, #29
 8008474:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	0148      	lsls	r0, r1, #5
 800847c:	6a39      	ldr	r1, [r7, #32]
 800847e:	4401      	add	r1, r0
 8008480:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008484:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008486:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	68d9      	ldr	r1, [r3, #12]
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849e:	460a      	mov	r2, r1
 80084a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf0c      	ite	eq
 80084b2:	2301      	moveq	r3, #1
 80084b4:	2300      	movne	r3, #0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	7e7b      	ldrb	r3, [r7, #25]
 80084ea:	075b      	lsls	r3, r3, #29
 80084ec:	69f9      	ldr	r1, [r7, #28]
 80084ee:	0148      	lsls	r0, r1, #5
 80084f0:	6a39      	ldr	r1, [r7, #32]
 80084f2:	4401      	add	r1, r0
 80084f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008512:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e003      	b.n	800852e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800852c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008534:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	461a      	mov	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	e04e      	b.n	80085f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d149      	bne.n	80085ee <USB_HC_StartXfer+0x276>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d045      	beq.n	80085ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	79db      	ldrb	r3, [r3, #7]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d830      	bhi.n	80085cc <USB_HC_StartXfer+0x254>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <USB_HC_StartXfer+0x1f8>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008581 	.word	0x08008581
 8008574:	080085a5 	.word	0x080085a5
 8008578:	08008581 	.word	0x08008581
 800857c:	080085a5 	.word	0x080085a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	3303      	adds	r3, #3
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800858a:	8afa      	ldrh	r2, [r7, #22]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	b29b      	uxth	r3, r3
 8008592:	429a      	cmp	r2, r3
 8008594:	d91c      	bls.n	80085d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80085a2:	e015      	b.n	80085d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	3303      	adds	r3, #3
 80085aa:	089b      	lsrs	r3, r3, #2
 80085ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80085ae:	8afa      	ldrh	r2, [r7, #22]
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d90a      	bls.n	80085d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80085ca:	e003      	b.n	80085d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80085cc:	bf00      	nop
 80085ce:	e002      	b.n	80085d6 <USB_HC_StartXfer+0x25e>
        break;
 80085d0:	bf00      	nop
 80085d2:	e000      	b.n	80085d6 <USB_HC_StartXfer+0x25e>
        break;
 80085d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	68d9      	ldr	r1, [r3, #12]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	785a      	ldrb	r2, [r3, #1]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2000      	movs	r0, #0
 80085e6:	9000      	str	r0, [sp, #0]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff fb31 	bl	8007c50 <USB_WritePacket>
  }

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3728      	adds	r7, #40	; 0x28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	1ff80000 	.word	0x1ff80000

080085fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	b29b      	uxth	r3, r3
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800861e:	b480      	push	{r7}
 8008620:	b089      	sub	sp, #36	; 0x24
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	0c9b      	lsrs	r3, r3, #18
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	0fdb      	lsrs	r3, r3, #31
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b20      	cmp	r3, #32
 800866c:	d104      	bne.n	8008678 <USB_HC_Halt+0x5a>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e0c8      	b.n	800880a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <USB_HC_Halt+0x66>
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d163      	bne.n	800874c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	4413      	add	r3, r2
 800868c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	440a      	add	r2, r1
 800869a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800869e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 80ab 	bne.w	8008808 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d133      	bne.n	8008726 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800870a:	d81d      	bhi.n	8008748 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800871e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008722:	d0ec      	beq.n	80086fe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008724:	e070      	b.n	8008808 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	440a      	add	r2, r1
 800873c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008744:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008746:	e05f      	b.n	8008808 <USB_HC_Halt+0x1ea>
            break;
 8008748:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800874a:	e05d      	b.n	8008808 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	440a      	add	r2, r1
 8008762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d133      	bne.n	80087e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	440a      	add	r2, r1
 8008792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800879a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087c8:	d81d      	bhi.n	8008806 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e0:	d0ec      	beq.n	80087bc <USB_HC_Halt+0x19e>
 80087e2:	e011      	b.n	8008808 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	e000      	b.n	8008808 <USB_HC_Halt+0x1ea>
          break;
 8008806:	bf00      	nop
    }
  }

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3724      	adds	r7, #36	; 0x24
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
	...

08008818 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800882c:	2301      	movs	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	04da      	lsls	r2, r3, #19
 8008834:	4b15      	ldr	r3, [pc, #84]	; (800888c <USB_DoPing+0x74>)
 8008836:	4013      	ands	r3, r2
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	0151      	lsls	r1, r2, #5
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	440a      	add	r2, r1
 8008840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008848:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	4413      	add	r3, r2
 8008852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008860:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008868:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	461a      	mov	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	1ff80000 	.word	0x1ff80000

08008890 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff f911 	bl	8007acc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088aa:	2110      	movs	r1, #16
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff f96b 	bl	8007b88 <USB_FlushTxFifo>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff f997 	bl	8007bf0 <USB_FlushRxFifo>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	e01f      	b.n	8008912 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	461a      	mov	r2, r3
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	3301      	adds	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d9dc      	bls.n	80088d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e034      	b.n	8008988 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008934:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800893c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008944:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008952:	461a      	mov	r2, r3
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008964:	d80c      	bhi.n	8008980 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800897c:	d0ec      	beq.n	8008958 <USB_StopHost+0xc8>
 800897e:	e000      	b.n	8008982 <USB_StopHost+0xf2>
        break;
 8008980:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	3301      	adds	r3, #1
 8008986:	61bb      	str	r3, [r7, #24]
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b0f      	cmp	r3, #15
 800898c:	d9c7      	bls.n	800891e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008994:	461a      	mov	r2, r3
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff f880 	bl	8007aaa <USB_EnableGlobalInt>

  return ret;
 80089aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b089      	sub	sp, #36	; 0x24
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80089bc:	2301      	movs	r3, #1
 80089be:	2202      	movs	r2, #2
 80089c0:	2102      	movs	r1, #2
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc66 	bl	8009294 <USBH_FindInterface>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2bff      	cmp	r3, #255	; 0xff
 80089d0:	d002      	beq.n	80089d8 <USBH_CDC_InterfaceInit+0x24>
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d901      	bls.n	80089dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089d8:	2302      	movs	r3, #2
 80089da:	e13d      	b.n	8008c58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fc3b 	bl	800925c <USBH_SelectInterface>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089f0:	2302      	movs	r3, #2
 80089f2:	e131      	b.n	8008c58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80089fa:	2050      	movs	r0, #80	; 0x50
 80089fc:	f002 fafa 	bl	800aff4 <malloc>
 8008a00:	4603      	mov	r3, r0
 8008a02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a14:	2302      	movs	r3, #2
 8008a16:	e11f      	b.n	8008c58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a18:	2250      	movs	r2, #80	; 0x50
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f002 faf9 	bl	800b014 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	211a      	movs	r1, #26
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da15      	bge.n	8008a66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	211a      	movs	r1, #26
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	211a      	movs	r1, #26
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a60:	881a      	ldrh	r2, [r3, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 ff2c 	bl	800a8ca <USBH_AllocPipe>
 8008a72:	4603      	mov	r3, r0
 8008a74:	461a      	mov	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7819      	ldrb	r1, [r3, #0]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	7858      	ldrb	r0, [r3, #1]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	8952      	ldrh	r2, [r2, #10]
 8008a92:	9202      	str	r2, [sp, #8]
 8008a94:	2203      	movs	r2, #3
 8008a96:	9201      	str	r2, [sp, #4]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fee4 	bl	800a86c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 f9f3 	bl	800ae98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	210a      	movs	r1, #10
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fbeb 	bl	8009294 <USBH_FindInterface>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	2bff      	cmp	r3, #255	; 0xff
 8008ac6:	d002      	beq.n	8008ace <USBH_CDC_InterfaceInit+0x11a>
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d901      	bls.n	8008ad2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e0c2      	b.n	8008c58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	211a      	movs	r1, #26
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b25b      	sxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da16      	bge.n	8008b18 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	211a      	movs	r1, #26
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	211a      	movs	r1, #26
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b10:	881a      	ldrh	r2, [r3, #0]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	835a      	strh	r2, [r3, #26]
 8008b16:	e015      	b.n	8008b44 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	211a      	movs	r1, #26
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	211a      	movs	r1, #26
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b3e:	881a      	ldrh	r2, [r3, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	211a      	movs	r1, #26
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	4413      	add	r3, r2
 8008b50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b25b      	sxtb	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da16      	bge.n	8008b8a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	211a      	movs	r1, #26
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b6c:	781a      	ldrb	r2, [r3, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	211a      	movs	r1, #26
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b82:	881a      	ldrh	r2, [r3, #0]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	835a      	strh	r2, [r3, #26]
 8008b88:	e015      	b.n	8008bb6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	211a      	movs	r1, #26
 8008b90:	fb01 f303 	mul.w	r3, r1, r3
 8008b94:	4413      	add	r3, r2
 8008b96:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	211a      	movs	r1, #26
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bb0:	881a      	ldrh	r2, [r3, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	7b9b      	ldrb	r3, [r3, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 fe84 	bl	800a8ca <USBH_AllocPipe>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	7bdb      	ldrb	r3, [r3, #15]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fe7a 	bl	800a8ca <USBH_AllocPipe>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	7b59      	ldrb	r1, [r3, #13]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7b98      	ldrb	r0, [r3, #14]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	8b12      	ldrh	r2, [r2, #24]
 8008bf6:	9202      	str	r2, [sp, #8]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	9201      	str	r2, [sp, #4]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	4623      	mov	r3, r4
 8008c00:	4602      	mov	r2, r0
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fe32 	bl	800a86c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	7b19      	ldrb	r1, [r3, #12]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	7bd8      	ldrb	r0, [r3, #15]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	8b52      	ldrh	r2, [r2, #26]
 8008c20:	9202      	str	r2, [sp, #8]
 8008c22:	2202      	movs	r2, #2
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	4623      	mov	r3, r4
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fe1d 	bl	800a86c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	7b5b      	ldrb	r3, [r3, #13]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f002 f928 	bl	800ae98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	7b1b      	ldrb	r3, [r3, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 f921 	bl	800ae98 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd90      	pop	{r4, r7, pc}

08008c60 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fe12 	bl	800a8aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 fe3d 	bl	800a90c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	7b1b      	ldrb	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00e      	beq.n	8008cbe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	7b1b      	ldrb	r3, [r3, #12]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fdff 	bl	800a8aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	7b1b      	ldrb	r3, [r3, #12]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fe2a 	bl	800a90c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	7b5b      	ldrb	r3, [r3, #13]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	7b5b      	ldrb	r3, [r3, #13]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fdec 	bl	800a8aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7b5b      	ldrb	r3, [r3, #13]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 fe17 	bl	800a90c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f002 f983 	bl	800b004 <free>
    phost->pActiveClass->pData = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d04:	2200      	movs	r2, #0
 8008d06:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3340      	adds	r3, #64	; 0x40
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f8b1 	bl	8008e92 <GetLineCoding>
 8008d30:	4603      	mov	r3, r0
 8008d32:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d40:	2102      	movs	r1, #2
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d46:	7afb      	ldrb	r3, [r7, #11]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d877      	bhi.n	8008e64 <USBH_CDC_Process+0x114>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBH_CDC_Process+0x2c>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008d91 	.word	0x08008d91
 8008d80:	08008d97 	.word	0x08008d97
 8008d84:	08008dc7 	.word	0x08008dc7
 8008d88:	08008e3b 	.word	0x08008e3b
 8008d8c:	08008e49 	.word	0x08008e49
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
      break;
 8008d94:	e06d      	b.n	8008e72 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f897 	bl	8008ed0 <SetLineCoding>
 8008da2:	4603      	mov	r3, r0
 8008da4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d104      	bne.n	8008db6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008db4:	e058      	b.n	8008e68 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d055      	beq.n	8008e68 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008dc4:	e050      	b.n	8008e68 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	3340      	adds	r3, #64	; 0x40
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f860 	bl	8008e92 <GetLineCoding>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d126      	bne.n	8008e2a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dee:	791b      	ldrb	r3, [r3, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d13b      	bne.n	8008e6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d133      	bne.n	8008e6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d12b      	bne.n	8008e6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d124      	bne.n	8008e6c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f958 	bl	80090d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e28:	e020      	b.n	8008e6c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d01d      	beq.n	8008e6c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2204      	movs	r2, #4
 8008e34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e38:	e018      	b.n	8008e6c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f867 	bl	8008f0e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8da 	bl	8008ffa <CDC_ProcessReception>
      break;
 8008e46:	e014      	b.n	8008e72 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 ffef 	bl	8009e2e <USBH_ClrFeature>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008e62:	e005      	b.n	8008e70 <USBH_CDC_Process+0x120>

    default:
      break;
 8008e64:	bf00      	nop
 8008e66:	e004      	b.n	8008e72 <USBH_CDC_Process+0x122>
      break;
 8008e68:	bf00      	nop
 8008e6a:	e002      	b.n	8008e72 <USBH_CDC_Process+0x122>
      break;
 8008e6c:	bf00      	nop
 8008e6e:	e000      	b.n	8008e72 <USBH_CDC_Process+0x122>
      break;
 8008e70:	bf00      	nop

  }

  return status;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	22a1      	movs	r2, #161	; 0xa1
 8008ea0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2221      	movs	r2, #33	; 0x21
 8008ea6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2207      	movs	r2, #7
 8008eb8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2207      	movs	r2, #7
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 fa81 	bl	800a3c8 <USBH_CtlReq>
 8008ec6:	4603      	mov	r3, r0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2221      	movs	r2, #33	; 0x21
 8008ede:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2207      	movs	r2, #7
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 fa62 	bl	800a3c8 <USBH_CtlReq>
 8008f04:	4603      	mov	r3, r0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b086      	sub	sp, #24
 8008f12:	af02      	add	r7, sp, #8
 8008f14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d002      	beq.n	8008f34 <CDC_ProcessTransmission+0x26>
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d023      	beq.n	8008f7a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f32:	e05e      	b.n	8008ff2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	8b12      	ldrh	r2, [r2, #24]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d90b      	bls.n	8008f58 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	69d9      	ldr	r1, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8b1a      	ldrh	r2, [r3, #24]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7b5b      	ldrb	r3, [r3, #13]
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	9000      	str	r0, [sp, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fc48 	bl	800a7e6 <USBH_BulkSendData>
 8008f56:	e00b      	b.n	8008f70 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	7b5b      	ldrb	r3, [r3, #13]
 8008f66:	2001      	movs	r0, #1
 8008f68:	9000      	str	r0, [sp, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 fc3b 	bl	800a7e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008f78:	e03b      	b.n	8008ff2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	7b5b      	ldrb	r3, [r3, #13]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 ff5f 	bl	800ae44 <USBH_LL_GetURBState>
 8008f86:	4603      	mov	r3, r0
 8008f88:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d128      	bne.n	8008fe2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	8b12      	ldrh	r2, [r2, #24]
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d90e      	bls.n	8008fba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	8b12      	ldrh	r2, [r2, #24]
 8008fa4:	1a9a      	subs	r2, r3, r2
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	8b12      	ldrh	r2, [r2, #24]
 8008fb2:	441a      	add	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	61da      	str	r2, [r3, #28]
 8008fb8:	e002      	b.n	8008fc0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d004      	beq.n	8008fd2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fd0:	e00e      	b.n	8008ff0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f868 	bl	80090b0 <USBH_CDC_TransmitCallback>
      break;
 8008fe0:	e006      	b.n	8008ff0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d103      	bne.n	8008ff0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ff0:	bf00      	nop
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b086      	sub	sp, #24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800900c:	2300      	movs	r3, #0
 800900e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009016:	2b03      	cmp	r3, #3
 8009018:	d002      	beq.n	8009020 <CDC_ProcessReception+0x26>
 800901a:	2b04      	cmp	r3, #4
 800901c:	d00e      	beq.n	800903c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800901e:	e043      	b.n	80090a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6a19      	ldr	r1, [r3, #32]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	8b5a      	ldrh	r2, [r3, #26]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	7b1b      	ldrb	r3, [r3, #12]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fbff 	bl	800a830 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2204      	movs	r2, #4
 8009036:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800903a:	e035      	b.n	80090a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	7b1b      	ldrb	r3, [r3, #12]
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fefe 	bl	800ae44 <USBH_LL_GetURBState>
 8009048:	4603      	mov	r3, r0
 800904a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800904c:	7cfb      	ldrb	r3, [r7, #19]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d129      	bne.n	80090a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	7b1b      	ldrb	r3, [r3, #12]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fe61 	bl	800ad20 <USBH_LL_GetLastXferSize>
 800905e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	429a      	cmp	r2, r3
 8009068:	d016      	beq.n	8009098 <CDC_ProcessReception+0x9e>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	8b5b      	ldrh	r3, [r3, #26]
 800906e:	461a      	mov	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4293      	cmp	r3, r2
 8009074:	d910      	bls.n	8009098 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1ad2      	subs	r2, r2, r3
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	6a1a      	ldr	r2, [r3, #32]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	441a      	add	r2, r3
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2203      	movs	r2, #3
 8009092:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009096:	e006      	b.n	80090a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f80f 	bl	80090c4 <USBH_CDC_ReceiveCallback>
      break;
 80090a6:	bf00      	nop
  }
}
 80090a8:	bf00      	nop
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009100:	2302      	movs	r3, #2
 8009102:	e029      	b.n	8009158 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	79fa      	ldrb	r2, [r7, #7]
 8009108:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f81f 	bl	8009160 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f001 fd31 	bl	800abb8 <USBH_LL_Init>

  return USBH_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	e009      	b.n	8009186 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	33e0      	adds	r3, #224	; 0xe0
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	2200      	movs	r2, #0
 800917e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b0f      	cmp	r3, #15
 800918a:	d9f2      	bls.n	8009172 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	e009      	b.n	80091a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ac:	d3f1      	bcc.n	8009192 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2240      	movs	r2, #64	; 0x40
 80091d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d016      	beq.n	800924a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800922c:	1c59      	adds	r1, r3, #1
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	33de      	adds	r3, #222	; 0xde
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
 8009242:	e004      	b.n	800924e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009244:	2302      	movs	r3, #2
 8009246:	73fb      	strb	r3, [r7, #15]
 8009248:	e001      	b.n	800924e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800924a:	2302      	movs	r3, #2
 800924c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	429a      	cmp	r2, r3
 8009276:	d204      	bcs.n	8009282 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009280:	e001      	b.n	8009286 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	4608      	mov	r0, r1
 800929e:	4611      	mov	r1, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	70fb      	strb	r3, [r7, #3]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70bb      	strb	r3, [r7, #2]
 80092aa:	4613      	mov	r3, r2
 80092ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80092bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80092be:	e025      	b.n	800930c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	221a      	movs	r2, #26
 80092c4:	fb02 f303 	mul.w	r3, r2, r3
 80092c8:	3308      	adds	r3, #8
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	3302      	adds	r3, #2
 80092d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	795b      	ldrb	r3, [r3, #5]
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d002      	beq.n	80092e2 <USBH_FindInterface+0x4e>
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2bff      	cmp	r3, #255	; 0xff
 80092e0:	d111      	bne.n	8009306 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80092e6:	78ba      	ldrb	r2, [r7, #2]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d002      	beq.n	80092f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092ec:	78bb      	ldrb	r3, [r7, #2]
 80092ee:	2bff      	cmp	r3, #255	; 0xff
 80092f0:	d109      	bne.n	8009306 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80092f6:	787a      	ldrb	r2, [r7, #1]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d002      	beq.n	8009302 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80092fc:	787b      	ldrb	r3, [r7, #1]
 80092fe:	2bff      	cmp	r3, #255	; 0xff
 8009300:	d101      	bne.n	8009306 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	e006      	b.n	8009314 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	3301      	adds	r3, #1
 800930a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d9d6      	bls.n	80092c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009312:	23ff      	movs	r3, #255	; 0xff
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fc81 	bl	800ac30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fd9a 	bl	800ae6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af04      	add	r7, sp, #16
 8009346:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009348:	2302      	movs	r3, #2
 800934a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b01      	cmp	r3, #1
 800935a:	d102      	bne.n	8009362 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2203      	movs	r2, #3
 8009360:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b0b      	cmp	r3, #11
 800936a:	f200 81be 	bhi.w	80096ea <USBH_Process+0x3aa>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <USBH_Process+0x34>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093a5 	.word	0x080093a5
 8009378:	080093d7 	.word	0x080093d7
 800937c:	0800943f 	.word	0x0800943f
 8009380:	08009685 	.word	0x08009685
 8009384:	080096eb 	.word	0x080096eb
 8009388:	080094e3 	.word	0x080094e3
 800938c:	0800962b 	.word	0x0800962b
 8009390:	08009519 	.word	0x08009519
 8009394:	08009539 	.word	0x08009539
 8009398:	08009559 	.word	0x08009559
 800939c:	0800959d 	.word	0x0800959d
 80093a0:	0800966d 	.word	0x0800966d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 819e 	beq.w	80096ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80093b8:	20c8      	movs	r0, #200	; 0xc8
 80093ba:	f001 fd9d 	bl	800aef8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fc93 	bl	800acea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80093d4:	e18b      	b.n	80096ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d107      	bne.n	80093f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093ee:	e18d      	b.n	800970c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80093f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093fa:	d914      	bls.n	8009426 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009402:	3301      	adds	r3, #1
 8009404:	b2da      	uxtb	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009412:	2b03      	cmp	r3, #3
 8009414:	d903      	bls.n	800941e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	220d      	movs	r2, #13
 800941a:	701a      	strb	r2, [r3, #0]
      break;
 800941c:	e176      	b.n	800970c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
      break;
 8009424:	e172      	b.n	800970c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800942c:	f103 020a 	add.w	r2, r3, #10
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009436:	200a      	movs	r0, #10
 8009438:	f001 fd5e 	bl	800aef8 <USBH_Delay>
      break;
 800943c:	e166      	b.n	800970c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800944e:	2104      	movs	r1, #4
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009454:	2064      	movs	r0, #100	; 0x64
 8009456:	f001 fd4f 	bl	800aef8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fc1e 	bl	800ac9c <USBH_LL_GetSpeed>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2205      	movs	r2, #5
 800946e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fa29 	bl	800a8ca <USBH_AllocPipe>
 8009478:	4603      	mov	r3, r0
 800947a:	461a      	mov	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009480:	2180      	movs	r1, #128	; 0x80
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 fa21 	bl	800a8ca <USBH_AllocPipe>
 8009488:	4603      	mov	r3, r0
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	7919      	ldrb	r1, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80094a4:	b292      	uxth	r2, r2
 80094a6:	9202      	str	r2, [sp, #8]
 80094a8:	2200      	movs	r2, #0
 80094aa:	9201      	str	r2, [sp, #4]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	4603      	mov	r3, r0
 80094b0:	2280      	movs	r2, #128	; 0x80
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 f9da 	bl	800a86c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	7959      	ldrb	r1, [r3, #5]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80094cc:	b292      	uxth	r2, r2
 80094ce:	9202      	str	r2, [sp, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	9201      	str	r2, [sp, #4]
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	4603      	mov	r3, r0
 80094d8:	2200      	movs	r2, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 f9c6 	bl	800a86c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094e0:	e114      	b.n	800970c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f918 	bl	8009718 <USBH_HandleEnum>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 80fe 	bne.w	80096f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009504:	2b01      	cmp	r3, #1
 8009506:	d103      	bne.n	8009510 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2208      	movs	r2, #8
 800950c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800950e:	e0f0      	b.n	80096f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2207      	movs	r2, #7
 8009514:	701a      	strb	r2, [r3, #0]
      break;
 8009516:	e0ec      	b.n	80096f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80e9 	beq.w	80096f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800952a:	2101      	movs	r1, #1
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2208      	movs	r2, #8
 8009534:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009536:	e0de      	b.n	80096f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800953e:	b29b      	uxth	r3, r3
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc2c 	bl	8009da0 <USBH_SetCfg>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	f040 80d5 	bne.w	80096fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2209      	movs	r2, #9
 8009554:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009556:	e0d0      	b.n	80096fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d016      	beq.n	8009594 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009566:	2101      	movs	r1, #1
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc3c 	bl	8009de6 <USBH_SetFeature>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	220a      	movs	r2, #10
 800957e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009580:	e0bd      	b.n	80096fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	f040 80b9 	bne.w	80096fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	220a      	movs	r2, #10
 8009590:	701a      	strb	r2, [r3, #0]
      break;
 8009592:	e0b4      	b.n	80096fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	220a      	movs	r2, #10
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e0b0      	b.n	80096fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80ad 	beq.w	8009702 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	e016      	b.n	80095e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80095b6:	7bfa      	ldrb	r2, [r7, #15]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	32de      	adds	r2, #222	; 0xde
 80095bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c0:	791a      	ldrb	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d108      	bne.n	80095de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80095cc:	7bfa      	ldrb	r2, [r7, #15]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	32de      	adds	r2, #222	; 0xde
 80095d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80095dc:	e005      	b.n	80095ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	3301      	adds	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0e5      	beq.n	80095b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d016      	beq.n	8009622 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d109      	bne.n	800961a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2206      	movs	r2, #6
 800960a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009612:	2103      	movs	r1, #3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009618:	e073      	b.n	8009702 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	220d      	movs	r2, #13
 800961e:	701a      	strb	r2, [r3, #0]
      break;
 8009620:	e06f      	b.n	8009702 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	220d      	movs	r2, #13
 8009626:	701a      	strb	r2, [r3, #0]
      break;
 8009628:	e06b      	b.n	8009702 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d017      	beq.n	8009664 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	4798      	blx	r3
 8009640:	4603      	mov	r3, r0
 8009642:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	220b      	movs	r2, #11
 8009650:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009652:	e058      	b.n	8009706 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d154      	bne.n	8009706 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	220d      	movs	r2, #13
 8009660:	701a      	strb	r2, [r3, #0]
      break;
 8009662:	e050      	b.n	8009706 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	220d      	movs	r2, #13
 8009668:	701a      	strb	r2, [r3, #0]
      break;
 800966a:	e04c      	b.n	8009706 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d049      	beq.n	800970a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
      }
      break;
 8009682:	e042      	b.n	800970a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fd67 	bl	8009160 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096c0:	2105      	movs	r1, #5
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d107      	bne.n	80096e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff fe20 	bl	8009320 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096e0:	e014      	b.n	800970c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 faa4 	bl	800ac30 <USBH_LL_Start>
      break;
 80096e8:	e010      	b.n	800970c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80096ea:	bf00      	nop
 80096ec:	e00e      	b.n	800970c <USBH_Process+0x3cc>
      break;
 80096ee:	bf00      	nop
 80096f0:	e00c      	b.n	800970c <USBH_Process+0x3cc>
      break;
 80096f2:	bf00      	nop
 80096f4:	e00a      	b.n	800970c <USBH_Process+0x3cc>
    break;
 80096f6:	bf00      	nop
 80096f8:	e008      	b.n	800970c <USBH_Process+0x3cc>
      break;
 80096fa:	bf00      	nop
 80096fc:	e006      	b.n	800970c <USBH_Process+0x3cc>
      break;
 80096fe:	bf00      	nop
 8009700:	e004      	b.n	800970c <USBH_Process+0x3cc>
      break;
 8009702:	bf00      	nop
 8009704:	e002      	b.n	800970c <USBH_Process+0x3cc>
      break;
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <USBH_Process+0x3cc>
      break;
 800970a:	bf00      	nop
  }
  return USBH_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop

08009718 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af04      	add	r7, sp, #16
 800971e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009724:	2301      	movs	r3, #1
 8009726:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b07      	cmp	r3, #7
 800972e:	f200 81c1 	bhi.w	8009ab4 <USBH_HandleEnum+0x39c>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <USBH_HandleEnum+0x20>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009759 	.word	0x08009759
 800973c:	08009817 	.word	0x08009817
 8009740:	08009881 	.word	0x08009881
 8009744:	0800990f 	.word	0x0800990f
 8009748:	08009979 	.word	0x08009979
 800974c:	080099e9 	.word	0x080099e9
 8009750:	08009a2f 	.word	0x08009a2f
 8009754:	08009a75 	.word	0x08009a75
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009758:	2108      	movs	r1, #8
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa50 	bl	8009c00 <USBH_Get_DevDesc>
 8009760:	4603      	mov	r3, r0
 8009762:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d130      	bne.n	80097cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7919      	ldrb	r1, [r3, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800978e:	b292      	uxth	r2, r2
 8009790:	9202      	str	r2, [sp, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	9201      	str	r2, [sp, #4]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4603      	mov	r3, r0
 800979a:	2280      	movs	r2, #128	; 0x80
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 f865 	bl	800a86c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7959      	ldrb	r1, [r3, #5]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097b6:	b292      	uxth	r2, r2
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	9201      	str	r2, [sp, #4]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4603      	mov	r3, r0
 80097c2:	2200      	movs	r2, #0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f851 	bl	800a86c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80097ca:	e175      	b.n	8009ab8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	f040 8172 	bne.w	8009ab8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097da:	3301      	adds	r3, #1
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d903      	bls.n	80097f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	220d      	movs	r2, #13
 80097f2:	701a      	strb	r2, [r3, #0]
      break;
 80097f4:	e160      	b.n	8009ab8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	795b      	ldrb	r3, [r3, #5]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f885 	bl	800a90c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	791b      	ldrb	r3, [r3, #4]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f87f 	bl	800a90c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
      break;
 8009814:	e150      	b.n	8009ab8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009816:	2112      	movs	r1, #18
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f9f1 	bl	8009c00 <USBH_Get_DevDesc>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800982e:	e145      	b.n	8009abc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	2b03      	cmp	r3, #3
 8009834:	f040 8142 	bne.w	8009abc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800983e:	3301      	adds	r3, #1
 8009840:	b2da      	uxtb	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800984e:	2b03      	cmp	r3, #3
 8009850:	d903      	bls.n	800985a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	220d      	movs	r2, #13
 8009856:	701a      	strb	r2, [r3, #0]
      break;
 8009858:	e130      	b.n	8009abc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	795b      	ldrb	r3, [r3, #5]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 f853 	bl	800a90c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	791b      	ldrb	r3, [r3, #4]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 f84d 	bl	800a90c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	701a      	strb	r2, [r3, #0]
      break;
 800987e:	e11d      	b.n	8009abc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009880:	2101      	movs	r1, #1
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa68 	bl	8009d58 <USBH_SetAddress>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d132      	bne.n	80098f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009892:	2002      	movs	r0, #2
 8009894:	f001 fb30 	bl	800aef8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2203      	movs	r2, #3
 80098a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7919      	ldrb	r1, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80098ba:	b292      	uxth	r2, r2
 80098bc:	9202      	str	r2, [sp, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	4603      	mov	r3, r0
 80098c6:	2280      	movs	r2, #128	; 0x80
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 ffcf 	bl	800a86c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7959      	ldrb	r1, [r3, #5]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098e2:	b292      	uxth	r2, r2
 80098e4:	9202      	str	r2, [sp, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	9201      	str	r2, [sp, #4]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4603      	mov	r3, r0
 80098ee:	2200      	movs	r2, #0
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 ffbb 	bl	800a86c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80098f6:	e0e3      	b.n	8009ac0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	f040 80e0 	bne.w	8009ac0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	220d      	movs	r2, #13
 8009904:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	705a      	strb	r2, [r3, #1]
      break;
 800990c:	e0d8      	b.n	8009ac0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800990e:	2109      	movs	r1, #9
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f99d 	bl	8009c50 <USBH_Get_CfgDesc>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d103      	bne.n	8009928 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009926:	e0cd      	b.n	8009ac4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b03      	cmp	r3, #3
 800992c:	f040 80ca 	bne.w	8009ac4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009936:	3301      	adds	r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009946:	2b03      	cmp	r3, #3
 8009948:	d903      	bls.n	8009952 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	220d      	movs	r2, #13
 800994e:	701a      	strb	r2, [r3, #0]
      break;
 8009950:	e0b8      	b.n	8009ac4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	795b      	ldrb	r3, [r3, #5]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 ffd7 	bl	800a90c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	791b      	ldrb	r3, [r3, #4]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 ffd1 	bl	800a90c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
      break;
 8009976:	e0a5      	b.n	8009ac4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f965 	bl	8009c50 <USBH_Get_CfgDesc>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2205      	movs	r2, #5
 8009994:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009996:	e097      	b.n	8009ac8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b03      	cmp	r3, #3
 800999c:	f040 8094 	bne.w	8009ac8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099a6:	3301      	adds	r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d903      	bls.n	80099c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220d      	movs	r2, #13
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e082      	b.n	8009ac8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	795b      	ldrb	r3, [r3, #5]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 ff9f 	bl	800a90c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ff99 	bl	800a90c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
      break;
 80099e6:	e06f      	b.n	8009ac8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d019      	beq.n	8009a26 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80099fe:	23ff      	movs	r3, #255	; 0xff
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f949 	bl	8009c98 <USBH_Get_StringDesc>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2206      	movs	r2, #6
 8009a14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a16:	e059      	b.n	8009acc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d156      	bne.n	8009acc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2206      	movs	r2, #6
 8009a22:	705a      	strb	r2, [r3, #1]
      break;
 8009a24:	e052      	b.n	8009acc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2206      	movs	r2, #6
 8009a2a:	705a      	strb	r2, [r3, #1]
      break;
 8009a2c:	e04e      	b.n	8009acc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d019      	beq.n	8009a6c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a44:	23ff      	movs	r3, #255	; 0xff
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f926 	bl	8009c98 <USBH_Get_StringDesc>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2207      	movs	r2, #7
 8009a5a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a5c:	e038      	b.n	8009ad0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d135      	bne.n	8009ad0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2207      	movs	r2, #7
 8009a68:	705a      	strb	r2, [r3, #1]
      break;
 8009a6a:	e031      	b.n	8009ad0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2207      	movs	r2, #7
 8009a70:	705a      	strb	r2, [r3, #1]
      break;
 8009a72:	e02d      	b.n	8009ad0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d017      	beq.n	8009aae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a8a:	23ff      	movs	r3, #255	; 0xff
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f903 	bl	8009c98 <USBH_Get_StringDesc>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009aa0:	e018      	b.n	8009ad4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d115      	bne.n	8009ad4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009aac:	e012      	b.n	8009ad4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab2:	e00f      	b.n	8009ad4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009ab4:	bf00      	nop
 8009ab6:	e00e      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ab8:	bf00      	nop
 8009aba:	e00c      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009abc:	bf00      	nop
 8009abe:	e00a      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ac0:	bf00      	nop
 8009ac2:	e008      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ac4:	bf00      	nop
 8009ac6:	e006      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e004      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009acc:	bf00      	nop
 8009ace:	e002      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ad0:	bf00      	nop
 8009ad2:	e000      	b.n	8009ad6 <USBH_HandleEnum+0x3be>
      break;
 8009ad4:	bf00      	nop
  }
  return Status;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f804 	bl	8009b22 <USBH_HandleSof>
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b0b      	cmp	r3, #11
 8009b32:	d10a      	bne.n	8009b4a <USBH_HandleSof+0x28>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
  }
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009b62:	bf00      	nop
}
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009b7e:	bf00      	nop
}
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 f844 	bl	800ac66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	791b      	ldrb	r3, [r3, #4]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fe91 	bl	800a90c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	795b      	ldrb	r3, [r3, #5]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fe8b 	bl	800a90c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c1e:	2100      	movs	r1, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f864 	bl	8009cee <USBH_GetDescriptor>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	b292      	uxth	r2, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	f000 f918 	bl	8009e76 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	331c      	adds	r3, #28
 8009c60:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009c62:	887b      	ldrh	r3, [r7, #2]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f83d 	bl	8009cee <USBH_GetDescriptor>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009c7e:	887b      	ldrh	r3, [r7, #2]
 8009c80:	461a      	mov	r2, r3
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f987 	bl	8009f98 <USBH_ParseCfgDesc>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	607a      	str	r2, [r7, #4]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	72fb      	strb	r3, [r7, #11]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009cb4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009cbc:	893b      	ldrh	r3, [r7, #8]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f812 	bl	8009cee <USBH_GetDescriptor>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d107      	bne.n	8009ce4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cda:	893a      	ldrh	r2, [r7, #8]
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fb24 	bl	800a32c <USBH_ParseStringDesc>
  }

  return status;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	72fb      	strb	r3, [r7, #11]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	789b      	ldrb	r3, [r3, #2]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d11c      	bne.n	8009d42 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2206      	movs	r2, #6
 8009d18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	893a      	ldrh	r2, [r7, #8]
 8009d1e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009d20:	893b      	ldrh	r3, [r7, #8]
 8009d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d2a:	d104      	bne.n	8009d36 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f240 4209 	movw	r2, #1033	; 0x409
 8009d32:	829a      	strh	r2, [r3, #20]
 8009d34:	e002      	b.n	8009d3c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8b3a      	ldrh	r2, [r7, #24]
 8009d40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009d42:	8b3b      	ldrh	r3, [r7, #24]
 8009d44:	461a      	mov	r2, r3
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 fb3d 	bl	800a3c8 <USBH_CtlReq>
 8009d4e:	4603      	mov	r3, r0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	789b      	ldrb	r3, [r3, #2]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d10f      	bne.n	8009d8c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2205      	movs	r2, #5
 8009d76:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2100      	movs	r1, #0
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fb19 	bl	800a3c8 <USBH_CtlReq>
 8009d96:	4603      	mov	r3, r0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	789b      	ldrb	r3, [r3, #2]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d10e      	bne.n	8009dd2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2209      	movs	r2, #9
 8009dbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	887a      	ldrh	r2, [r7, #2]
 8009dc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 faf6 	bl	800a3c8 <USBH_CtlReq>
 8009ddc:	4603      	mov	r3, r0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	789b      	ldrb	r3, [r3, #2]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10f      	bne.n	8009e1a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2203      	movs	r2, #3
 8009e04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fad2 	bl	800a3c8 <USBH_CtlReq>
 8009e24:	4603      	mov	r3, r0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	789b      	ldrb	r3, [r3, #2]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d10f      	bne.n	8009e62 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2202      	movs	r2, #2
 8009e46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 faae 	bl	800a3c8 <USBH_CtlReq>
 8009e6c:	4603      	mov	r3, r0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	4613      	mov	r3, r2
 8009e82:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	781a      	ldrb	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	785a      	ldrb	r2, [r3, #1]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3302      	adds	r3, #2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	3303      	adds	r3, #3
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	791a      	ldrb	r2, [r3, #4]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	795a      	ldrb	r2, [r3, #5]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	799a      	ldrb	r2, [r3, #6]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	79da      	ldrb	r2, [r3, #7]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	79db      	ldrb	r3, [r3, #7]
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	dc11      	bgt.n	8009efc <USBH_ParseDevDesc+0x86>
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	db16      	blt.n	8009f0a <USBH_ParseDevDesc+0x94>
 8009edc:	3b08      	subs	r3, #8
 8009ede:	2201      	movs	r2, #1
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <USBH_ParseDevDesc+0x8a>
 8009efa:	e006      	b.n	8009f0a <USBH_ParseDevDesc+0x94>
 8009efc:	2b40      	cmp	r3, #64	; 0x40
 8009efe:	d104      	bne.n	8009f0a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	79da      	ldrb	r2, [r3, #7]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	71da      	strb	r2, [r3, #7]
      break;
 8009f08:	e003      	b.n	8009f12 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2240      	movs	r2, #64	; 0x40
 8009f0e:	71da      	strb	r2, [r3, #7]
      break;
 8009f10:	bf00      	nop
  }

  if (length > 8U)
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d939      	bls.n	8009f8c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	3309      	adds	r3, #9
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	330a      	adds	r3, #10
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	330b      	adds	r3, #11
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	330c      	adds	r3, #12
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	330d      	adds	r3, #13
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	021b      	lsls	r3, r3, #8
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4313      	orrs	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	7b9a      	ldrb	r2, [r3, #14]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	7bda      	ldrb	r2, [r3, #15]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	7c1a      	ldrb	r2, [r3, #16]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	7c5a      	ldrb	r2, [r3, #17]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	745a      	strb	r2, [r3, #17]
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08c      	sub	sp, #48	; 0x30
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009fac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	781a      	ldrb	r2, [r3, #0]
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	785a      	ldrb	r2, [r3, #1]
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3302      	adds	r3, #2
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	3303      	adds	r3, #3
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	4313      	orrs	r3, r2
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff4:	bf28      	it	cs
 8009ff6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	791a      	ldrb	r2, [r3, #4]
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	795a      	ldrb	r2, [r3, #5]
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	799a      	ldrb	r2, [r3, #6]
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	79da      	ldrb	r2, [r3, #7]
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	7a1a      	ldrb	r2, [r3, #8]
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d002      	beq.n	800a036 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2209      	movs	r2, #9
 800a034:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b09      	cmp	r3, #9
 800a03a:	f240 809d 	bls.w	800a178 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a03e:	2309      	movs	r3, #9
 800a040:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a046:	e081      	b.n	800a14c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a048:	f107 0316 	add.w	r3, r7, #22
 800a04c:	4619      	mov	r1, r3
 800a04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a050:	f000 f99f 	bl	800a392 <USBH_GetNextDesc>
 800a054:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	d176      	bne.n	800a14c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b09      	cmp	r3, #9
 800a064:	d002      	beq.n	800a06c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	2209      	movs	r2, #9
 800a06a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a070:	221a      	movs	r2, #26
 800a072:	fb02 f303 	mul.w	r3, r2, r3
 800a076:	3308      	adds	r3, #8
 800a078:	6a3a      	ldr	r2, [r7, #32]
 800a07a:	4413      	add	r3, r2
 800a07c:	3302      	adds	r3, #2
 800a07e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a082:	69f8      	ldr	r0, [r7, #28]
 800a084:	f000 f87e 	bl	800a184 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a092:	e043      	b.n	800a11c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a094:	f107 0316 	add.w	r3, r7, #22
 800a098:	4619      	mov	r1, r3
 800a09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09c:	f000 f979 	bl	800a392 <USBH_GetNextDesc>
 800a0a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	785b      	ldrb	r3, [r3, #1]
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d138      	bne.n	800a11c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	795b      	ldrb	r3, [r3, #5]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d10f      	bne.n	800a0d2 <USBH_ParseCfgDesc+0x13a>
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	799b      	ldrb	r3, [r3, #6]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d10b      	bne.n	800a0d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	79db      	ldrb	r3, [r3, #7]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10f      	bne.n	800a0e2 <USBH_ParseCfgDesc+0x14a>
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d00b      	beq.n	800a0e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	2209      	movs	r2, #9
 800a0ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0d0:	e007      	b.n	800a0e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b07      	cmp	r3, #7
 800a0d8:	d004      	beq.n	800a0e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	2207      	movs	r2, #7
 800a0de:	701a      	strb	r2, [r3, #0]
 800a0e0:	e000      	b.n	800a0e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	00d2      	lsls	r2, r2, #3
 800a0f0:	211a      	movs	r1, #26
 800a0f2:	fb01 f303 	mul.w	r3, r1, r3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	6a3a      	ldr	r2, [r7, #32]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3304      	adds	r3, #4
 800a100:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a104:	69b9      	ldr	r1, [r7, #24]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f86b 	bl	800a1e2 <USBH_ParseEPDesc>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a116:	3301      	adds	r3, #1
 800a118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	791b      	ldrb	r3, [r3, #4]
 800a120:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a124:	429a      	cmp	r2, r3
 800a126:	d204      	bcs.n	800a132 <USBH_ParseCfgDesc+0x19a>
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	885a      	ldrh	r2, [r3, #2]
 800a12c:	8afb      	ldrh	r3, [r7, #22]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d8b0      	bhi.n	800a094 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	791b      	ldrb	r3, [r3, #4]
 800a136:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d201      	bcs.n	800a142 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a13e:	2303      	movs	r3, #3
 800a140:	e01c      	b.n	800a17c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a146:	3301      	adds	r3, #1
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a150:	2b01      	cmp	r3, #1
 800a152:	d805      	bhi.n	800a160 <USBH_ParseCfgDesc+0x1c8>
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	885a      	ldrh	r2, [r3, #2]
 800a158:	8afb      	ldrh	r3, [r7, #22]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	f63f af74 	bhi.w	800a048 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	791b      	ldrb	r3, [r3, #4]
 800a164:	2b02      	cmp	r3, #2
 800a166:	bf28      	it	cs
 800a168:	2302      	movcs	r3, #2
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a170:	429a      	cmp	r2, r3
 800a172:	d201      	bcs.n	800a178 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a174:	2303      	movs	r3, #3
 800a176:	e001      	b.n	800a17c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3730      	adds	r7, #48	; 0x30
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	785a      	ldrb	r2, [r3, #1]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	789a      	ldrb	r2, [r3, #2]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	78da      	ldrb	r2, [r3, #3]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	791a      	ldrb	r2, [r3, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	795a      	ldrb	r2, [r3, #5]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	799a      	ldrb	r2, [r3, #6]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	79da      	ldrb	r2, [r3, #7]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	7a1a      	ldrb	r2, [r3, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	721a      	strb	r2, [r3, #8]
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b087      	sub	sp, #28
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	785a      	ldrb	r2, [r3, #1]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	789a      	ldrb	r2, [r3, #2]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	78da      	ldrb	r2, [r3, #3]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3304      	adds	r3, #4
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b29a      	uxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3305      	adds	r3, #5
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	b29b      	uxth	r3, r3
 800a226:	4313      	orrs	r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	799a      	ldrb	r2, [r3, #6]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	889b      	ldrh	r3, [r3, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a23e:	2303      	movs	r3, #3
 800a240:	75fb      	strb	r3, [r7, #23]
 800a242:	e033      	b.n	800a2ac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	889b      	ldrh	r3, [r3, #4]
 800a248:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	b29a      	uxth	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	889b      	ldrh	r3, [r3, #4]
 800a25a:	b21a      	sxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3304      	adds	r3, #4
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b299      	uxth	r1, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3305      	adds	r3, #5
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	b29b      	uxth	r3, r3
 800a270:	430b      	orrs	r3, r1
 800a272:	b29b      	uxth	r3, r3
 800a274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d110      	bne.n	800a29e <USBH_ParseEPDesc+0xbc>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	b299      	uxth	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3305      	adds	r3, #5
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	b29b      	uxth	r3, r3
 800a290:	430b      	orrs	r3, r1
 800a292:	b29b      	uxth	r3, r3
 800a294:	b21b      	sxth	r3, r3
 800a296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a29a:	b21b      	sxth	r3, r3
 800a29c:	e001      	b.n	800a2a2 <USBH_ParseEPDesc+0xc0>
 800a29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d116      	bne.n	800a2e4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	78db      	ldrb	r3, [r3, #3]
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d005      	beq.n	800a2ce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	78db      	ldrb	r3, [r3, #3]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d127      	bne.n	800a31e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	799b      	ldrb	r3, [r3, #6]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <USBH_ParseEPDesc+0xfc>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	799b      	ldrb	r3, [r3, #6]
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d91f      	bls.n	800a31e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	75fb      	strb	r3, [r7, #23]
 800a2e2:	e01c      	b.n	800a31e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	78db      	ldrb	r3, [r3, #3]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d10a      	bne.n	800a306 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	799b      	ldrb	r3, [r3, #6]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <USBH_ParseEPDesc+0x11e>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	799b      	ldrb	r3, [r3, #6]
 800a2fc:	2b10      	cmp	r3, #16
 800a2fe:	d90e      	bls.n	800a31e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a300:	2303      	movs	r3, #3
 800a302:	75fb      	strb	r3, [r7, #23]
 800a304:	e00b      	b.n	800a31e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	78db      	ldrb	r3, [r3, #3]
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d105      	bne.n	800a31e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	799b      	ldrb	r3, [r3, #6]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a31a:	2303      	movs	r3, #3
 800a31c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a320:	4618      	mov	r0, r3
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b03      	cmp	r3, #3
 800a342:	d120      	bne.n	800a386 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	1e9a      	subs	r2, r3, #2
 800a34a:	88fb      	ldrh	r3, [r7, #6]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	bf28      	it	cs
 800a350:	4613      	movcs	r3, r2
 800a352:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3302      	adds	r3, #2
 800a358:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a35a:	2300      	movs	r3, #0
 800a35c:	82fb      	strh	r3, [r7, #22]
 800a35e:	e00b      	b.n	800a378 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a360:	8afb      	ldrh	r3, [r7, #22]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3301      	adds	r3, #1
 800a370:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a372:	8afb      	ldrh	r3, [r7, #22]
 800a374:	3302      	adds	r3, #2
 800a376:	82fb      	strh	r3, [r7, #22]
 800a378:	8afa      	ldrh	r2, [r7, #22]
 800a37a:	8abb      	ldrh	r3, [r7, #20]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d3ef      	bcc.n	800a360 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
  }
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	881a      	ldrh	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	789b      	ldrb	r3, [r3, #2]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d002      	beq.n	800a3e8 <USBH_CtlReq+0x20>
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d00f      	beq.n	800a406 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a3e6:	e027      	b.n	800a438 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	88fa      	ldrh	r2, [r7, #6]
 800a3f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a400:	2301      	movs	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
      break;
 800a404:	e018      	b.n	800a438 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 f81c 	bl	800a444 <USBH_HandleControl>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <USBH_CtlReq+0x54>
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d106      	bne.n	800a42a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	761a      	strb	r2, [r3, #24]
      break;
 800a428:	e005      	b.n	800a436 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d102      	bne.n	800a436 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	709a      	strb	r2, [r3, #2]
      break;
 800a436:	bf00      	nop
  }
  return status;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af02      	add	r7, sp, #8
 800a44a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a44c:	2301      	movs	r3, #1
 800a44e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a450:	2300      	movs	r3, #0
 800a452:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7e1b      	ldrb	r3, [r3, #24]
 800a458:	3b01      	subs	r3, #1
 800a45a:	2b0a      	cmp	r3, #10
 800a45c:	f200 8156 	bhi.w	800a70c <USBH_HandleControl+0x2c8>
 800a460:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <USBH_HandleControl+0x24>)
 800a462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a466:	bf00      	nop
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	0800a4af 	.word	0x0800a4af
 800a470:	0800a519 	.word	0x0800a519
 800a474:	0800a53f 	.word	0x0800a53f
 800a478:	0800a577 	.word	0x0800a577
 800a47c:	0800a5a1 	.word	0x0800a5a1
 800a480:	0800a5f3 	.word	0x0800a5f3
 800a484:	0800a615 	.word	0x0800a615
 800a488:	0800a651 	.word	0x0800a651
 800a48c:	0800a677 	.word	0x0800a677
 800a490:	0800a6b5 	.word	0x0800a6b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f103 0110 	add.w	r1, r3, #16
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	795b      	ldrb	r3, [r3, #5]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f943 	bl	800a72c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	761a      	strb	r2, [r3, #24]
      break;
 800a4ac:	e139      	b.n	800a722 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	795b      	ldrb	r3, [r3, #5]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fcc5 	bl	800ae44 <USBH_LL_GetURBState>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d11e      	bne.n	800a502 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7c1b      	ldrb	r3, [r3, #16]
 800a4c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	8adb      	ldrh	r3, [r3, #22]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a4d6:	7b7b      	ldrb	r3, [r7, #13]
 800a4d8:	2b80      	cmp	r3, #128	; 0x80
 800a4da:	d103      	bne.n	800a4e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2203      	movs	r2, #3
 800a4e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4e2:	e115      	b.n	800a710 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2205      	movs	r2, #5
 800a4e8:	761a      	strb	r2, [r3, #24]
      break;
 800a4ea:	e111      	b.n	800a710 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a4ec:	7b7b      	ldrb	r3, [r7, #13]
 800a4ee:	2b80      	cmp	r3, #128	; 0x80
 800a4f0:	d103      	bne.n	800a4fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2209      	movs	r2, #9
 800a4f6:	761a      	strb	r2, [r3, #24]
      break;
 800a4f8:	e10a      	b.n	800a710 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2207      	movs	r2, #7
 800a4fe:	761a      	strb	r2, [r3, #24]
      break;
 800a500:	e106      	b.n	800a710 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	2b04      	cmp	r3, #4
 800a506:	d003      	beq.n	800a510 <USBH_HandleControl+0xcc>
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	f040 8100 	bne.w	800a710 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	220b      	movs	r2, #11
 800a514:	761a      	strb	r2, [r3, #24]
      break;
 800a516:	e0fb      	b.n	800a710 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6899      	ldr	r1, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	899a      	ldrh	r2, [r3, #12]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	791b      	ldrb	r3, [r3, #4]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f93a 	bl	800a7aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2204      	movs	r2, #4
 800a53a:	761a      	strb	r2, [r3, #24]
      break;
 800a53c:	e0f1      	b.n	800a722 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	791b      	ldrb	r3, [r3, #4]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fc7d 	bl	800ae44 <USBH_LL_GetURBState>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d102      	bne.n	800a55a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2209      	movs	r2, #9
 800a558:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	2b05      	cmp	r3, #5
 800a55e:	d102      	bne.n	800a566 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a560:	2303      	movs	r3, #3
 800a562:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a564:	e0d6      	b.n	800a714 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	f040 80d3 	bne.w	800a714 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	220b      	movs	r2, #11
 800a572:	761a      	strb	r2, [r3, #24]
      break;
 800a574:	e0ce      	b.n	800a714 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6899      	ldr	r1, [r3, #8]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	899a      	ldrh	r2, [r3, #12]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	795b      	ldrb	r3, [r3, #5]
 800a582:	2001      	movs	r0, #1
 800a584:	9000      	str	r0, [sp, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8ea 	bl	800a760 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2206      	movs	r2, #6
 800a59c:	761a      	strb	r2, [r3, #24]
      break;
 800a59e:	e0c0      	b.n	800a722 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	795b      	ldrb	r3, [r3, #5]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc4c 	bl	800ae44 <USBH_LL_GetURBState>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d103      	bne.n	800a5be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5bc:	e0ac      	b.n	800a718 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	2b05      	cmp	r3, #5
 800a5c2:	d105      	bne.n	800a5d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	220c      	movs	r2, #12
 800a5c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ce:	e0a3      	b.n	800a718 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d103      	bne.n	800a5de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2205      	movs	r2, #5
 800a5da:	761a      	strb	r2, [r3, #24]
      break;
 800a5dc:	e09c      	b.n	800a718 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	f040 8099 	bne.w	800a718 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	220b      	movs	r2, #11
 800a5ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f0:	e092      	b.n	800a718 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	791b      	ldrb	r3, [r3, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8d5 	bl	800a7aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2208      	movs	r2, #8
 800a610:	761a      	strb	r2, [r3, #24]

      break;
 800a612:	e086      	b.n	800a722 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	791b      	ldrb	r3, [r3, #4]
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc12 	bl	800ae44 <USBH_LL_GetURBState>
 800a620:	4603      	mov	r3, r0
 800a622:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a624:	7bbb      	ldrb	r3, [r7, #14]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d105      	bne.n	800a636 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	220d      	movs	r2, #13
 800a62e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a634:	e072      	b.n	800a71c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d103      	bne.n	800a644 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	220b      	movs	r2, #11
 800a640:	761a      	strb	r2, [r3, #24]
      break;
 800a642:	e06b      	b.n	800a71c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b05      	cmp	r3, #5
 800a648:	d168      	bne.n	800a71c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a64a:	2303      	movs	r3, #3
 800a64c:	73fb      	strb	r3, [r7, #15]
      break;
 800a64e:	e065      	b.n	800a71c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	795b      	ldrb	r3, [r3, #5]
 800a654:	2201      	movs	r2, #1
 800a656:	9200      	str	r2, [sp, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f87f 	bl	800a760 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	220a      	movs	r2, #10
 800a672:	761a      	strb	r2, [r3, #24]
      break;
 800a674:	e055      	b.n	800a722 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	795b      	ldrb	r3, [r3, #5]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fbe1 	bl	800ae44 <USBH_LL_GetURBState>
 800a682:	4603      	mov	r3, r0
 800a684:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a686:	7bbb      	ldrb	r3, [r7, #14]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d105      	bne.n	800a698 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	220d      	movs	r2, #13
 800a694:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a696:	e043      	b.n	800a720 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d103      	bne.n	800a6a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2209      	movs	r2, #9
 800a6a2:	761a      	strb	r2, [r3, #24]
      break;
 800a6a4:	e03c      	b.n	800a720 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d139      	bne.n	800a720 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	220b      	movs	r2, #11
 800a6b0:	761a      	strb	r2, [r3, #24]
      break;
 800a6b2:	e035      	b.n	800a720 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7e5b      	ldrb	r3, [r3, #25]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	765a      	strb	r2, [r3, #25]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7e5b      	ldrb	r3, [r3, #25]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d806      	bhi.n	800a6d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a6d4:	e025      	b.n	800a722 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6dc:	2106      	movs	r1, #6
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	795b      	ldrb	r3, [r3, #5]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f90c 	bl	800a90c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	791b      	ldrb	r3, [r3, #4]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f906 	bl	800a90c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a706:	2302      	movs	r3, #2
 800a708:	73fb      	strb	r3, [r7, #15]
      break;
 800a70a:	e00a      	b.n	800a722 <USBH_HandleControl+0x2de>

    default:
      break;
 800a70c:	bf00      	nop
 800a70e:	e008      	b.n	800a722 <USBH_HandleControl+0x2de>
      break;
 800a710:	bf00      	nop
 800a712:	e006      	b.n	800a722 <USBH_HandleControl+0x2de>
      break;
 800a714:	bf00      	nop
 800a716:	e004      	b.n	800a722 <USBH_HandleControl+0x2de>
      break;
 800a718:	bf00      	nop
 800a71a:	e002      	b.n	800a722 <USBH_HandleControl+0x2de>
      break;
 800a71c:	bf00      	nop
 800a71e:	e000      	b.n	800a722 <USBH_HandleControl+0x2de>
      break;
 800a720:	bf00      	nop
  }

  return status;
 800a722:	7bfb      	ldrb	r3, [r7, #15]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af04      	add	r7, sp, #16
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a73a:	79f9      	ldrb	r1, [r7, #7]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	2308      	movs	r3, #8
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	2300      	movs	r3, #0
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	2300      	movs	r3, #0
 800a74e:	2200      	movs	r2, #0
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 fb46 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af04      	add	r7, sp, #16
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4611      	mov	r1, r2
 800a76c:	461a      	mov	r2, r3
 800a76e:	460b      	mov	r3, r1
 800a770:	80fb      	strh	r3, [r7, #6]
 800a772:	4613      	mov	r3, r2
 800a774:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a784:	7979      	ldrb	r1, [r7, #5]
 800a786:	7e3b      	ldrb	r3, [r7, #24]
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	9302      	str	r3, [sp, #8]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	2301      	movs	r3, #1
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	2300      	movs	r3, #0
 800a798:	2200      	movs	r2, #0
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 fb21 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b088      	sub	sp, #32
 800a7ae:	af04      	add	r7, sp, #16
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	80fb      	strh	r3, [r7, #6]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7c0:	7979      	ldrb	r1, [r7, #5]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9303      	str	r3, [sp, #12]
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	9302      	str	r3, [sp, #8]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fb03 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7dc:	2300      	movs	r3, #0

}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b088      	sub	sp, #32
 800a7ea:	af04      	add	r7, sp, #16
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	80fb      	strh	r3, [r7, #6]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a80a:	7979      	ldrb	r1, [r7, #5]
 800a80c:	7e3b      	ldrb	r3, [r7, #24]
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	9302      	str	r3, [sp, #8]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	2301      	movs	r3, #1
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	2302      	movs	r3, #2
 800a81e:	2200      	movs	r2, #0
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fade 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af04      	add	r7, sp, #16
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4611      	mov	r1, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	460b      	mov	r3, r1
 800a840:	80fb      	strh	r3, [r7, #6]
 800a842:	4613      	mov	r3, r2
 800a844:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a846:	7979      	ldrb	r1, [r7, #5]
 800a848:	2300      	movs	r3, #0
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	88fb      	ldrh	r3, [r7, #6]
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	2301      	movs	r3, #1
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2302      	movs	r3, #2
 800a85a:	2201      	movs	r2, #1
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fac0 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af04      	add	r7, sp, #16
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	70fb      	strb	r3, [r7, #3]
 800a87e:	460b      	mov	r3, r1
 800a880:	70bb      	strb	r3, [r7, #2]
 800a882:	4613      	mov	r3, r2
 800a884:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a886:	7878      	ldrb	r0, [r7, #1]
 800a888:	78ba      	ldrb	r2, [r7, #2]
 800a88a:	78f9      	ldrb	r1, [r7, #3]
 800a88c:	8b3b      	ldrh	r3, [r7, #24]
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	7d3b      	ldrb	r3, [r7, #20]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	7c3b      	ldrb	r3, [r7, #16]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4603      	mov	r3, r0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa53 	bl	800ad46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa72 	bl	800ada4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f836 	bl	800a948 <USBH_GetFreePipe>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a8e0:	89fb      	ldrh	r3, [r7, #14]
 800a8e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00a      	beq.n	800a900 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	89fb      	ldrh	r3, [r7, #14]
 800a8ee:	f003 030f 	and.w	r3, r3, #15
 800a8f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	33e0      	adds	r3, #224	; 0xe0
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	440b      	add	r3, r1
 800a8fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a900:	89fb      	ldrh	r3, [r7, #14]
 800a902:	b2db      	uxtb	r3, r3
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	2b0f      	cmp	r3, #15
 800a91c:	d80d      	bhi.n	800a93a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	33e0      	adds	r3, #224	; 0xe0
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a930:	6879      	ldr	r1, [r7, #4]
 800a932:	33e0      	adds	r3, #224	; 0xe0
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
 800a958:	e00f      	b.n	800a97a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	33e0      	adds	r3, #224	; 0xe0
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d102      	bne.n	800a974 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	b29b      	uxth	r3, r3
 800a972:	e007      	b.n	800a984 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	3301      	adds	r3, #1
 800a978:	73fb      	strb	r3, [r7, #15]
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	2b0f      	cmp	r3, #15
 800a97e:	d9ec      	bls.n	800a95a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a980:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a994:	2201      	movs	r2, #1
 800a996:	490e      	ldr	r1, [pc, #56]	; (800a9d0 <MX_USB_HOST_Init+0x40>)
 800a998:	480e      	ldr	r0, [pc, #56]	; (800a9d4 <MX_USB_HOST_Init+0x44>)
 800a99a:	f7fe fba7 	bl	80090ec <USBH_Init>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a9a4:	f7f6 ff46 	bl	8001834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a9a8:	490b      	ldr	r1, [pc, #44]	; (800a9d8 <MX_USB_HOST_Init+0x48>)
 800a9aa:	480a      	ldr	r0, [pc, #40]	; (800a9d4 <MX_USB_HOST_Init+0x44>)
 800a9ac:	f7fe fc2c 	bl	8009208 <USBH_RegisterClass>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a9b6:	f7f6 ff3d 	bl	8001834 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a9ba:	4806      	ldr	r0, [pc, #24]	; (800a9d4 <MX_USB_HOST_Init+0x44>)
 800a9bc:	f7fe fcb0 	bl	8009320 <USBH_Start>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a9c6:	f7f6 ff35 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	0800a9f1 	.word	0x0800a9f1
 800a9d4:	20000294 	.word	0x20000294
 800a9d8:	20000010 	.word	0x20000010

0800a9dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9e0:	4802      	ldr	r0, [pc, #8]	; (800a9ec <MX_USB_HOST_Process+0x10>)
 800a9e2:	f7fe fcad 	bl	8009340 <USBH_Process>
}
 800a9e6:	bf00      	nop
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000294 	.word	0x20000294

0800a9f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d819      	bhi.n	800aa38 <USBH_UserProcess+0x48>
 800aa04:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <USBH_UserProcess+0x1c>)
 800aa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0a:	bf00      	nop
 800aa0c:	0800aa39 	.word	0x0800aa39
 800aa10:	0800aa29 	.word	0x0800aa29
 800aa14:	0800aa39 	.word	0x0800aa39
 800aa18:	0800aa31 	.word	0x0800aa31
 800aa1c:	0800aa21 	.word	0x0800aa21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <USBH_UserProcess+0x58>)
 800aa22:	2203      	movs	r2, #3
 800aa24:	701a      	strb	r2, [r3, #0]
  break;
 800aa26:	e008      	b.n	800aa3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <USBH_UserProcess+0x58>)
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	701a      	strb	r2, [r3, #0]
  break;
 800aa2e:	e004      	b.n	800aa3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <USBH_UserProcess+0x58>)
 800aa32:	2201      	movs	r2, #1
 800aa34:	701a      	strb	r2, [r3, #0]
  break;
 800aa36:	e000      	b.n	800aa3a <USBH_UserProcess+0x4a>

  default:
  break;
 800aa38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	2000066c 	.word	0x2000066c

0800aa4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	; 0x28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa54:	f107 0314 	add.w	r3, r7, #20
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	609a      	str	r2, [r3, #8]
 800aa60:	60da      	str	r2, [r3, #12]
 800aa62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa6c:	d147      	bne.n	800aafe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	4b25      	ldr	r3, [pc, #148]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	4a24      	ldr	r2, [pc, #144]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aa78:	f043 0301 	orr.w	r3, r3, #1
 800aa7c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa7e:	4b22      	ldr	r3, [pc, #136]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aa8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aa98:	f107 0314 	add.w	r3, r7, #20
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	481b      	ldr	r0, [pc, #108]	; (800ab0c <HAL_HCD_MspInit+0xc0>)
 800aaa0:	f7f7 fe92 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aaa4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aaa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaaa:	2302      	movs	r3, #2
 800aaac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aab2:	2300      	movs	r3, #0
 800aab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aab6:	230a      	movs	r3, #10
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaba:	f107 0314 	add.w	r3, r7, #20
 800aabe:	4619      	mov	r1, r3
 800aac0:	4812      	ldr	r0, [pc, #72]	; (800ab0c <HAL_HCD_MspInit+0xc0>)
 800aac2:	f7f7 fe81 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aac6:	4b10      	ldr	r3, [pc, #64]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	4a0f      	ldr	r2, [pc, #60]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	6353      	str	r3, [r2, #52]	; 0x34
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	4a0b      	ldr	r2, [pc, #44]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aadc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aae0:	6453      	str	r3, [r2, #68]	; 0x44
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <HAL_HCD_MspInit+0xbc>)
 800aae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	2043      	movs	r0, #67	; 0x43
 800aaf4:	f7f7 fab5 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aaf8:	2043      	movs	r0, #67	; 0x43
 800aafa:	f7f7 face 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aafe:	bf00      	nop
 800ab00:	3728      	adds	r7, #40	; 0x28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	40023800 	.word	0x40023800
 800ab0c:	40020000 	.word	0x40020000

0800ab10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe ffed 	bl	8009afe <USBH_LL_IncTimer>
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff f825 	bl	8009b8a <USBH_LL_Connect>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff f82e 	bl	8009bb8 <USBH_LL_Disconnect>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
 800ab70:	4613      	mov	r3, r2
 800ab72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe ffdf 	bl	8009b52 <USBH_LL_PortEnabled>
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe ffdf 	bl	8009b6e <USBH_LL_PortDisabled>
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d12a      	bne.n	800ac20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800abca:	4a18      	ldr	r2, [pc, #96]	; (800ac2c <USBH_LL_Init+0x74>)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <USBH_LL_Init+0x74>)
 800abd6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abda:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <USBH_LL_Init+0x74>)
 800abdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abe0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <USBH_LL_Init+0x74>)
 800abe4:	2208      	movs	r2, #8
 800abe6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <USBH_LL_Init+0x74>)
 800abea:	2201      	movs	r2, #1
 800abec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abee:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <USBH_LL_Init+0x74>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800abf4:	4b0d      	ldr	r3, [pc, #52]	; (800ac2c <USBH_LL_Init+0x74>)
 800abf6:	2202      	movs	r2, #2
 800abf8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abfa:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <USBH_LL_Init+0x74>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac00:	480a      	ldr	r0, [pc, #40]	; (800ac2c <USBH_LL_Init+0x74>)
 800ac02:	f7f7 ffaf 	bl	8002b64 <HAL_HCD_Init>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac0c:	f7f6 fe12 	bl	8001834 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac10:	4806      	ldr	r0, [pc, #24]	; (800ac2c <USBH_LL_Init+0x74>)
 800ac12:	f7f8 fb92 	bl	800333a <HAL_HCD_GetCurrentFrame>
 800ac16:	4603      	mov	r3, r0
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fe ff60 	bl	8009ae0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000670 	.word	0x20000670

0800ac30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f8 fb01 	bl	800324e <HAL_HCD_Start>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 f95c 	bl	800af10 <USBH_Get_USB_Status>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f8 fb09 	bl	8003294 <HAL_HCD_Stop>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f941 	bl	800af10 <USBH_Get_USB_Status>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aca4:	2301      	movs	r3, #1
 800aca6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acae:	4618      	mov	r0, r3
 800acb0:	f7f8 fb51 	bl	8003356 <HAL_HCD_GetCurrentSpeed>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d00c      	beq.n	800acd4 <USBH_LL_GetSpeed+0x38>
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d80d      	bhi.n	800acda <USBH_LL_GetSpeed+0x3e>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <USBH_LL_GetSpeed+0x2c>
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d003      	beq.n	800acce <USBH_LL_GetSpeed+0x32>
 800acc6:	e008      	b.n	800acda <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800acc8:	2300      	movs	r3, #0
 800acca:	73fb      	strb	r3, [r7, #15]
    break;
 800accc:	e008      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800acce:	2301      	movs	r3, #1
 800acd0:	73fb      	strb	r3, [r7, #15]
    break;
 800acd2:	e005      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800acd4:	2302      	movs	r3, #2
 800acd6:	73fb      	strb	r3, [r7, #15]
    break;
 800acd8:	e002      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800acda:	2301      	movs	r3, #1
 800acdc:	73fb      	strb	r3, [r7, #15]
    break;
 800acde:	bf00      	nop
  }
  return  speed;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f8 fae4 	bl	80032ce <HAL_HCD_ResetPort>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 f8ff 	bl	800af10 <USBH_Get_USB_Status>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad32:	78fa      	ldrb	r2, [r7, #3]
 800ad34:	4611      	mov	r1, r2
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f8 faeb 	bl	8003312 <HAL_HCD_HC_GetXferCount>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad46:	b590      	push	{r4, r7, lr}
 800ad48:	b089      	sub	sp, #36	; 0x24
 800ad4a:	af04      	add	r7, sp, #16
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	461a      	mov	r2, r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	70fb      	strb	r3, [r7, #3]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70bb      	strb	r3, [r7, #2]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad6e:	787c      	ldrb	r4, [r7, #1]
 800ad70:	78ba      	ldrb	r2, [r7, #2]
 800ad72:	78f9      	ldrb	r1, [r7, #3]
 800ad74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	4623      	mov	r3, r4
 800ad86:	f7f7 ff4f 	bl	8002c28 <HAL_HCD_HC_Init>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f8bd 	bl	800af10 <USBH_Get_USB_Status>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd90      	pop	{r4, r7, pc}

0800ada4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adbe:	78fa      	ldrb	r2, [r7, #3]
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f7 ffbf 	bl	8002d46 <HAL_HCD_HC_Halt>
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f89e 	bl	800af10 <USBH_Get_USB_Status>
 800add4:	4603      	mov	r3, r0
 800add6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ade2:	b590      	push	{r4, r7, lr}
 800ade4:	b089      	sub	sp, #36	; 0x24
 800ade6:	af04      	add	r7, sp, #16
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	461a      	mov	r2, r3
 800adf0:	4603      	mov	r3, r0
 800adf2:	70fb      	strb	r3, [r7, #3]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70bb      	strb	r3, [r7, #2]
 800adf8:	4613      	mov	r3, r2
 800adfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae0a:	787c      	ldrb	r4, [r7, #1]
 800ae0c:	78ba      	ldrb	r2, [r7, #2]
 800ae0e:	78f9      	ldrb	r1, [r7, #3]
 800ae10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	4623      	mov	r3, r4
 800ae26:	f7f7 ffb1 	bl	8002d8c <HAL_HCD_HC_SubmitRequest>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f86d 	bl	800af10 <USBH_Get_USB_Status>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd90      	pop	{r4, r7, pc}

0800ae44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae56:	78fa      	ldrb	r2, [r7, #3]
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f8 fa45 	bl	80032ea <HAL_HCD_HC_GetURBState>
 800ae60:	4603      	mov	r3, r0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	460b      	mov	r3, r1
 800ae74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d103      	bne.n	800ae88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f870 	bl	800af68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae88:	20c8      	movs	r0, #200	; 0xc8
 800ae8a:	f7f6 ffeb 	bl	8001e64 <HAL_Delay>
  return USBH_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
 800aea4:	4613      	mov	r3, r2
 800aea6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	212c      	movs	r1, #44	; 0x2c
 800aeb6:	fb01 f303 	mul.w	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	333b      	adds	r3, #59	; 0x3b
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	212c      	movs	r1, #44	; 0x2c
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	4413      	add	r3, r2
 800aed0:	3354      	adds	r3, #84	; 0x54
 800aed2:	78ba      	ldrb	r2, [r7, #2]
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e008      	b.n	800aeea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aed8:	78fb      	ldrb	r3, [r7, #3]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	212c      	movs	r1, #44	; 0x2c
 800aede:	fb01 f303 	mul.w	r3, r1, r3
 800aee2:	4413      	add	r3, r2
 800aee4:	3355      	adds	r3, #85	; 0x55
 800aee6:	78ba      	ldrb	r2, [r7, #2]
 800aee8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7f6 ffaf 	bl	8001e64 <HAL_Delay>
}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d817      	bhi.n	800af54 <USBH_Get_USB_Status+0x44>
 800af24:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <USBH_Get_USB_Status+0x1c>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af43 	.word	0x0800af43
 800af34:	0800af49 	.word	0x0800af49
 800af38:	0800af4f 	.word	0x0800af4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]
    break;
 800af40:	e00b      	b.n	800af5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af42:	2302      	movs	r3, #2
 800af44:	73fb      	strb	r3, [r7, #15]
    break;
 800af46:	e008      	b.n	800af5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
    break;
 800af4c:	e005      	b.n	800af5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af4e:	2302      	movs	r3, #2
 800af50:	73fb      	strb	r3, [r7, #15]
    break;
 800af52:	e002      	b.n	800af5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af54:	2302      	movs	r3, #2
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	bf00      	nop
  }
  return usb_status;
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
 800af80:	e001      	b.n	800af86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800af82:	2301      	movs	r3, #1
 800af84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	461a      	mov	r2, r3
 800af8a:	2101      	movs	r1, #1
 800af8c:	4803      	ldr	r0, [pc, #12]	; (800af9c <MX_DriverVbusFS+0x34>)
 800af8e:	f7f7 fdb7 	bl	8002b00 <HAL_GPIO_WritePin>
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	40020800 	.word	0x40020800

0800afa0 <__errno>:
 800afa0:	4b01      	ldr	r3, [pc, #4]	; (800afa8 <__errno+0x8>)
 800afa2:	6818      	ldr	r0, [r3, #0]
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000030 	.word	0x20000030

0800afac <__libc_init_array>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4d0d      	ldr	r5, [pc, #52]	; (800afe4 <__libc_init_array+0x38>)
 800afb0:	4c0d      	ldr	r4, [pc, #52]	; (800afe8 <__libc_init_array+0x3c>)
 800afb2:	1b64      	subs	r4, r4, r5
 800afb4:	10a4      	asrs	r4, r4, #2
 800afb6:	2600      	movs	r6, #0
 800afb8:	42a6      	cmp	r6, r4
 800afba:	d109      	bne.n	800afd0 <__libc_init_array+0x24>
 800afbc:	4d0b      	ldr	r5, [pc, #44]	; (800afec <__libc_init_array+0x40>)
 800afbe:	4c0c      	ldr	r4, [pc, #48]	; (800aff0 <__libc_init_array+0x44>)
 800afc0:	f000 f92e 	bl	800b220 <_init>
 800afc4:	1b64      	subs	r4, r4, r5
 800afc6:	10a4      	asrs	r4, r4, #2
 800afc8:	2600      	movs	r6, #0
 800afca:	42a6      	cmp	r6, r4
 800afcc:	d105      	bne.n	800afda <__libc_init_array+0x2e>
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd4:	4798      	blx	r3
 800afd6:	3601      	adds	r6, #1
 800afd8:	e7ee      	b.n	800afb8 <__libc_init_array+0xc>
 800afda:	f855 3b04 	ldr.w	r3, [r5], #4
 800afde:	4798      	blx	r3
 800afe0:	3601      	adds	r6, #1
 800afe2:	e7f2      	b.n	800afca <__libc_init_array+0x1e>
 800afe4:	0800b268 	.word	0x0800b268
 800afe8:	0800b268 	.word	0x0800b268
 800afec:	0800b268 	.word	0x0800b268
 800aff0:	0800b26c 	.word	0x0800b26c

0800aff4 <malloc>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <malloc+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 b87f 	b.w	800b0fc <_malloc_r>
 800affe:	bf00      	nop
 800b000:	20000030 	.word	0x20000030

0800b004 <free>:
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <free+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f000 b80b 	b.w	800b024 <_free_r>
 800b00e:	bf00      	nop
 800b010:	20000030 	.word	0x20000030

0800b014 <memset>:
 800b014:	4402      	add	r2, r0
 800b016:	4603      	mov	r3, r0
 800b018:	4293      	cmp	r3, r2
 800b01a:	d100      	bne.n	800b01e <memset+0xa>
 800b01c:	4770      	bx	lr
 800b01e:	f803 1b01 	strb.w	r1, [r3], #1
 800b022:	e7f9      	b.n	800b018 <memset+0x4>

0800b024 <_free_r>:
 800b024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b026:	2900      	cmp	r1, #0
 800b028:	d044      	beq.n	800b0b4 <_free_r+0x90>
 800b02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f1a1 0404 	sub.w	r4, r1, #4
 800b036:	bfb8      	it	lt
 800b038:	18e4      	addlt	r4, r4, r3
 800b03a:	f000 f8e3 	bl	800b204 <__malloc_lock>
 800b03e:	4a1e      	ldr	r2, [pc, #120]	; (800b0b8 <_free_r+0x94>)
 800b040:	9801      	ldr	r0, [sp, #4]
 800b042:	6813      	ldr	r3, [r2, #0]
 800b044:	b933      	cbnz	r3, 800b054 <_free_r+0x30>
 800b046:	6063      	str	r3, [r4, #4]
 800b048:	6014      	str	r4, [r2, #0]
 800b04a:	b003      	add	sp, #12
 800b04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b050:	f000 b8de 	b.w	800b210 <__malloc_unlock>
 800b054:	42a3      	cmp	r3, r4
 800b056:	d908      	bls.n	800b06a <_free_r+0x46>
 800b058:	6825      	ldr	r5, [r4, #0]
 800b05a:	1961      	adds	r1, r4, r5
 800b05c:	428b      	cmp	r3, r1
 800b05e:	bf01      	itttt	eq
 800b060:	6819      	ldreq	r1, [r3, #0]
 800b062:	685b      	ldreq	r3, [r3, #4]
 800b064:	1949      	addeq	r1, r1, r5
 800b066:	6021      	streq	r1, [r4, #0]
 800b068:	e7ed      	b.n	800b046 <_free_r+0x22>
 800b06a:	461a      	mov	r2, r3
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	b10b      	cbz	r3, 800b074 <_free_r+0x50>
 800b070:	42a3      	cmp	r3, r4
 800b072:	d9fa      	bls.n	800b06a <_free_r+0x46>
 800b074:	6811      	ldr	r1, [r2, #0]
 800b076:	1855      	adds	r5, r2, r1
 800b078:	42a5      	cmp	r5, r4
 800b07a:	d10b      	bne.n	800b094 <_free_r+0x70>
 800b07c:	6824      	ldr	r4, [r4, #0]
 800b07e:	4421      	add	r1, r4
 800b080:	1854      	adds	r4, r2, r1
 800b082:	42a3      	cmp	r3, r4
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	d1e0      	bne.n	800b04a <_free_r+0x26>
 800b088:	681c      	ldr	r4, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	6053      	str	r3, [r2, #4]
 800b08e:	4421      	add	r1, r4
 800b090:	6011      	str	r1, [r2, #0]
 800b092:	e7da      	b.n	800b04a <_free_r+0x26>
 800b094:	d902      	bls.n	800b09c <_free_r+0x78>
 800b096:	230c      	movs	r3, #12
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	e7d6      	b.n	800b04a <_free_r+0x26>
 800b09c:	6825      	ldr	r5, [r4, #0]
 800b09e:	1961      	adds	r1, r4, r5
 800b0a0:	428b      	cmp	r3, r1
 800b0a2:	bf04      	itt	eq
 800b0a4:	6819      	ldreq	r1, [r3, #0]
 800b0a6:	685b      	ldreq	r3, [r3, #4]
 800b0a8:	6063      	str	r3, [r4, #4]
 800b0aa:	bf04      	itt	eq
 800b0ac:	1949      	addeq	r1, r1, r5
 800b0ae:	6021      	streq	r1, [r4, #0]
 800b0b0:	6054      	str	r4, [r2, #4]
 800b0b2:	e7ca      	b.n	800b04a <_free_r+0x26>
 800b0b4:	b003      	add	sp, #12
 800b0b6:	bd30      	pop	{r4, r5, pc}
 800b0b8:	20000974 	.word	0x20000974

0800b0bc <sbrk_aligned>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	4e0e      	ldr	r6, [pc, #56]	; (800b0f8 <sbrk_aligned+0x3c>)
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	6831      	ldr	r1, [r6, #0]
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	b911      	cbnz	r1, 800b0ce <sbrk_aligned+0x12>
 800b0c8:	f000 f88c 	bl	800b1e4 <_sbrk_r>
 800b0cc:	6030      	str	r0, [r6, #0]
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f000 f887 	bl	800b1e4 <_sbrk_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d00a      	beq.n	800b0f0 <sbrk_aligned+0x34>
 800b0da:	1cc4      	adds	r4, r0, #3
 800b0dc:	f024 0403 	bic.w	r4, r4, #3
 800b0e0:	42a0      	cmp	r0, r4
 800b0e2:	d007      	beq.n	800b0f4 <sbrk_aligned+0x38>
 800b0e4:	1a21      	subs	r1, r4, r0
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f000 f87c 	bl	800b1e4 <_sbrk_r>
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	d101      	bne.n	800b0f4 <sbrk_aligned+0x38>
 800b0f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	20000978 	.word	0x20000978

0800b0fc <_malloc_r>:
 800b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	1ccd      	adds	r5, r1, #3
 800b102:	f025 0503 	bic.w	r5, r5, #3
 800b106:	3508      	adds	r5, #8
 800b108:	2d0c      	cmp	r5, #12
 800b10a:	bf38      	it	cc
 800b10c:	250c      	movcc	r5, #12
 800b10e:	2d00      	cmp	r5, #0
 800b110:	4607      	mov	r7, r0
 800b112:	db01      	blt.n	800b118 <_malloc_r+0x1c>
 800b114:	42a9      	cmp	r1, r5
 800b116:	d905      	bls.n	800b124 <_malloc_r+0x28>
 800b118:	230c      	movs	r3, #12
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	2600      	movs	r6, #0
 800b11e:	4630      	mov	r0, r6
 800b120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b124:	4e2e      	ldr	r6, [pc, #184]	; (800b1e0 <_malloc_r+0xe4>)
 800b126:	f000 f86d 	bl	800b204 <__malloc_lock>
 800b12a:	6833      	ldr	r3, [r6, #0]
 800b12c:	461c      	mov	r4, r3
 800b12e:	bb34      	cbnz	r4, 800b17e <_malloc_r+0x82>
 800b130:	4629      	mov	r1, r5
 800b132:	4638      	mov	r0, r7
 800b134:	f7ff ffc2 	bl	800b0bc <sbrk_aligned>
 800b138:	1c43      	adds	r3, r0, #1
 800b13a:	4604      	mov	r4, r0
 800b13c:	d14d      	bne.n	800b1da <_malloc_r+0xde>
 800b13e:	6834      	ldr	r4, [r6, #0]
 800b140:	4626      	mov	r6, r4
 800b142:	2e00      	cmp	r6, #0
 800b144:	d140      	bne.n	800b1c8 <_malloc_r+0xcc>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	4631      	mov	r1, r6
 800b14a:	4638      	mov	r0, r7
 800b14c:	eb04 0803 	add.w	r8, r4, r3
 800b150:	f000 f848 	bl	800b1e4 <_sbrk_r>
 800b154:	4580      	cmp	r8, r0
 800b156:	d13a      	bne.n	800b1ce <_malloc_r+0xd2>
 800b158:	6821      	ldr	r1, [r4, #0]
 800b15a:	3503      	adds	r5, #3
 800b15c:	1a6d      	subs	r5, r5, r1
 800b15e:	f025 0503 	bic.w	r5, r5, #3
 800b162:	3508      	adds	r5, #8
 800b164:	2d0c      	cmp	r5, #12
 800b166:	bf38      	it	cc
 800b168:	250c      	movcc	r5, #12
 800b16a:	4629      	mov	r1, r5
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7ff ffa5 	bl	800b0bc <sbrk_aligned>
 800b172:	3001      	adds	r0, #1
 800b174:	d02b      	beq.n	800b1ce <_malloc_r+0xd2>
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	442b      	add	r3, r5
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	e00e      	b.n	800b19c <_malloc_r+0xa0>
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	1b52      	subs	r2, r2, r5
 800b182:	d41e      	bmi.n	800b1c2 <_malloc_r+0xc6>
 800b184:	2a0b      	cmp	r2, #11
 800b186:	d916      	bls.n	800b1b6 <_malloc_r+0xba>
 800b188:	1961      	adds	r1, r4, r5
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	6025      	str	r5, [r4, #0]
 800b18e:	bf18      	it	ne
 800b190:	6059      	strne	r1, [r3, #4]
 800b192:	6863      	ldr	r3, [r4, #4]
 800b194:	bf08      	it	eq
 800b196:	6031      	streq	r1, [r6, #0]
 800b198:	5162      	str	r2, [r4, r5]
 800b19a:	604b      	str	r3, [r1, #4]
 800b19c:	4638      	mov	r0, r7
 800b19e:	f104 060b 	add.w	r6, r4, #11
 800b1a2:	f000 f835 	bl	800b210 <__malloc_unlock>
 800b1a6:	f026 0607 	bic.w	r6, r6, #7
 800b1aa:	1d23      	adds	r3, r4, #4
 800b1ac:	1af2      	subs	r2, r6, r3
 800b1ae:	d0b6      	beq.n	800b11e <_malloc_r+0x22>
 800b1b0:	1b9b      	subs	r3, r3, r6
 800b1b2:	50a3      	str	r3, [r4, r2]
 800b1b4:	e7b3      	b.n	800b11e <_malloc_r+0x22>
 800b1b6:	6862      	ldr	r2, [r4, #4]
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	bf0c      	ite	eq
 800b1bc:	6032      	streq	r2, [r6, #0]
 800b1be:	605a      	strne	r2, [r3, #4]
 800b1c0:	e7ec      	b.n	800b19c <_malloc_r+0xa0>
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	6864      	ldr	r4, [r4, #4]
 800b1c6:	e7b2      	b.n	800b12e <_malloc_r+0x32>
 800b1c8:	4634      	mov	r4, r6
 800b1ca:	6876      	ldr	r6, [r6, #4]
 800b1cc:	e7b9      	b.n	800b142 <_malloc_r+0x46>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	603b      	str	r3, [r7, #0]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f000 f81c 	bl	800b210 <__malloc_unlock>
 800b1d8:	e7a1      	b.n	800b11e <_malloc_r+0x22>
 800b1da:	6025      	str	r5, [r4, #0]
 800b1dc:	e7de      	b.n	800b19c <_malloc_r+0xa0>
 800b1de:	bf00      	nop
 800b1e0:	20000974 	.word	0x20000974

0800b1e4 <_sbrk_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d06      	ldr	r5, [pc, #24]	; (800b200 <_sbrk_r+0x1c>)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	f7f6 fd54 	bl	8001c9c <_sbrk>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_sbrk_r+0x1a>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_sbrk_r+0x1a>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	2000097c 	.word	0x2000097c

0800b204 <__malloc_lock>:
 800b204:	4801      	ldr	r0, [pc, #4]	; (800b20c <__malloc_lock+0x8>)
 800b206:	f000 b809 	b.w	800b21c <__retarget_lock_acquire_recursive>
 800b20a:	bf00      	nop
 800b20c:	20000980 	.word	0x20000980

0800b210 <__malloc_unlock>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__malloc_unlock+0x8>)
 800b212:	f000 b804 	b.w	800b21e <__retarget_lock_release_recursive>
 800b216:	bf00      	nop
 800b218:	20000980 	.word	0x20000980

0800b21c <__retarget_lock_acquire_recursive>:
 800b21c:	4770      	bx	lr

0800b21e <__retarget_lock_release_recursive>:
 800b21e:	4770      	bx	lr

0800b220 <_init>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr

0800b22c <_fini>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr
