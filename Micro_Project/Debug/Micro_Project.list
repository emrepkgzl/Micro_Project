
Micro_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a58c  0800a58c  0001a58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c4  0800a5c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c4  0800a5c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5cc  0800a5cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d0  0800a5d0  0001a5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008cc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000095c  2000095c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4c5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d35  00000000  00000000  0003a585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e4d  00000000  00000000  00040950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0eb  00000000  00000000  0006479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde37  00000000  00000000  0007f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d6bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c8  00000000  00000000  0014d710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a574 	.word	0x0800a574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a574 	.word	0x0800a574

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f001 fbd8 	bl	80024ec <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 fbba 	bl	80024ec <HAL_GPIO_Init>
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DHT22_Start>:

#define DHT22_PORT GPIOA
#define DHT22_PIN GPIO_PIN_1

void DHT22_Start (void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000d84:	2102      	movs	r1, #2
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <DHT22_Start+0x3c>)
 8000d88:	f7ff ffbe 	bl	8000d08 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2102      	movs	r1, #2
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <DHT22_Start+0x3c>)
 8000d92:	f001 fd5f 	bl	8002854 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000d96:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000d9a:	f000 fe6f 	bl	8001a7c <HAL_Delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2102      	movs	r1, #2
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DHT22_Start+0x3c>)
 8000da4:	f001 fd56 	bl	8002854 <HAL_GPIO_WritePin>
	HAL_Delay(30);   // wait for 30us
 8000da8:	201e      	movs	r0, #30
 8000daa:	f000 fe67 	bl	8001a7c <HAL_Delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000dae:	2102      	movs	r1, #2
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DHT22_Start+0x3c>)
 8000db2:	f7ff ffc7 	bl	8000d44 <Set_Pin_Input>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <DHT22_Check_Response+0x60>)
 8000dca:	f7ff ffbb 	bl	8000d44 <Set_Pin_Input>
	uint8_t Response = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(40);  // wait for 40us
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f000 fe52 	bl	8001a7c <HAL_Delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <DHT22_Check_Response+0x60>)
 8000ddc:	f001 fd22 	bl	8002824 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <DHT22_Check_Response+0x44>
	{
		HAL_Delay(80);   // wait for 80us
 8000de6:	2050      	movs	r0, #80	; 0x50
 8000de8:	f000 fe48 	bl	8001a7c <HAL_Delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000dec:	2102      	movs	r1, #2
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <DHT22_Check_Response+0x60>)
 8000df0:	f001 fd18 	bl	8002824 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <DHT22_Check_Response+0x40>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <DHT22_Check_Response+0x44>
		else Response = -1;
 8000e00:	23ff      	movs	r3, #255	; 0xff
 8000e02:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000e04:	bf00      	nop
 8000e06:	2102      	movs	r1, #2
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <DHT22_Check_Response+0x60>)
 8000e0a:	f001 fd0b 	bl	8002824 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f8      	bne.n	8000e06 <DHT22_Check_Response+0x46>
	return Response;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40020000 	.word	0x40020000

08000e24 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	e037      	b.n	8000ea0 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000e30:	bf00      	nop
 8000e32:	2102      	movs	r1, #2
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <DHT22_Read+0x8c>)
 8000e36:	f001 fcf5 	bl	8002824 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f8      	beq.n	8000e32 <DHT22_Read+0xe>
		HAL_Delay(40);   // wait for 40 us
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f000 fe1b 	bl	8001a7c <HAL_Delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000e46:	2102      	movs	r1, #2
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <DHT22_Read+0x8c>)
 8000e4a:	f001 fceb 	bl	8002824 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10e      	bne.n	8000e72 <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	e00b      	b.n	8000e8a <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	f1c3 0307 	rsb	r3, r3, #7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8000e8a:	bf00      	nop
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <DHT22_Read+0x8c>)
 8000e90:	f001 fcc8 	bl	8002824 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f8      	bne.n	8000e8c <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	71bb      	strb	r3, [r7, #6]
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d9c4      	bls.n	8000e30 <DHT22_Read+0xc>
	}

	return i;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fd6e 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f8ac 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 f9f2 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec4:	f000 f9d0 	bl	8001268 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ec8:	f000 f910 	bl	80010ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ecc:	f000 f93c 	bl	8001148 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ed0:	f000 f96a 	bl	80011a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ed4:	f008 ff06 	bl	8009ce4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000ed8:	f000 f99c 	bl	8001214 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000edc:	f008 ff28 	bl	8009d30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////B
    HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f000 fdcb 	bl	8001a7c <HAL_Delay>
    HAL_UART_Receive_DMA(&huart2, Rx_data, 10);
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	493c      	ldr	r1, [pc, #240]	; (8000fdc <main+0x128>)
 8000eea:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <main+0x12c>)
 8000eec:	f004 fdfa 	bl	8005ae4 <HAL_UART_Receive_DMA>
    HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	; 0x64
 8000ef2:	f000 fdc3 	bl	8001a7c <HAL_Delay>

    DHT22_Start();
 8000ef6:	f7ff ff43 	bl	8000d80 <DHT22_Start>
    Presence = DHT22_Check_Response();
 8000efa:	f7ff ff61 	bl	8000dc0 <DHT22_Check_Response>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <main+0x130>)
 8000f04:	701a      	strb	r2, [r3, #0]
    Rh_byte1 = DHT22_Read ();
 8000f06:	f7ff ff8d 	bl	8000e24 <DHT22_Read>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <main+0x134>)
 8000f10:	701a      	strb	r2, [r3, #0]
    Rh_byte2 = DHT22_Read ();
 8000f12:	f7ff ff87 	bl	8000e24 <DHT22_Read>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <main+0x138>)
 8000f1c:	701a      	strb	r2, [r3, #0]
    Temp_byte1 = DHT22_Read ();
 8000f1e:	f7ff ff81 	bl	8000e24 <DHT22_Read>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <main+0x13c>)
 8000f28:	701a      	strb	r2, [r3, #0]
    Temp_byte2 = DHT22_Read ();
 8000f2a:	f7ff ff7b 	bl	8000e24 <DHT22_Read>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <main+0x140>)
 8000f34:	701a      	strb	r2, [r3, #0]
    SUM = DHT22_Read();
 8000f36:	f7ff ff75 	bl	8000e24 <DHT22_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <main+0x144>)
 8000f40:	801a      	strh	r2, [r3, #0]

    TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <main+0x13c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <main+0x140>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <main+0x148>)
 8000f58:	801a      	strh	r2, [r3, #0]
    RH = ((Rh_byte1<<8)|Rh_byte2);
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <main+0x134>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <main+0x138>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <main+0x14c>)
 8000f70:	801a      	strh	r2, [r3, #0]

    Temperature = (float) (TEMP/10.0);
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <main+0x148>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa78 	bl	800046c <__aeabi_i2d>
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <main+0x150>)
 8000f82:	f7ff fc07 	bl	8000794 <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fce9 	bl	8000964 <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <main+0x154>)
 8000f96:	6013      	str	r3, [r2, #0]
    Humidity = (float) (RH/10.0);
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <main+0x14c>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa65 	bl	800046c <__aeabi_i2d>
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <main+0x150>)
 8000fa8:	f7ff fbf4 	bl	8000794 <__aeabi_ddiv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fcd6 	bl	8000964 <__aeabi_d2f>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a14      	ldr	r2, [pc, #80]	; (800100c <main+0x158>)
 8000fbc:	6013      	str	r3, [r2, #0]

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <main+0x15c>)
 8000fc2:	f001 fc2f 	bl	8002824 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d087      	beq.n	8000edc <main+0x28>
    {
    	HAL_UART_Transmit (&huart2, "gonderilecek data", sizeof ("gonderilecek data"), 10);
 8000fcc:	230a      	movs	r3, #10
 8000fce:	2212      	movs	r2, #18
 8000fd0:	4910      	ldr	r1, [pc, #64]	; (8001014 <main+0x160>)
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <main+0x12c>)
 8000fd4:	f004 fcf4 	bl	80059c0 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 8000fd8:	e780      	b.n	8000edc <main+0x28>
 8000fda:	bf00      	nop
 8000fdc:	20000244 	.word	0x20000244
 8000fe0:	200001a0 	.word	0x200001a0
 8000fe4:	20000260 	.word	0x20000260
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	2000024d 	.word	0x2000024d
 8000ff0:	2000024e 	.word	0x2000024e
 8000ff4:	2000024f 	.word	0x2000024f
 8000ff8:	20000250 	.word	0x20000250
 8000ffc:	20000254 	.word	0x20000254
 8001000:	20000252 	.word	0x20000252
 8001004:	40240000 	.word	0x40240000
 8001008:	20000258 	.word	0x20000258
 800100c:	2000025c 	.word	0x2000025c
 8001010:	40020000 	.word	0x40020000
 8001014:	0800a58c 	.word	0x0800a58c

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f009 f99e 	bl	800a368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <SystemClock_Config+0xcc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <SystemClock_Config+0xcc>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <SystemClock_Config+0xcc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <SystemClock_Config+0xd0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <SystemClock_Config+0xd0>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <SystemClock_Config+0xd0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2301      	movs	r3, #1
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001088:	2308      	movs	r3, #8
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800108c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001096:	2307      	movs	r3, #7
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fde0 	bl	8004c64 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010aa:	f000 f9fb 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 f841 	bl	8005154 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d8:	f000 f9e4 	bl	80014a4 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3750      	adds	r7, #80	; 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C1_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C1_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C1_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C1_Init+0x50>)
 800112a:	f002 ffb7 	bl	800409c <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 f9b6 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000ac 	.word	0x200000ac
 8001140:	40005400 	.word	0x40005400
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_I2S3_Init+0x54>)
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <MX_I2S3_Init+0x58>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_I2S3_Init+0x54>)
 8001154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001158:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_I2S3_Init+0x54>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_I2S3_Init+0x54>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_I2S3_Init+0x54>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_I2S3_Init+0x54>)
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <MX_I2S3_Init+0x5c>)
 8001172:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_I2S3_Init+0x54>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_I2S3_Init+0x54>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_I2S3_Init+0x54>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_I2S3_Init+0x54>)
 8001188:	f003 f8cc 	bl	8004324 <HAL_I2S_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001192:	f000 f987 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000100 	.word	0x20000100
 80011a0:	40003c00 	.word	0x40003c00
 80011a4:	00017700 	.word	0x00017700

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_SPI1_Init+0x64>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MX_SPI1_Init+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SPI1_Init+0x64>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI1_Init+0x64>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SPI1_Init+0x64>)
 80011fa:	f004 fb0b 	bl	8005814 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 f94e 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000148 	.word	0x20000148
 8001210:	40013000 	.word	0x40013000

08001214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART2_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800124c:	f004 fb6b 	bl	8005926 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f925 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001a0 	.word	0x200001a0
 8001264:	40004400 	.word	0x40004400

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2010      	movs	r0, #16
 8001290:	f000 fcf3 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001294:	2010      	movs	r0, #16
 8001296:	f000 fd0c 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a71      	ldr	r2, [pc, #452]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a6a      	ldr	r2, [pc, #424]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <MX_GPIO_Init+0x1e4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b61      	ldr	r3, [pc, #388]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a5c      	ldr	r2, [pc, #368]	; (800148c <MX_GPIO_Init+0x1e4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b56      	ldr	r3, [pc, #344]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a55      	ldr	r2, [pc, #340]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a4e      	ldr	r2, [pc, #312]	; (800148c <MX_GPIO_Init+0x1e4>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b4c      	ldr	r3, [pc, #304]	; (800148c <MX_GPIO_Init+0x1e4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	4849      	ldr	r0, [pc, #292]	; (8001490 <MX_GPIO_Init+0x1e8>)
 800136c:	f001 fa72 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	4847      	ldr	r0, [pc, #284]	; (8001494 <MX_GPIO_Init+0x1ec>)
 8001376:	f001 fa6d 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800137a:	2200      	movs	r2, #0
 800137c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001380:	4845      	ldr	r0, [pc, #276]	; (8001498 <MX_GPIO_Init+0x1f0>)
 8001382:	f001 fa67 	bl	8002854 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	483c      	ldr	r0, [pc, #240]	; (8001490 <MX_GPIO_Init+0x1e8>)
 800139e:	f001 f8a5 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4836      	ldr	r0, [pc, #216]	; (8001494 <MX_GPIO_Init+0x1ec>)
 80013ba:	f001 f897 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013be:	2308      	movs	r3, #8
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ce:	2305      	movs	r3, #5
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	482e      	ldr	r0, [pc, #184]	; (8001494 <MX_GPIO_Init+0x1ec>)
 80013da:	f001 f887 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	482a      	ldr	r0, [pc, #168]	; (800149c <MX_GPIO_Init+0x1f4>)
 80013f4:	f001 f87a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013f8:	2304      	movs	r3, #4
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <MX_GPIO_Init+0x1f8>)
 800140c:	f001 f86e 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001422:	2305      	movs	r3, #5
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <MX_GPIO_Init+0x1f8>)
 800142e:	f001 f85d 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001432:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001436:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_GPIO_Init+0x1f0>)
 800144c:	f001 f84e 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_GPIO_Init+0x1f0>)
 8001464:	f001 f842 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800146c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0x1e8>)
 800147e:	f001 f835 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	; 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40021000 	.word	0x40021000
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_MspInit+0x4c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ee:	2007      	movs	r0, #7
 80014f0:	f000 fbb8 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_I2C_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800153e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_I2C_MspInit+0x8c>)
 800155c:	f000 ffc6 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a31      	ldr	r2, [pc, #196]	; (8001680 <HAL_I2S_MspInit+0xf0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d15a      	bne.n	8001676 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80015c4:	23c0      	movs	r3, #192	; 0xc0
 80015c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 ffdf 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80015dc:	f7ff ff62 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_I2S_MspInit+0xf4>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001634:	2310      	movs	r3, #16
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001644:	2306      	movs	r3, #6
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <HAL_I2S_MspInit+0xf8>)
 8001650:	f000 ff4c 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001654:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001666:	2306      	movs	r3, #6
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <HAL_I2S_MspInit+0xfc>)
 8001672:	f000 ff3b 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40003c00 	.word	0x40003c00
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_SPI_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12b      	bne.n	800170a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016ea:	23e0      	movs	r3, #224	; 0xe0
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fa:	2305      	movs	r3, #5
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_SPI_MspInit+0x8c>)
 8001706:	f000 fef1 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40013000 	.word	0x40013000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a34      	ldr	r2, [pc, #208]	; (8001810 <HAL_UART_MspInit+0xf0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d161      	bne.n	8001806 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_UART_MspInit+0xf4>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177a:	230c      	movs	r3, #12
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178a:	2307      	movs	r3, #7
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4820      	ldr	r0, [pc, #128]	; (8001818 <HAL_UART_MspInit+0xf8>)
 8001796:	f000 fea9 	bl	80024ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_UART_MspInit+0xfc>)
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_UART_MspInit+0x100>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017da:	4810      	ldr	r0, [pc, #64]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017dc:	f000 fa84 	bl	8001ce8 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80017e6:	f7ff fe5d 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2026      	movs	r0, #38	; 0x26
 80017fc:	f000 fa3d 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001800:	2026      	movs	r0, #38	; 0x26
 8001802:	f000 fa56 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40004400 	.word	0x40004400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	200001e4 	.word	0x200001e4
 8001820:	40026088 	.word	0x40026088

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <NMI_Handler+0x4>

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f8e4 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream5_IRQHandler+0x10>)
 800187e:	f000 fbcb 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001e4 	.word	0x200001e4

0800188c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART2_IRQHandler+0x10>)
 8001892:	f004 f957 	bl	8005b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001a0 	.word	0x200001a0

080018a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <OTG_FS_IRQHandler+0x10>)
 80018a6:	f001 fa59 	bl	8002d5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000648 	.word	0x20000648

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f008 fd06 	bl	800a2f4 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000264 	.word	0x20000264
 800191c:	20000960 	.word	0x20000960

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f008 fcc5 	bl	800a300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fa9d 	bl	8000eb4 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001988:	0800a5d4 	.word	0x0800a5d4
  ldr r2, =_sbss
 800198c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001990:	2000095c 	.word	0x2000095c

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f94f 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fd70 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f967 	bl	8001cce <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 f92f 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000268 	.word	0x20000268

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000268 	.word	0x20000268

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff29 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff3e 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff31 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff feb6 	bl	8001a64 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e099      	b.n	8001e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	e00f      	b.n	8001d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d26:	f7ff fe9d 	bl	8001a64 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d908      	bls.n	8001d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e078      	b.n	8001e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e8      	bne.n	8001d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_DMA_Init+0x158>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f023 0307 	bic.w	r3, r3, #7
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d117      	bne.n	8001e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fb01 	bl	80023f4 <DMA_CheckFifoParam>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2240      	movs	r2, #64	; 0x40
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e06:	2301      	movs	r3, #1
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fab8 	bl	8002388 <DMA_CalcBaseAndBitshift>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	f010803f 	.word	0xf010803f

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Start_IT+0x26>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e040      	b.n	8001eec <HAL_DMA_Start_IT+0xa8>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d12f      	bne.n	8001ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fa4a 	bl	800232c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	223f      	movs	r2, #63	; 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0216 	orr.w	r2, r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e005      	b.n	8001eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7ff fdaf 	bl	8001a64 <HAL_GetTick>
 8001f06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d008      	beq.n	8001f26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e052      	b.n	8001fcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0216 	bic.w	r2, r2, #22
 8001f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_DMA_Abort+0x62>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f76:	e013      	b.n	8001fa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f78:	f7ff fd74 	bl	8001a64 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d90c      	bls.n	8001fa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e015      	b.n	8001fcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e4      	bne.n	8001f78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	223f      	movs	r2, #63	; 0x3f
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00c      	b.n	800200c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002024:	4b8e      	ldr	r3, [pc, #568]	; (8002260 <HAL_DMA_IRQHandler+0x248>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a8e      	ldr	r2, [pc, #568]	; (8002264 <HAL_DMA_IRQHandler+0x24c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2208      	movs	r2, #8
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2208      	movs	r2, #8
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2210      	movs	r2, #16
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d043      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2210      	movs	r2, #16
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d018      	beq.n	800215a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
 8002146:	e01f      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e016      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2220      	movs	r2, #32
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808f 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8087 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2220      	movs	r2, #32
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d136      	bne.n	8002230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0216 	bic.w	r2, r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x1da>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	223f      	movs	r2, #63	; 0x3f
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07e      	beq.n	8002324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
        }
        return;
 800222e:	e079      	b.n	8002324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01d      	beq.n	800227a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e02c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000
 8002264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e01e      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0210 	bic.w	r2, r2, #16
 8002296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d032      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2205      	movs	r2, #5
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d307      	bcc.n	8002300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f2      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x2cc>
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d108      	bne.n	800236c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236a:	e007      	b.n	800237c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b10      	subs	r3, #16
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <DMA_CalcBaseAndBitshift+0x64>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <DMA_CalcBaseAndBitshift+0x68>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d909      	bls.n	80023ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58
 80023c8:	e007      	b.n	80023da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	aaaaaaab 	.word	0xaaaaaaab
 80023f0:	0800a5bc 	.word	0x0800a5bc

080023f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d856      	bhi.n	80024c2 <DMA_CheckFifoParam+0xce>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <DMA_CheckFifoParam+0x28>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800242d 	.word	0x0800242d
 8002420:	0800243f 	.word	0x0800243f
 8002424:	0800242d 	.word	0x0800242d
 8002428:	080024c3 	.word	0x080024c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d046      	beq.n	80024c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e043      	b.n	80024c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002446:	d140      	bne.n	80024ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e03d      	b.n	80024ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002456:	d121      	bne.n	800249c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d837      	bhi.n	80024ce <DMA_CheckFifoParam+0xda>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <DMA_CheckFifoParam+0x70>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247b 	.word	0x0800247b
 800246c:	08002475 	.word	0x08002475
 8002470:	0800248d 	.word	0x0800248d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e030      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d025      	beq.n	80024d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248a:	e022      	b.n	80024d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249a:	e01c      	b.n	80024d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d903      	bls.n	80024aa <DMA_CheckFifoParam+0xb6>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d003      	beq.n	80024b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a8:	e018      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      break;
 80024ae:	e015      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e00b      	b.n	80024da <DMA_CheckFifoParam+0xe6>
      break;
 80024c2:	bf00      	nop
 80024c4:	e00a      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e008      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e006      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e004      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;   
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
    }
  } 
  
  return status; 
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e16b      	b.n	80027e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 815a 	bne.w	80027da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80b4 	beq.w	80027da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a5b      	ldr	r2, [pc, #364]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_GPIO_Init+0x314>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_GPIO_Init+0x318>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x31c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x320>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <HAL_GPIO_Init+0x324>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x216>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_GPIO_Init+0x328>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x212>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4b      	ldr	r2, [pc, #300]	; (800281c <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x20a>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026f6:	2308      	movs	r3, #8
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a32      	ldr	r2, [pc, #200]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_GPIO_Init+0x334>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae90 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002888:	b08f      	sub	sp, #60	; 0x3c
 800288a:	af0a      	add	r7, sp, #40	; 0x28
 800288c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e054      	b.n	8002942 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f007 fa74 	bl	8009da0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2203      	movs	r2, #3
 80028bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 faa2 	bl	8006e20 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	687e      	ldr	r6, [r7, #4]
 80028e4:	466d      	mov	r5, sp
 80028e6:	f106 0410 	add.w	r4, r6, #16
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fa:	1d33      	adds	r3, r6, #4
 80028fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	f004 fa1c 	bl	8006d3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fa99 	bl	8006e42 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	687e      	ldr	r6, [r7, #4]
 8002918:	466d      	mov	r5, sp
 800291a:	f106 0410 	add.w	r4, r6, #16
 800291e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292a:	e885 0003 	stmia.w	r5, {r0, r1}
 800292e:	1d33      	adds	r3, r6, #4
 8002930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	f004 fc22 	bl	800717c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800294a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b089      	sub	sp, #36	; 0x24
 800294e:	af04      	add	r7, sp, #16
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	4608      	mov	r0, r1
 8002954:	4611      	mov	r1, r2
 8002956:	461a      	mov	r2, r3
 8002958:	4603      	mov	r3, r0
 800295a:	70fb      	strb	r3, [r7, #3]
 800295c:	460b      	mov	r3, r1
 800295e:	70bb      	strb	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_HCD_HC_Init+0x28>
 800296e:	2302      	movs	r3, #2
 8002970:	e076      	b.n	8002a60 <HAL_HCD_HC_Init+0x116>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	333d      	adds	r3, #61	; 0x3d
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3338      	adds	r3, #56	; 0x38
 800299a:	787a      	ldrb	r2, [r7, #1]
 800299c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3340      	adds	r3, #64	; 0x40
 80029ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3339      	adds	r3, #57	; 0x39
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	333f      	adds	r3, #63	; 0x3f
 80029d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	78ba      	ldrb	r2, [r7, #2]
 80029da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029de:	b2d0      	uxtb	r0, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333a      	adds	r3, #58	; 0x3a
 80029ec:	4602      	mov	r2, r0
 80029ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da09      	bge.n	8002a0c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	333b      	adds	r3, #59	; 0x3b
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e008      	b.n	8002a1e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	333b      	adds	r3, #59	; 0x3b
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a30:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	787c      	ldrb	r4, [r7, #1]
 8002a38:	78ba      	ldrb	r2, [r7, #2]
 8002a3a:	78f9      	ldrb	r1, [r7, #3]
 8002a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	f004 fd1b 	bl	8007488 <USB_HC_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_HCD_HC_Halt+0x1e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e00f      	b.n	8002aa6 <HAL_HCD_HC_Halt+0x3e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 ff6b 	bl	8007972 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	70fb      	strb	r3, [r7, #3]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70bb      	strb	r3, [r7, #2]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333b      	adds	r3, #59	; 0x3b
 8002ad8:	78ba      	ldrb	r2, [r7, #2]
 8002ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	333f      	adds	r3, #63	; 0x3f
 8002aea:	787a      	ldrb	r2, [r7, #1]
 8002aec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002aee:	7c3b      	ldrb	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d112      	bne.n	8002b1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3342      	adds	r3, #66	; 0x42
 8002b02:	2203      	movs	r2, #3
 8002b04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	333d      	adds	r3, #61	; 0x3d
 8002b14:	7f3a      	ldrb	r2, [r7, #28]
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e008      	b.n	8002b2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3342      	adds	r3, #66	; 0x42
 8002b28:	2202      	movs	r2, #2
 8002b2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	f200 80c6 	bhi.w	8002cc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002cad 	.word	0x08002cad
 8002b44:	08002bb1 	.word	0x08002bb1
 8002b48:	08002c2f 	.word	0x08002c2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b4c:	7c3b      	ldrb	r3, [r7, #16]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	f040 80b8 	bne.w	8002cc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002b54:	78bb      	ldrb	r3, [r7, #2]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80b4 	bne.w	8002cc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b5c:	8b3b      	ldrh	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3355      	adds	r3, #85	; 0x55
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3355      	adds	r3, #85	; 0x55
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3342      	adds	r3, #66	; 0x42
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b9a:	e093      	b.n	8002cc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3342      	adds	r3, #66	; 0x42
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
      break;
 8002bae:	e089      	b.n	8002cc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002bb0:	78bb      	ldrb	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11d      	bne.n	8002bf2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3355      	adds	r3, #85	; 0x55
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3342      	adds	r3, #66	; 0x42
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002bdc:	e073      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3342      	adds	r3, #66	; 0x42
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
      break;
 8002bf0:	e069      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3354      	adds	r3, #84	; 0x54
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3342      	adds	r3, #66	; 0x42
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
      break;
 8002c18:	e055      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3342      	adds	r3, #66	; 0x42
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]
      break;
 8002c2c:	e04b      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c2e:	78bb      	ldrb	r3, [r7, #2]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11d      	bne.n	8002c70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3355      	adds	r3, #85	; 0x55
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3342      	adds	r3, #66	; 0x42
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c5a:	e034      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3342      	adds	r3, #66	; 0x42
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
      break;
 8002c6e:	e02a      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3354      	adds	r3, #84	; 0x54
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3342      	adds	r3, #66	; 0x42
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
      break;
 8002c96:	e016      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3342      	adds	r3, #66	; 0x42
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3342      	adds	r3, #66	; 0x42
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002cc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3344      	adds	r3, #68	; 0x44
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	8b3a      	ldrh	r2, [r7, #24]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	202c      	movs	r0, #44	; 0x2c
 8002ce0:	fb00 f303 	mul.w	r3, r0, r3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334c      	adds	r3, #76	; 0x4c
 8002ce8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3350      	adds	r3, #80	; 0x50
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3339      	adds	r3, #57	; 0x39
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3361      	adds	r3, #97	; 0x61
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	222c      	movs	r2, #44	; 0x2c
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	18d1      	adds	r1, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f004 fcbe 	bl	80076cc <USB_HC_StartXfer>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 f9bf 	bl	80070f6 <USB_GetMode>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f040 80f6 	bne.w	8002f6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 f9a3 	bl	80070d0 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80ec 	beq.w	8002f6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 f99a 	bl	80070d0 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da6:	d104      	bne.n	8002db2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f98a 	bl	80070d0 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc6:	d104      	bne.n	8002dd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 f97a 	bl	80070d0 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de6:	d104      	bne.n	8002df2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 f96a 	bl	80070d0 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d103      	bne.n	8002e0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 f95c 	bl	80070d0 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e22:	d11c      	bne.n	8002e5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e3e:	2110      	movs	r1, #16
 8002e40:	6938      	ldr	r0, [r7, #16]
 8002e42:	f004 f84b 	bl	8006edc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f004 f87c 	bl	8006f44 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 fa52 	bl	80072fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f007 f81f 	bl	8009e9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f934 	bl	80070d0 <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e72:	d102      	bne.n	8002e7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f001 f89e 	bl	8003fb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f926 	bl	80070d0 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d106      	bne.n	8002e9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f006 ffe8 	bl	8009e64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 f915 	bl	80070d0 <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d101      	bne.n	8002eb4 <HAL_HCD_IRQHandler+0x158>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_HCD_IRQHandler+0x15a>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0210 	bic.w	r2, r2, #16
 8002ec8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 ffa1 	bl	8003e12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 f8f3 	bl	80070d0 <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef4:	d13a      	bne.n	8002f6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 fd28 	bl	8007950 <USB_HC_ReadInterrupt>
 8002f00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e025      	b.n	8002f54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d018      	beq.n	8002f4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f32:	d106      	bne.n	8002f42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8ab 	bl	8003096 <HCD_HC_IN_IRQHandler>
 8002f40:	e005      	b.n	8002f4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fbf9 	bl	8003740 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3d4      	bcc.n	8002f08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	e000      	b.n	8002f6c <HAL_HCD_IRQHandler+0x210>
      return;
 8002f6a:	bf00      	nop
    }
  }
}
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_HCD_Start+0x16>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e013      	b.n	8002fb0 <HAL_HCD_Start+0x3e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fa14 	bl	80073c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 ff2c 	bl	8006dfe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_HCD_Stop+0x16>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e00d      	b.n	8002fea <HAL_HCD_Stop+0x32>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fe02 	bl	8007be4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 f9b6 	bl	8007370 <USB_ResetPort>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3360      	adds	r3, #96	; 0x60
 8003028:	781b      	ldrb	r3, [r3, #0]
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3350      	adds	r3, #80	; 0x50
 8003050:	681b      	ldr	r3, [r3, #0]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 f9fa 	bl	8007464 <USB_GetCurrentFrame>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 f9d5 	bl	8007436 <USB_GetHostSpeed>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d11a      	bne.n	80030fc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	461a      	mov	r2, r3
 80030d4:	2304      	movs	r3, #4
 80030d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3361      	adds	r3, #97	; 0x61
 80030e6:	2206      	movs	r2, #6
 80030e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fc3c 	bl	8007972 <USB_HC_Halt>
 80030fa:	e0af      	b.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003112:	d11b      	bne.n	800314c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003126:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	2207      	movs	r2, #7
 8003138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fc14 	bl	8007972 <USB_HC_Halt>
 800314a:	e087      	b.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d109      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	2320      	movs	r3, #32
 8003172:	6093      	str	r3, [r2, #8]
 8003174:	e072      	b.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d11a      	bne.n	80031c2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	2308      	movs	r3, #8
 800319c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3361      	adds	r3, #97	; 0x61
 80031ac:	2205      	movs	r2, #5
 80031ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fbd9 	bl	8007972 <USB_HC_Halt>
 80031c0:	e04c      	b.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d8:	d11b      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3361      	adds	r3, #97	; 0x61
 80031fc:	2208      	movs	r2, #8
 80031fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f004 fbb1 	bl	8007972 <USB_HC_Halt>
 8003210:	e024      	b.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d119      	bne.n	800325c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3361      	adds	r3, #97	; 0x61
 8003248:	2206      	movs	r2, #6
 800324a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fb8b 	bl	8007972 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003272:	d112      	bne.n	800329a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fb77 	bl	8007972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	461a      	mov	r2, r3
 8003292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003296:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003298:	e24e      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 80df 	bne.w	8003470 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d019      	beq.n	80032ee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3348      	adds	r3, #72	; 0x48
 80032c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0159      	lsls	r1, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	440b      	add	r3, r1
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80032dc:	1ad2      	subs	r2, r2, r3
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	202c      	movs	r0, #44	; 0x2c
 80032e4:	fb00 f303 	mul.w	r3, r0, r3
 80032e8:	440b      	add	r3, r1
 80032ea:	3350      	adds	r3, #80	; 0x50
 80032ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3361      	adds	r3, #97	; 0x61
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	335c      	adds	r3, #92	; 0x5c
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	333f      	adds	r3, #63	; 0x3f
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	333f      	adds	r3, #63	; 0x3f
 8003346:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003348:	2b02      	cmp	r3, #2
 800334a:	d111      	bne.n	8003370 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f004 fb0b 	bl	8007972 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2310      	movs	r3, #16
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	e03a      	b.n	80033e6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	333f      	adds	r3, #63	; 0x3f
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d009      	beq.n	8003398 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	333f      	adds	r3, #63	; 0x3f
 8003392:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003394:	2b01      	cmp	r3, #1
 8003396:	d126      	bne.n	80033e6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	0151      	lsls	r1, r2, #5
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	440a      	add	r2, r1
 80033ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	b2d9      	uxtb	r1, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	202c      	movs	r0, #44	; 0x2c
 80033d4:	fb00 f303 	mul.w	r3, r0, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3360      	adds	r3, #96	; 0x60
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f006 fd69 	bl	8009eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d12b      	bne.n	8003446 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3348      	adds	r3, #72	; 0x48
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	202c      	movs	r0, #44	; 0x2c
 8003404:	fb00 f202 	mul.w	r2, r0, r2
 8003408:	440a      	add	r2, r1
 800340a:	3240      	adds	r2, #64	; 0x40
 800340c:	8812      	ldrh	r2, [r2, #0]
 800340e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 818e 	beq.w	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	3354      	adds	r3, #84	; 0x54
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	f083 0301 	eor.w	r3, r3, #1
 8003430:	b2d8      	uxtb	r0, r3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3354      	adds	r3, #84	; 0x54
 8003440:	4602      	mov	r2, r0
 8003442:	701a      	strb	r2, [r3, #0]
}
 8003444:	e178      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3354      	adds	r3, #84	; 0x54
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2d8      	uxtb	r0, r3
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3354      	adds	r3, #84	; 0x54
 800346a:	4602      	mov	r2, r0
 800346c:	701a      	strb	r2, [r3, #0]
}
 800346e:	e163      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 80f6 	bne.w	8003674 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d109      	bne.n	80034b0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3360      	adds	r3, #96	; 0x60
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e0c9      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3361      	adds	r3, #97	; 0x61
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d109      	bne.n	80034d8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3360      	adds	r3, #96	; 0x60
 80034d2:	2205      	movs	r2, #5
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e0b5      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3361      	adds	r3, #97	; 0x61
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d009      	beq.n	8003500 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3361      	adds	r3, #97	; 0x61
 80034fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d150      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	335c      	adds	r3, #92	; 0x5c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	202c      	movs	r0, #44	; 0x2c
 8003518:	fb00 f303 	mul.w	r3, r0, r3
 800351c:	440b      	add	r3, r1
 800351e:	335c      	adds	r3, #92	; 0x5c
 8003520:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	335c      	adds	r3, #92	; 0x5c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d912      	bls.n	800355c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	335c      	adds	r3, #92	; 0x5c
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	2204      	movs	r2, #4
 8003558:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800355a:	e073      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003584:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800358c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035a0:	e050      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3361      	adds	r3, #97	; 0x61
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d122      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3360      	adds	r3, #96	; 0x60
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e023      	b.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3361      	adds	r3, #97	; 0x61
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b07      	cmp	r3, #7
 800360e:	d119      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	335c      	adds	r3, #92	; 0x5c
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	202c      	movs	r0, #44	; 0x2c
 8003628:	fb00 f303 	mul.w	r3, r0, r3
 800362c:	440b      	add	r3, r1
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	3360      	adds	r3, #96	; 0x60
 8003640:	2204      	movs	r2, #4
 8003642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	461a      	mov	r2, r3
 8003652:	2302      	movs	r3, #2
 8003654:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	b2d9      	uxtb	r1, r3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	202c      	movs	r0, #44	; 0x2c
 8003660:	fb00 f303 	mul.w	r3, r0, r3
 8003664:	4413      	add	r3, r2
 8003666:	3360      	adds	r3, #96	; 0x60
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f006 fc23 	bl	8009eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003672:	e061      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d156      	bne.n	8003738 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	333f      	adds	r3, #63	; 0x3f
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d111      	bne.n	80036c2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	335c      	adds	r3, #92	; 0x5c
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 f959 	bl	8007972 <USB_HC_Halt>
 80036c0:	e031      	b.n	8003726 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	333f      	adds	r3, #63	; 0x3f
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	333f      	adds	r3, #63	; 0x3f
 80036e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d11d      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3361      	adds	r3, #97	; 0x61
 8003712:	2203      	movs	r2, #3
 8003714:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f004 f926 	bl	8007972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	461a      	mov	r2, r3
 8003734:	2310      	movs	r3, #16
 8003736:	6093      	str	r3, [r2, #8]
}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d11a      	bne.n	80037a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	2304      	movs	r3, #4
 8003780:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3361      	adds	r3, #97	; 0x61
 8003790:	2206      	movs	r2, #6
 8003792:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 f8e7 	bl	8007972 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80037a4:	e331      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d12e      	bne.n	800381a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2320      	movs	r3, #32
 80037cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	333d      	adds	r3, #61	; 0x3d
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	f040 8313 	bne.w	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	333d      	adds	r3, #61	; 0x3d
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3360      	adds	r3, #96	; 0x60
 8003804:	2202      	movs	r2, #2
 8003806:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f004 f8ad 	bl	8007972 <USB_HC_Halt>
}
 8003818:	e2f7      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d112      	bne.n	8003858 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003844:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f004 f88e 	bl	8007972 <USB_HC_Halt>
}
 8003856:	e2d8      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d140      	bne.n	80038f0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	335c      	adds	r3, #92	; 0x5c
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d111      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	333d      	adds	r3, #61	; 0x3d
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	461a      	mov	r2, r3
 80038b6:	2340      	movs	r3, #64	; 0x40
 80038b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c6:	461a      	mov	r2, r3
 80038c8:	2301      	movs	r3, #1
 80038ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3361      	adds	r3, #97	; 0x61
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f004 f842 	bl	8007972 <USB_HC_Halt>
}
 80038ee:	e28c      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d12c      	bne.n	8003960 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3361      	adds	r3, #97	; 0x61
 8003914:	2204      	movs	r2, #4
 8003916:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	333d      	adds	r3, #61	; 0x3d
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	335c      	adds	r3, #92	; 0x5c
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f004 f813 	bl	8007972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	6093      	str	r3, [r2, #8]
}
 800395e:	e254      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11a      	bne.n	80039ac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	461a      	mov	r2, r3
 8003984:	2308      	movs	r3, #8
 8003986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3361      	adds	r3, #97	; 0x61
 8003996:	2205      	movs	r2, #5
 8003998:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 ffe4 	bl	8007972 <USB_HC_Halt>
}
 80039aa:	e22e      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d140      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	335c      	adds	r3, #92	; 0x5c
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	3361      	adds	r3, #97	; 0x61
 80039e2:	2203      	movs	r2, #3
 80039e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	333d      	adds	r3, #61	; 0x3d
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	333c      	adds	r3, #60	; 0x3c
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	333d      	adds	r3, #61	; 0x3d
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 ffa1 	bl	8007972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2310      	movs	r3, #16
 8003a40:	6093      	str	r3, [r2, #8]
}
 8003a42:	e1e2      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d164      	bne.n	8003b24 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d111      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3361      	adds	r3, #97	; 0x61
 8003a70:	2206      	movs	r2, #6
 8003a72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 ff77 	bl	8007972 <USB_HC_Halt>
 8003a84:	e044      	b.n	8003b10 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	335c      	adds	r3, #92	; 0x5c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	202c      	movs	r0, #44	; 0x2c
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	335c      	adds	r3, #92	; 0x5c
 8003aa6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	335c      	adds	r3, #92	; 0x5c
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d920      	bls.n	8003afe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3360      	adds	r3, #96	; 0x60
 8003adc:	2204      	movs	r2, #4
 8003ade:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	b2d9      	uxtb	r1, r3
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	202c      	movs	r0, #44	; 0x2c
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3360      	adds	r3, #96	; 0x60
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f006 f9de 	bl	8009eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003afc:	e008      	b.n	8003b10 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3360      	adds	r3, #96	; 0x60
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	6093      	str	r3, [r2, #8]
}
 8003b22:	e172      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d11b      	bne.n	8003b74 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 ff0a 	bl	8007972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b70:	6093      	str	r3, [r2, #8]
}
 8003b72:	e14a      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	f040 813f 	bne.w	8003e0a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3361      	adds	r3, #97	; 0x61
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d17d      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3360      	adds	r3, #96	; 0x60
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	333f      	adds	r3, #63	; 0x3f
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d00a      	beq.n	8003bdc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	333f      	adds	r3, #63	; 0x3f
 8003bd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	f040 8100 	bne.w	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3355      	adds	r3, #85	; 0x55
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2d8      	uxtb	r0, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	3355      	adds	r3, #85	; 0x55
 8003c08:	4602      	mov	r2, r0
 8003c0a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 80e3 	bne.w	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	212c      	movs	r1, #44	; 0x2c
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	334c      	adds	r3, #76	; 0x4c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80d8 	beq.w	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	334c      	adds	r3, #76	; 0x4c
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	202c      	movs	r0, #44	; 0x2c
 8003c42:	fb00 f202 	mul.w	r2, r0, r2
 8003c46:	440a      	add	r2, r1
 8003c48:	3240      	adds	r2, #64	; 0x40
 8003c4a:	8812      	ldrh	r2, [r2, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	202c      	movs	r0, #44	; 0x2c
 8003c56:	fb00 f202 	mul.w	r2, r0, r2
 8003c5a:	440a      	add	r2, r1
 8003c5c:	3240      	adds	r2, #64	; 0x40
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80b5 	beq.w	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3355      	adds	r3, #85	; 0x55
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2d8      	uxtb	r0, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3355      	adds	r3, #85	; 0x55
 8003c96:	4602      	mov	r2, r0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e09f      	b.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3361      	adds	r3, #97	; 0x61
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d109      	bne.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3360      	adds	r3, #96	; 0x60
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e08b      	b.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3361      	adds	r3, #97	; 0x61
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d109      	bne.n	8003cec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3360      	adds	r3, #96	; 0x60
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e077      	b.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3361      	adds	r3, #97	; 0x61
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d109      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3360      	adds	r3, #96	; 0x60
 8003d0e:	2205      	movs	r2, #5
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e063      	b.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3361      	adds	r3, #97	; 0x61
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d009      	beq.n	8003d3c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3361      	adds	r3, #97	; 0x61
 8003d36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d14f      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	335c      	adds	r3, #92	; 0x5c
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	202c      	movs	r0, #44	; 0x2c
 8003d54:	fb00 f303 	mul.w	r3, r0, r3
 8003d58:	440b      	add	r3, r1
 8003d5a:	335c      	adds	r3, #92	; 0x5c
 8003d5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d912      	bls.n	8003d98 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	335c      	adds	r3, #92	; 0x5c
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e021      	b.n	8003ddc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3360      	adds	r3, #96	; 0x60
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dc0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dc8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	461a      	mov	r2, r3
 8003dea:	2302      	movs	r3, #2
 8003dec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	b2d9      	uxtb	r1, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	202c      	movs	r0, #44	; 0x2c
 8003df8:	fb00 f303 	mul.w	r3, r0, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3360      	adds	r3, #96	; 0x60
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f006 f857 	bl	8009eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e0a:	bf00      	nop
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	0c5b      	lsrs	r3, r3, #17
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d004      	beq.n	8003e58 <HCD_RXQLVL_IRQHandler+0x46>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	f000 80a9 	beq.w	8003fa8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e56:	e0aa      	b.n	8003fae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80a6 	beq.w	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3344      	adds	r3, #68	; 0x44
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 809b 	beq.w	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3350      	adds	r3, #80	; 0x50
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	441a      	add	r2, r3
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f303 	mul.w	r3, r0, r3
 8003e94:	440b      	add	r3, r1
 8003e96:	334c      	adds	r3, #76	; 0x4c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d87a      	bhi.n	8003f94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3344      	adds	r3, #68	; 0x44
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f003 f8b2 	bl	8007020 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3344      	adds	r3, #68	; 0x44
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	441a      	add	r2, r3
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	202c      	movs	r0, #44	; 0x2c
 8003ed6:	fb00 f303 	mul.w	r3, r0, r3
 8003eda:	440b      	add	r3, r1
 8003edc:	3344      	adds	r3, #68	; 0x44
 8003ede:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	3350      	adds	r3, #80	; 0x50
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	441a      	add	r2, r3
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	202c      	movs	r0, #44	; 0x2c
 8003efa:	fb00 f303 	mul.w	r3, r0, r3
 8003efe:	440b      	add	r3, r1
 8003f00:	3350      	adds	r3, #80	; 0x50
 8003f02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	0cdb      	lsrs	r3, r3, #19
 8003f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3340      	adds	r3, #64	; 0x40
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d13c      	bne.n	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d039      	beq.n	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3354      	adds	r3, #84	; 0x54
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f083 0301 	eor.w	r3, r3, #1
 8003f7e:	b2d8      	uxtb	r0, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3354      	adds	r3, #84	; 0x54
 8003f8e:	4602      	mov	r2, r0
 8003f90:	701a      	strb	r2, [r3, #0]
      break;
 8003f92:	e00b      	b.n	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3360      	adds	r3, #96	; 0x60
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	701a      	strb	r2, [r3, #0]
      break;
 8003fa6:	e001      	b.n	8003fac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003fac:	bf00      	nop
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fe2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d10b      	bne.n	8004006 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f005 ff41 	bl	8009e80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d132      	bne.n	8004076 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f043 0308 	orr.w	r3, r3, #8
 8004016:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d126      	bne.n	8004070 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d113      	bne.n	8004052 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004034:	d106      	bne.n	8004044 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f003 f95d 	bl	80072fc <USB_InitFSLSPClkSel>
 8004042:	e011      	b.n	8004068 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f003 f956 	bl	80072fc <USB_InitFSLSPClkSel>
 8004050:	e00a      	b.n	8004068 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d106      	bne.n	8004068 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004060:	461a      	mov	r2, r3
 8004062:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004066:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f005 ff33 	bl	8009ed4 <HAL_HCD_PortEnabled_Callback>
 800406e:	e002      	b.n	8004076 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f005 ff3d 	bl	8009ef0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b20      	cmp	r3, #32
 800407e:	d103      	bne.n	8004088 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e12b      	b.n	8004306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fa1c 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004100:	f001 fa20 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a81      	ldr	r2, [pc, #516]	; (8004310 <HAL_I2C_Init+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d807      	bhi.n	8004120 <HAL_I2C_Init+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a80      	ldr	r2, [pc, #512]	; (8004314 <HAL_I2C_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e006      	b.n	800412e <HAL_I2C_Init+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_I2C_Init+0x27c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0e7      	b.n	8004306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a78      	ldr	r2, [pc, #480]	; (800431c <HAL_I2C_Init+0x280>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0c9b      	lsrs	r3, r3, #18
 8004140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_I2C_Init+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <HAL_I2C_Init+0xd4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_I2C_Init+0xe8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a69      	ldr	r2, [pc, #420]	; (8004320 <HAL_I2C_Init+0x284>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	495c      	ldr	r1, [pc, #368]	; (8004310 <HAL_I2C_Init+0x274>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d819      	bhi.n	80041d8 <HAL_I2C_Init+0x13c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Init+0x138>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e59      	subs	r1, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	e051      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e04f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_I2C_Init+0x168>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_I2C_Init+0x18e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x196>
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <HAL_I2C_Init+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	440b      	add	r3, r1
 8004248:	fbb0 f3f3 	udiv	r3, r0, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	0099      	lsls	r1, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6809      	ldr	r1, [r1, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6911      	ldr	r1, [r2, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	000186a0 	.word	0x000186a0
 8004314:	001e847f 	.word	0x001e847f
 8004318:	003d08ff 	.word	0x003d08ff
 800431c:	431bde83 	.word	0x431bde83
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e128      	b.n	8004588 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a90      	ldr	r2, [pc, #576]	; (8004590 <HAL_I2S_Init+0x26c>)
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fd f91d 	bl	8001590 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2202      	movs	r2, #2
 8004378:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d060      	beq.n	8004444 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800438a:	2310      	movs	r3, #16
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e001      	b.n	8004394 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b20      	cmp	r3, #32
 800439a:	d802      	bhi.n	80043a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f001 f9d8 	bl	8005758 <HAL_RCCEx_GetPeriphCLKFreq>
 80043a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b2:	d125      	bne.n	8004400 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	3305      	adds	r3, #5
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e01f      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	3305      	adds	r3, #5
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e00e      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fbb2 f2f3 	udiv	r2, r2, r3
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	3305      	adds	r3, #5
 800441c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a5c      	ldr	r2, [pc, #368]	; (8004594 <HAL_I2S_Init+0x270>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e003      	b.n	800444c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004444:	2302      	movs	r3, #2
 8004446:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d902      	bls.n	8004458 <HAL_I2S_Init+0x134>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2bff      	cmp	r3, #255	; 0xff
 8004456:	d907      	bls.n	8004468 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e08f      	b.n	8004588 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	430a      	orrs	r2, r1
 800447a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004486:	f023 030f 	bic.w	r3, r3, #15
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6851      	ldr	r1, [r2, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68d2      	ldr	r2, [r2, #12]
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6992      	ldr	r2, [r2, #24]
 800449e:	430a      	orrs	r2, r1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d161      	bne.n	8004578 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a38      	ldr	r2, [pc, #224]	; (8004598 <HAL_I2S_Init+0x274>)
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a37      	ldr	r2, [pc, #220]	; (800459c <HAL_I2S_Init+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2S_Init+0x1a4>
 80044c4:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <HAL_I2S_Init+0x27c>)
 80044c6:	e001      	b.n	80044cc <HAL_I2S_Init+0x1a8>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	4932      	ldr	r1, [pc, #200]	; (800459c <HAL_I2S_Init+0x278>)
 80044d4:	428a      	cmp	r2, r1
 80044d6:	d101      	bne.n	80044dc <HAL_I2S_Init+0x1b8>
 80044d8:	4a31      	ldr	r2, [pc, #196]	; (80045a0 <HAL_I2S_Init+0x27c>)
 80044da:	e001      	b.n	80044e0 <HAL_I2S_Init+0x1bc>
 80044dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80044e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	; (800459c <HAL_I2S_Init+0x278>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_I2S_Init+0x1d4>
 80044f4:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <HAL_I2S_Init+0x27c>)
 80044f6:	e001      	b.n	80044fc <HAL_I2S_Init+0x1d8>
 80044f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044fc:	2202      	movs	r2, #2
 80044fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <HAL_I2S_Init+0x278>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_I2S_Init+0x1ea>
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <HAL_I2S_Init+0x27c>)
 800450c:	e001      	b.n	8004512 <HAL_I2S_Init+0x1ee>
 800450e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	d003      	beq.n	8004528 <HAL_I2S_Init+0x204>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e001      	b.n	8004534 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800453e:	4313      	orrs	r3, r2
 8004540:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004548:	4313      	orrs	r3, r2
 800454a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004552:	4313      	orrs	r3, r2
 8004554:	b29a      	uxth	r2, r3
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	4313      	orrs	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004560:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0d      	ldr	r2, [pc, #52]	; (800459c <HAL_I2S_Init+0x278>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_I2S_Init+0x24c>
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <HAL_I2S_Init+0x27c>)
 800456e:	e001      	b.n	8004574 <HAL_I2S_Init+0x250>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004574:	897a      	ldrh	r2, [r7, #10]
 8004576:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	0800469b 	.word	0x0800469b
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	080047b1 	.word	0x080047b1
 800459c:	40003800 	.word	0x40003800
 80045a0:	40003400 	.word	0x40003400

080045a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004624:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffb8 	bl	80045a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	b292      	uxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10e      	bne.n	8004692 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004682:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff93 	bl	80045b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d13a      	bne.n	800472c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d109      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d102      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffb4 	bl	800463c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d126      	bne.n	800472c <I2S_IRQHandler+0x92>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d11f      	bne.n	800472c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff50 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d136      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d109      	bne.n	8004756 <I2S_IRQHandler+0xbc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d102      	bne.n	8004756 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff45 	bl	80045e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d122      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d11b      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800477c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff13 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a92      	ldr	r2, [pc, #584]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047ca:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047cc:	e001      	b.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a8b      	ldr	r2, [pc, #556]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ea:	e001      	b.n	80047f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fc:	d004      	beq.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8099 	bne.w	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d107      	bne.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f925 	bl	8004a6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9c8 	bl	8004bcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d13a      	bne.n	80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d035      	beq.n	80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800485a:	4b6e      	ldr	r3, [pc, #440]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800485c:	e001      	b.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800485e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4969      	ldr	r1, [pc, #420]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800486a:	428b      	cmp	r3, r1
 800486c:	d101      	bne.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004870:	e001      	b.n	8004876 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800488a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fe88 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	f040 80c3 	bne.w	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80bd 	beq.w	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a49      	ldr	r2, [pc, #292]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048ee:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f0:	e001      	b.n	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4944      	ldr	r1, [pc, #272]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fe:	428b      	cmp	r3, r1
 8004900:	d101      	bne.n	8004906 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004904:	e001      	b.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe4a 	bl	80045cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004938:	e089      	b.n	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d107      	bne.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8be 	bl	8004ad0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8fd 	bl	8004b68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d12f      	bne.n	80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d02a      	beq.n	80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004990:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499e:	e001      	b.n	80049a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4919      	ldr	r1, [pc, #100]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ac:	428b      	cmp	r3, r1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049b0:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b2:	e001      	b.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fdfa 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d136      	bne.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d031      	beq.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049f8:	e001      	b.n	80049fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4902      	ldr	r1, [pc, #8]	; (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a06:	428b      	cmp	r3, r1
 8004a08:	d106      	bne.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a0a:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a0c:	e006      	b.n	8004a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a0e:	bf00      	nop
 8004a10:	40003800 	.word	0x40003800
 8004a14:	40003400 	.word	0x40003400
 8004a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fdc0 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a4c:	e000      	b.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a4e:	bf00      	nop
}
 8004a50:	bf00      	nop
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c99      	adds	r1, r3, #2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6251      	str	r1, [r2, #36]	; 0x24
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ffc9 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c99      	adds	r1, r3, #2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6251      	str	r1, [r2, #36]	; 0x24
 8004ae2:	8819      	ldrh	r1, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <I2SEx_TxISR_I2SExt+0x22>
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004af0:	e001      	b.n	8004af6 <I2SEx_TxISR_I2SExt+0x26>
 8004af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af6:	460a      	mov	r2, r1
 8004af8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d121      	bne.n	8004b56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <I2SEx_TxISR_I2SExt+0x50>
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004b1e:	e001      	b.n	8004b24 <I2SEx_TxISR_I2SExt+0x54>
 8004b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	490d      	ldr	r1, [pc, #52]	; (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d101      	bne.n	8004b34 <I2SEx_TxISR_I2SExt+0x64>
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004b32:	e001      	b.n	8004b38 <I2SEx_TxISR_I2SExt+0x68>
 8004b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff81 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40003800 	.word	0x40003800
 8004b64:	40003400 	.word	0x40003400

08004b68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68d8      	ldr	r0, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	1c99      	adds	r1, r3, #2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b80:	b282      	uxth	r2, r0
 8004b82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d113      	bne.n	8004bc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004baa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff4a 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <I2SEx_RxISR_I2SExt+0x16>
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004be0:	e001      	b.n	8004be6 <I2SEx_RxISR_I2SExt+0x1a>
 8004be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be6:	68d8      	ldr	r0, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	1c99      	adds	r1, r3, #2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bf2:	b282      	uxth	r2, r0
 8004bf4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d121      	bne.n	8004c52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <I2SEx_RxISR_I2SExt+0x50>
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004c1a:	e001      	b.n	8004c20 <I2SEx_RxISR_I2SExt+0x54>
 8004c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	490d      	ldr	r1, [pc, #52]	; (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d101      	bne.n	8004c30 <I2SEx_RxISR_I2SExt+0x64>
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004c2e:	e001      	b.n	8004c34 <I2SEx_RxISR_I2SExt+0x68>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff03 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40003800 	.word	0x40003800
 8004c60:	40003400 	.word	0x40003400

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e267      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d075      	beq.n	8004d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c82:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b85      	ldr	r3, [pc, #532]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b82      	ldr	r3, [pc, #520]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b7e      	ldr	r3, [pc, #504]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x108>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e242      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x74>
 8004cca:	4b76      	ldr	r3, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a75      	ldr	r2, [pc, #468]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6f      	ldr	r2, [pc, #444]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b6d      	ldr	r3, [pc, #436]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6c      	ldr	r2, [pc, #432]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	4b69      	ldr	r3, [pc, #420]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a68      	ldr	r2, [pc, #416]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a65      	ldr	r2, [pc, #404]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fc fea2 	bl	8001a64 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fc fe9e 	bl	8001a64 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e207      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xc0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fc fe8e 	bl	8001a64 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fe8a 	bl	8001a64 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e1f3      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0xe8>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d063      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d92:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1c7      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db6:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4937      	ldr	r1, [pc, #220]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	e03a      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd4:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc fe43 	bl	8001a64 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fc fe3f 	bl	8001a64 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1a8      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4925      	ldr	r1, [pc, #148]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fc fe22 	bl	8001a64 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fc fe1e 	bl	8001a64 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e187      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d036      	beq.n	8004ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc fe02 	bl	8001a64 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fc fdfe 	bl	8001a64 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e167      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x200>
 8004e82:	e01b      	b.n	8004ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fc fdeb 	bl	8001a64 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	e00e      	b.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e92:	f7fc fde7 	bl	8001a64 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d907      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e150      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000
 8004eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ea      	bne.n	8004e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8097 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	4b7d      	ldr	r3, [pc, #500]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a7c      	ldr	r2, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eea:	4b7a      	ldr	r3, [pc, #488]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b77      	ldr	r3, [pc, #476]	; (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b74      	ldr	r3, [pc, #464]	; (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a73      	ldr	r2, [pc, #460]	; (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fc fda7 	bl	8001a64 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1a:	f7fc fda3 	bl	8001a64 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e10c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ea>
 8004f40:	4b64      	ldr	r3, [pc, #400]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a63      	ldr	r2, [pc, #396]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	e01c      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x30c>
 8004f56:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a5e      	ldr	r2, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a5b      	ldr	r2, [pc, #364]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f70:	4b58      	ldr	r3, [pc, #352]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a57      	ldr	r2, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	4b55      	ldr	r3, [pc, #340]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a54      	ldr	r2, [pc, #336]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f82:	f023 0304 	bic.w	r3, r3, #4
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fc fd68 	bl	8001a64 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fc fd64 	bl	8001a64 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0cb      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	4b49      	ldr	r3, [pc, #292]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ee      	beq.n	8004f98 <HAL_RCC_OscConfig+0x334>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fd52 	bl	8001a64 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fc fd4e 	bl	8001a64 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0b5      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	4a38      	ldr	r2, [pc, #224]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a1 	beq.w	8005144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b08      	cmp	r3, #8
 800500c:	d05c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d141      	bne.n	800509a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b31      	ldr	r3, [pc, #196]	; (80050dc <HAL_RCC_OscConfig+0x478>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fc fd22 	bl	8001a64 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005024:	f7fc fd1e 	bl	8001a64 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e087      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	3b01      	subs	r3, #1
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	491b      	ldr	r1, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x478>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fc fcf7 	bl	8001a64 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507a:	f7fc fcf3 	bl	8001a64 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e05c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x416>
 8005098:	e054      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_OscConfig+0x478>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fc fce0 	bl	8001a64 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fc fcdc 	bl	8001a64 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e045      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x470>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x444>
 80050c6:	e03d      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e038      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x4ec>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d028      	beq.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d121      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d11a      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	4293      	cmp	r3, r2
 800511a:	d111      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0cc      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90c      	bls.n	8005190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b63      	ldr	r3, [pc, #396]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0b8      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4a58      	ldr	r2, [pc, #352]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c0:	4b53      	ldr	r3, [pc, #332]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a52      	ldr	r2, [pc, #328]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	494d      	ldr	r1, [pc, #308]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d044      	beq.n	8005274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d119      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520e:	2b03      	cmp	r3, #3
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005222:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e067      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b37      	ldr	r3, [pc, #220]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4934      	ldr	r1, [pc, #208]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fc fc0e 	bl	8001a64 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fc fc0a 	bl	8001a64 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20c      	bcs.n	800529c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e032      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4916      	ldr	r1, [pc, #88]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	490e      	ldr	r1, [pc, #56]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052da:	f000 f821 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	490a      	ldr	r1, [pc, #40]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	5ccb      	ldrb	r3, [r1, r3]
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fc fb6e 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023c00 	.word	0x40023c00
 8005310:	40023800 	.word	0x40023800
 8005314:	0800a5a4 	.word	0x0800a5a4
 8005318:	20000000 	.word	0x20000000
 800531c:	20000004 	.word	0x20000004

08005320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005324:	b094      	sub	sp, #80	; 0x50
 8005326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	647b      	str	r3, [r7, #68]	; 0x44
 800532c:	2300      	movs	r3, #0
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005330:	2300      	movs	r3, #0
 8005332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005338:	4b79      	ldr	r3, [pc, #484]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d00d      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x40>
 8005344:	2b08      	cmp	r3, #8
 8005346:	f200 80e1 	bhi.w	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x34>
 800534e:	2b04      	cmp	r3, #4
 8005350:	d003      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x3a>
 8005352:	e0db      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4b73      	ldr	r3, [pc, #460]	; (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005358:	e0db      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4b73      	ldr	r3, [pc, #460]	; (8005528 <HAL_RCC_GetSysClockFreq+0x208>)
 800535c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800535e:	e0d8      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005360:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536a:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d063      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	2200      	movs	r2, #0
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	633b      	str	r3, [r7, #48]	; 0x30
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4621      	mov	r1, r4
 80053ac:	1a51      	subs	r1, r2, r1
 80053ae:	6139      	str	r1, [r7, #16]
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb63 0301 	sbc.w	r3, r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	018b      	lsls	r3, r1, #6
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ce:	4651      	mov	r1, sl
 80053d0:	018a      	lsls	r2, r1, #6
 80053d2:	4651      	mov	r1, sl
 80053d4:	ebb2 0801 	subs.w	r8, r2, r1
 80053d8:	4659      	mov	r1, fp
 80053da:	eb63 0901 	sbc.w	r9, r3, r1
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f2:	4690      	mov	r8, r2
 80053f4:	4699      	mov	r9, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	eb18 0303 	adds.w	r3, r8, r3
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	462b      	mov	r3, r5
 8005400:	eb49 0303 	adc.w	r3, r9, r3
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005412:	4629      	mov	r1, r5
 8005414:	024b      	lsls	r3, r1, #9
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800541c:	4621      	mov	r1, r4
 800541e:	024a      	lsls	r2, r1, #9
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005430:	f7fb fae8 	bl	8000a04 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	e058      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	2200      	movs	r2, #0
 8005446:	4618      	mov	r0, r3
 8005448:	4611      	mov	r1, r2
 800544a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	2300      	movs	r3, #0
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
 8005454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	f04f 0000 	mov.w	r0, #0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546a:	0150      	lsls	r0, r2, #5
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4641      	mov	r1, r8
 8005472:	ebb2 0a01 	subs.w	sl, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb63 0b01 	sbc.w	fp, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800548c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005490:	ebb2 040a 	subs.w	r4, r2, sl
 8005494:	eb63 050b 	sbc.w	r5, r3, fp
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	00eb      	lsls	r3, r5, #3
 80054a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a6:	00e2      	lsls	r2, r4, #3
 80054a8:	4614      	mov	r4, r2
 80054aa:	461d      	mov	r5, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	18e3      	adds	r3, r4, r3
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	464b      	mov	r3, r9
 80054b4:	eb45 0303 	adc.w	r3, r5, r3
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c6:	4629      	mov	r1, r5
 80054c8:	028b      	lsls	r3, r1, #10
 80054ca:	4621      	mov	r1, r4
 80054cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d0:	4621      	mov	r1, r4
 80054d2:	028a      	lsls	r2, r1, #10
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054da:	2200      	movs	r2, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	f7fb fa8e 	bl	8000a04 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 800550e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005514:	4618      	mov	r0, r3
 8005516:	3750      	adds	r7, #80	; 0x50
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000000 	.word	0x20000000

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005548:	f7ff fff0 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0a9b      	lsrs	r3, r3, #10
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	0800a5b4 	.word	0x0800a5b4

0800556c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005570:	f7ff ffdc 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0b5b      	lsrs	r3, r3, #13
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	0800a5b4 	.word	0x0800a5b4

08005594 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d035      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055bc:	4b62      	ldr	r3, [pc, #392]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055c2:	f7fc fa4f 	bl	8001a64 <HAL_GetTick>
 80055c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055ca:	f7fc fa4b 	bl	8001a64 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0b0      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055dc:	4b5b      	ldr	r3, [pc, #364]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	019a      	lsls	r2, r3, #6
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	071b      	lsls	r3, r3, #28
 80055f4:	4955      	ldr	r1, [pc, #340]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055fc:	4b52      	ldr	r3, [pc, #328]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005602:	f7fc fa2f 	bl	8001a64 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800560a:	f7fc fa2b 	bl	8001a64 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e090      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800561c:	4b4b      	ldr	r3, [pc, #300]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8083 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4b44      	ldr	r3, [pc, #272]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4a43      	ldr	r2, [pc, #268]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005644:	6413      	str	r3, [r2, #64]	; 0x40
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005652:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a3e      	ldr	r2, [pc, #248]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565e:	f7fc fa01 	bl	8001a64 <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fc f9fd 	bl	8001a64 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e062      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005678:	4b35      	ldr	r3, [pc, #212]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005684:	4b31      	ldr	r3, [pc, #196]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d028      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ac:	4b29      	ldr	r3, [pc, #164]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b2:	4b28      	ldr	r3, [pc, #160]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d114      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fc f9cb 	bl	8001a64 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fc f9c7 	bl	8001a64 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e02a      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ee      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005700:	d10d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005716:	490d      	ldr	r1, [pc, #52]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]
 800571c:	e005      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005724:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005728:	6093      	str	r3, [r2, #8]
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005736:	4905      	ldr	r1, [pc, #20]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	42470068 	.word	0x42470068
 800574c:	40023800 	.word	0x40023800
 8005750:	40007000 	.word	0x40007000
 8005754:	42470e40 	.word	0x42470e40

08005758 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d13e      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d12f      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800578e:	617b      	str	r3, [r7, #20]
          break;
 8005790:	e02f      	b.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579e:	d108      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057a0:	4b18      	ldr	r3, [pc, #96]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e007      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c8:	099b      	lsrs	r3, r3, #6
 80057ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
 80057d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057dc:	0f1b      	lsrs	r3, r3, #28
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
          break;
 80057ea:	e002      	b.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
          break;
 80057f0:	bf00      	nop
        }
      }
      break;
 80057f2:	bf00      	nop
    }
  }
  return frequency;
 80057f4:	697b      	ldr	r3, [r7, #20]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800
 8005808:	00bb8000 	.word	0x00bb8000
 800580c:	007a1200 	.word	0x007a1200
 8005810:	00f42400 	.word	0x00f42400

08005814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e07b      	b.n	800591e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005836:	d009      	beq.n	800584c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	61da      	str	r2, [r3, #28]
 800583e:	e005      	b.n	800584c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb ff12 	bl	8001690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	ea42 0103 	orr.w	r1, r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	0c1b      	lsrs	r3, r3, #16
 80058ea:	f003 0104 	and.w	r1, r3, #4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f003 0210 	and.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e03f      	b.n	80059b8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fb fee7 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2224      	movs	r2, #36	; 0x24
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005968:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 ff72 	bl	8006854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800597e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800598e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800599e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d17c      	bne.n	8005ada <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_UART_Transmit+0x2c>
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e075      	b.n	8005adc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit+0x3e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e06e      	b.n	8005adc <HAL_UART_Transmit+0x11c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2221      	movs	r2, #33	; 0x21
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a14:	f7fc f826 	bl	8001a64 <HAL_GetTick>
 8005a18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2e:	d108      	bne.n	8005a42 <HAL_UART_Transmit+0x82>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e003      	b.n	8005a4a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a52:	e02a      	b.n	8005aaa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2180      	movs	r1, #128	; 0x80
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fc2a 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e036      	b.n	8005adc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10b      	bne.n	8005a8c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	3302      	adds	r3, #2
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e007      	b.n	8005a9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	781a      	ldrb	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1cf      	bne.n	8005a54 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fbfa 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e006      	b.n	8005adc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d11d      	bne.n	8005b3a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_UART_Receive_DMA+0x26>
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e016      	b.n	8005b3c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Receive_DMA+0x38>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e00f      	b.n	8005b3c <HAL_UART_Receive_DMA+0x58>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fc2f 	bl	8006394 <UART_Start_Receive_DMA>
 8005b36:	4603      	mov	r3, r0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0ba      	sub	sp, #232	; 0xe8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_UART_IRQHandler+0x66>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fd9b 	bl	80066de <UART_Receive_IT>
      return;
 8005ba8:	e256      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80de 	beq.w	8005d70 <HAL_UART_IRQHandler+0x22c>
 8005bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80d1 	beq.w	8005d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xae>
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <HAL_UART_IRQHandler+0xd2>
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f043 0202 	orr.w	r2, r3, #2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_UART_IRQHandler+0xf6>
 8005c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_UART_IRQHandler+0x126>
 8005c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 81ed 	beq.w	800604e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_UART_IRQHandler+0x14e>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fd26 	bl	80066de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <HAL_UART_IRQHandler+0x17a>
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04f      	beq.n	8005d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fc2e 	bl	8006520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d141      	bne.n	8005d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1d9      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	4a7d      	ldr	r2, [pc, #500]	; (8005f20 <HAL_UART_IRQHandler+0x3dc>)
 8005d2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc f94e 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00e      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9a4 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e00a      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9a0 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	e006      	b.n	8005d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f99c 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d6a:	e170      	b.n	800604e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	bf00      	nop
    return;
 8005d6e:	e16e      	b.n	800604e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 814a 	bne.w	800600e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8143 	beq.w	800600e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 813c 	beq.w	800600e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	f040 80b4 	bne.w	8005f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8140 	beq.w	8006052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	f080 8139 	bcs.w	8006052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	f000 8088 	beq.w	8005f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1d9      	bne.n	8005df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3314      	adds	r3, #20
 8005e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e3      	bne.n	8005e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed6:	f023 0310 	bic.w	r3, r3, #16
 8005eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e3      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fb fff7 	bl	8001ef4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8ca 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f1c:	e099      	b.n	8006052 <HAL_UART_IRQHandler+0x50e>
 8005f1e:	bf00      	nop
 8005f20:	080065e7 	.word	0x080065e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 808b 	beq.w	8006056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8086 	beq.w	8006056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e3      	bne.n	8005f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3314      	adds	r3, #20
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	623b      	str	r3, [r7, #32]
   return(result);
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e3      	bne.n	8005f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0310 	bic.w	r3, r3, #16
 8005fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fec:	61fa      	str	r2, [r7, #28]
 8005fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	69b9      	ldr	r1, [r7, #24]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e3      	bne.n	8005fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f852 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800600c:	e023      	b.n	8006056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <HAL_UART_IRQHandler+0x4ea>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 faf1 	bl	800660e <UART_Transmit_IT>
    return;
 800602c:	e014      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00e      	beq.n	8006058 <HAL_UART_IRQHandler+0x514>
 800603a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fb31 	bl	80066ae <UART_EndTransmit_IT>
    return;
 800604c:	e004      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
    return;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
      return;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_UART_IRQHandler+0x514>
      return;
 8006056:	bf00      	nop
  }
}
 8006058:	37e8      	adds	r7, #232	; 0xe8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop

08006060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b09c      	sub	sp, #112	; 0x70
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d172      	bne.n	80061ca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	2200      	movs	r2, #0
 80060e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006100:	66bb      	str	r3, [r7, #104]	; 0x68
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800610a:	65ba      	str	r2, [r7, #88]	; 0x58
 800610c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	667b      	str	r3, [r7, #100]	; 0x64
 8006136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800613e:	647a      	str	r2, [r7, #68]	; 0x44
 8006140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	623b      	str	r3, [r7, #32]
   return(result);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006172:	633a      	str	r2, [r7, #48]	; 0x30
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	2b01      	cmp	r3, #1
 8006194:	d119      	bne.n	80061ca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f023 0310 	bic.w	r3, r3, #16
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061b6:	61fa      	str	r2, [r7, #28]
 80061b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	617b      	str	r3, [r7, #20]
   return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d106      	bne.n	80061e0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061d6:	4619      	mov	r1, r3
 80061d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061da:	f7ff ff69 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061de:	e002      	b.n	80061e6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80061e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061e2:	f7ff ff47 	bl	8006074 <HAL_UART_RxCpltCallback>
}
 80061e6:	bf00      	nop
 80061e8:	3770      	adds	r7, #112	; 0x70
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	d108      	bne.n	8006216 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	4619      	mov	r1, r3
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ff4e 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006214:	e002      	b.n	800621c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff ff36 	bl	8006088 <HAL_UART_RxHalfCpltCallback>
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b21      	cmp	r3, #33	; 0x21
 8006256:	d108      	bne.n	800626a <UART_DMAError+0x46>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006264:	68b8      	ldr	r0, [r7, #8]
 8006266:	f000 f933 	bl	80064d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	bf0c      	ite	eq
 8006278:	2301      	moveq	r3, #1
 800627a:	2300      	movne	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b22      	cmp	r3, #34	; 0x22
 800628a:	d108      	bne.n	800629e <UART_DMAError+0x7a>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006298:	68b8      	ldr	r0, [r7, #8]
 800629a:	f000 f941 	bl	8006520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0210 	orr.w	r2, r3, #16
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f7ff fef6 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b090      	sub	sp, #64	; 0x40
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	e050      	b.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d04c      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d8:	f7fb fbc4 	bl	8001a64 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d241      	bcs.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006308:	637a      	str	r2, [r7, #52]	; 0x34
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	613b      	str	r3, [r7, #16]
   return(result);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	623a      	str	r2, [r7, #32]
 800633e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	69f9      	ldr	r1, [r7, #28]
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	61bb      	str	r3, [r7, #24]
   return(result);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e5      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e00f      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	429a      	cmp	r2, r3
 8006388:	d09f      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3740      	adds	r7, #64	; 0x40
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b098      	sub	sp, #96	; 0x60
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2222      	movs	r2, #34	; 0x22
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	4a40      	ldr	r2, [pc, #256]	; (80064c4 <UART_Start_Receive_DMA+0x130>)
 80063c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <UART_Start_Receive_DMA+0x134>)
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	4a3e      	ldr	r2, [pc, #248]	; (80064cc <UART_Start_Receive_DMA+0x138>)
 80063d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2200      	movs	r2, #0
 80063da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	f7fb fd26 	bl	8001e44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d019      	beq.n	8006452 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006434:	65bb      	str	r3, [r7, #88]	; 0x58
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800643e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3314      	adds	r3, #20
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	657b      	str	r3, [r7, #84]	; 0x54
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006472:	63ba      	str	r2, [r7, #56]	; 0x38
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	617b      	str	r3, [r7, #20]
   return(result);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649c:	653b      	str	r3, [r7, #80]	; 0x50
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a6:	627a      	str	r2, [r7, #36]	; 0x24
 80064a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6a39      	ldr	r1, [r7, #32]
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e5      	bne.n	8006486 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3760      	adds	r7, #96	; 0x60
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	080060c9 	.word	0x080060c9
 80064c8:	080061ef 	.word	0x080061ef
 80064cc:	08006225 	.word	0x08006225

080064d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	61ba      	str	r2, [r7, #24]
 80064fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6979      	ldr	r1, [r7, #20]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	613b      	str	r3, [r7, #16]
   return(result);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006514:	bf00      	nop
 8006516:	3724      	adds	r7, #36	; 0x24
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b095      	sub	sp, #84	; 0x54
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006548:	643a      	str	r2, [r7, #64]	; 0x40
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800654e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3314      	adds	r3, #20
 8006562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	61fb      	str	r3, [r7, #28]
   return(result);
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	64bb      	str	r3, [r7, #72]	; 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e5      	bne.n	800655c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	2b01      	cmp	r3, #1
 8006596:	d119      	bne.n	80065cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b8:	61ba      	str	r2, [r7, #24]
 80065ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e5      	bne.n	8006598 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065da:	bf00      	nop
 80065dc:	3754      	adds	r7, #84	; 0x54
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff fd4b 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b21      	cmp	r3, #33	; 0x21
 8006620:	d13e      	bne.n	80066a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662a:	d114      	bne.n	8006656 <UART_Transmit_IT+0x48>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d110      	bne.n	8006656 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]
 8006654:	e008      	b.n	8006668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6211      	str	r1, [r2, #32]
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4619      	mov	r1, r3
 8006676:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800669a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fcc6 	bl	8006060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b08c      	sub	sp, #48	; 0x30
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b22      	cmp	r3, #34	; 0x22
 80066f0:	f040 80ab 	bne.w	800684a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	d117      	bne.n	800672e <UART_Receive_IT+0x50>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d113      	bne.n	800672e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671c:	b29a      	uxth	r2, r3
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	629a      	str	r2, [r3, #40]	; 0x28
 800672c:	e026      	b.n	800677c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006740:	d007      	beq.n	8006752 <UART_Receive_IT+0x74>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <UART_Receive_IT+0x82>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e008      	b.n	8006772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800678c:	2b00      	cmp	r3, #0
 800678e:	d15a      	bne.n	8006846 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0220 	bic.w	r2, r2, #32
 800679e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0201 	bic.w	r2, r2, #1
 80067be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d135      	bne.n	800683c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	613b      	str	r3, [r7, #16]
   return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f023 0310 	bic.w	r3, r3, #16
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	623a      	str	r2, [r7, #32]
 80067f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	69f9      	ldr	r1, [r7, #28]
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	61bb      	str	r3, [r7, #24]
   return(result);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b10      	cmp	r3, #16
 8006816:	d10a      	bne.n	800682e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fc3b 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
 800683a:	e002      	b.n	8006842 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fc19 	bl	8006074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e002      	b.n	800684c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3730      	adds	r7, #48	; 0x30
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006858:	b0c0      	sub	sp, #256	; 0x100
 800685a:	af00      	add	r7, sp, #0
 800685c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	68d9      	ldr	r1, [r3, #12]
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	ea40 0301 	orr.w	r3, r0, r1
 800687c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	431a      	orrs	r2, r3
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	431a      	orrs	r2, r3
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068ac:	f021 010c 	bic.w	r1, r1, #12
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ba:	430b      	orrs	r3, r1
 80068bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	6999      	ldr	r1, [r3, #24]
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	ea40 0301 	orr.w	r3, r0, r1
 80068da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b8f      	ldr	r3, [pc, #572]	; (8006b20 <UART_SetConfig+0x2cc>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d005      	beq.n	80068f4 <UART_SetConfig+0xa0>
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b8d      	ldr	r3, [pc, #564]	; (8006b24 <UART_SetConfig+0x2d0>)
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d104      	bne.n	80068fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fe fe3a 	bl	800556c <HAL_RCC_GetPCLK2Freq>
 80068f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068fc:	e003      	b.n	8006906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068fe:	f7fe fe21 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006910:	f040 810c 	bne.w	8006b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800691e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	1891      	adds	r1, r2, r2
 800692c:	65b9      	str	r1, [r7, #88]	; 0x58
 800692e:	415b      	adcs	r3, r3
 8006930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006936:	4621      	mov	r1, r4
 8006938:	eb12 0801 	adds.w	r8, r2, r1
 800693c:	4629      	mov	r1, r5
 800693e:	eb43 0901 	adc.w	r9, r3, r1
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006956:	4690      	mov	r8, r2
 8006958:	4699      	mov	r9, r3
 800695a:	4623      	mov	r3, r4
 800695c:	eb18 0303 	adds.w	r3, r8, r3
 8006960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006964:	462b      	mov	r3, r5
 8006966:	eb49 0303 	adc.w	r3, r9, r3
 800696a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800697a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800697e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006982:	460b      	mov	r3, r1
 8006984:	18db      	adds	r3, r3, r3
 8006986:	653b      	str	r3, [r7, #80]	; 0x50
 8006988:	4613      	mov	r3, r2
 800698a:	eb42 0303 	adc.w	r3, r2, r3
 800698e:	657b      	str	r3, [r7, #84]	; 0x54
 8006990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006998:	f7fa f834 	bl	8000a04 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4b61      	ldr	r3, [pc, #388]	; (8006b28 <UART_SetConfig+0x2d4>)
 80069a2:	fba3 2302 	umull	r2, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	011c      	lsls	r4, r3, #4
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80069c4:	415b      	adcs	r3, r3
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069cc:	4641      	mov	r1, r8
 80069ce:	eb12 0a01 	adds.w	sl, r2, r1
 80069d2:	4649      	mov	r1, r9
 80069d4:	eb43 0b01 	adc.w	fp, r3, r1
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ec:	4692      	mov	sl, r2
 80069ee:	469b      	mov	fp, r3
 80069f0:	4643      	mov	r3, r8
 80069f2:	eb1a 0303 	adds.w	r3, sl, r3
 80069f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069fa:	464b      	mov	r3, r9
 80069fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	18db      	adds	r3, r3, r3
 8006a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1e:	4613      	mov	r3, r2
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
 8006a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a2e:	f7f9 ffe9 	bl	8000a04 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	4b3b      	ldr	r3, [pc, #236]	; (8006b28 <UART_SetConfig+0x2d4>)
 8006a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2264      	movs	r2, #100	; 0x64
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	1acb      	subs	r3, r1, r3
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a4e:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <UART_SetConfig+0x2d4>)
 8006a50:	fba3 2302 	umull	r2, r3, r3, r2
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a5c:	441c      	add	r4, r3
 8006a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a80:	4641      	mov	r1, r8
 8006a82:	1851      	adds	r1, r2, r1
 8006a84:	6339      	str	r1, [r7, #48]	; 0x30
 8006a86:	4649      	mov	r1, r9
 8006a88:	414b      	adcs	r3, r1
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a98:	4659      	mov	r1, fp
 8006a9a:	00cb      	lsls	r3, r1, #3
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	00ca      	lsls	r2, r1, #3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4642      	mov	r2, r8
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	eb42 0303 	adc.w	r3, r2, r3
 8006abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	18db      	adds	r3, r3, r3
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ada:	4613      	mov	r3, r2
 8006adc:	eb42 0303 	adc.w	r3, r2, r3
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006aea:	f7f9 ff8b 	bl	8000a04 <__aeabi_uldivmod>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <UART_SetConfig+0x2d4>)
 8006af4:	fba3 1302 	umull	r1, r3, r3, r2
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	2164      	movs	r1, #100	; 0x64
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	3332      	adds	r3, #50	; 0x32
 8006b06:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <UART_SetConfig+0x2d4>)
 8006b08:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f003 0207 	and.w	r2, r3, #7
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4422      	add	r2, r4
 8006b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b1c:	e105      	b.n	8006d2a <UART_SetConfig+0x4d6>
 8006b1e:	bf00      	nop
 8006b20:	40011000 	.word	0x40011000
 8006b24:	40011400 	.word	0x40011400
 8006b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b3e:	4642      	mov	r2, r8
 8006b40:	464b      	mov	r3, r9
 8006b42:	1891      	adds	r1, r2, r2
 8006b44:	6239      	str	r1, [r7, #32]
 8006b46:	415b      	adcs	r3, r3
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b4e:	4641      	mov	r1, r8
 8006b50:	1854      	adds	r4, r2, r1
 8006b52:	4649      	mov	r1, r9
 8006b54:	eb43 0501 	adc.w	r5, r3, r1
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	00eb      	lsls	r3, r5, #3
 8006b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b66:	00e2      	lsls	r2, r4, #3
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	4643      	mov	r3, r8
 8006b6e:	18e3      	adds	r3, r4, r3
 8006b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b74:	464b      	mov	r3, r9
 8006b76:	eb45 0303 	adc.w	r3, r5, r3
 8006b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	008b      	lsls	r3, r1, #2
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	008a      	lsls	r2, r1, #2
 8006ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bac:	f7f9 ff2a 	bl	8000a04 <__aeabi_uldivmod>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4b60      	ldr	r3, [pc, #384]	; (8006d38 <UART_SetConfig+0x4e4>)
 8006bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	011c      	lsls	r4, r3, #4
 8006bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	1891      	adds	r1, r2, r2
 8006bd6:	61b9      	str	r1, [r7, #24]
 8006bd8:	415b      	adcs	r3, r3
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006be0:	4641      	mov	r1, r8
 8006be2:	1851      	adds	r1, r2, r1
 8006be4:	6139      	str	r1, [r7, #16]
 8006be6:	4649      	mov	r1, r9
 8006be8:	414b      	adcs	r3, r1
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	00cb      	lsls	r3, r1, #3
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c02:	4651      	mov	r1, sl
 8006c04:	00ca      	lsls	r2, r1, #3
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c14:	464b      	mov	r3, r9
 8006c16:	460a      	mov	r2, r1
 8006c18:	eb42 0303 	adc.w	r3, r2, r3
 8006c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c38:	4649      	mov	r1, r9
 8006c3a:	008b      	lsls	r3, r1, #2
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c42:	4641      	mov	r1, r8
 8006c44:	008a      	lsls	r2, r1, #2
 8006c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c4a:	f7f9 fedb 	bl	8000a04 <__aeabi_uldivmod>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <UART_SetConfig+0x4e4>)
 8006c54:	fba3 1302 	umull	r1, r3, r3, r2
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	2164      	movs	r1, #100	; 0x64
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <UART_SetConfig+0x4e4>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c72:	441c      	add	r4, r3
 8006c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c78:	2200      	movs	r2, #0
 8006c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c7c:	677a      	str	r2, [r7, #116]	; 0x74
 8006c7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c82:	4642      	mov	r2, r8
 8006c84:	464b      	mov	r3, r9
 8006c86:	1891      	adds	r1, r2, r2
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c92:	4641      	mov	r1, r8
 8006c94:	1851      	adds	r1, r2, r1
 8006c96:	6039      	str	r1, [r7, #0]
 8006c98:	4649      	mov	r1, r9
 8006c9a:	414b      	adcs	r3, r1
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006caa:	4659      	mov	r1, fp
 8006cac:	00cb      	lsls	r3, r1, #3
 8006cae:	4651      	mov	r1, sl
 8006cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	00ca      	lsls	r2, r1, #3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	189b      	adds	r3, r3, r2
 8006cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	eb42 0303 	adc.w	r3, r2, r3
 8006ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd8:	667a      	str	r2, [r7, #100]	; 0x64
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	008b      	lsls	r3, r1, #2
 8006cea:	4641      	mov	r1, r8
 8006cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	008a      	lsls	r2, r1, #2
 8006cf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cf8:	f7f9 fe84 	bl	8000a04 <__aeabi_uldivmod>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <UART_SetConfig+0x4e4>)
 8006d02:	fba3 1302 	umull	r1, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2164      	movs	r1, #100	; 0x64
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	3332      	adds	r3, #50	; 0x32
 8006d14:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <UART_SetConfig+0x4e4>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4422      	add	r2, r4
 8006d28:	609a      	str	r2, [r3, #8]
}
 8006d2a:	bf00      	nop
 8006d2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d30:	46bd      	mov	sp, r7
 8006d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d36:	bf00      	nop
 8006d38:	51eb851f 	.word	0x51eb851f

08006d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	f107 001c 	add.w	r0, r7, #28
 8006d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d122      	bne.n	8006d9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d105      	bne.n	8006d8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9c0 	bl	8007114 <USB_CoreReset>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]
 8006d98:	e01a      	b.n	8006dd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9b4 	bl	8007114 <USB_CoreReset>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8006dc2:	e005      	b.n	8006dd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10b      	bne.n	8006dee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f043 0206 	orr.w	r2, r3, #6
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dfa:	b004      	add	sp, #16
 8006dfc:	4770      	bx	lr

08006dfe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f023 0201 	bic.w	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d115      	bne.n	8006e90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e70:	2001      	movs	r0, #1
 8006e72:	f7fa fe03 	bl	8001a7c <HAL_Delay>
      ms++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f93a 	bl	80070f6 <USB_GetMode>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d01e      	beq.n	8006ec6 <USB_SetCurrentMode+0x84>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b31      	cmp	r3, #49	; 0x31
 8006e8c:	d9f0      	bls.n	8006e70 <USB_SetCurrentMode+0x2e>
 8006e8e:	e01a      	b.n	8006ec6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d115      	bne.n	8006ec2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f7fa fdea 	bl	8001a7c <HAL_Delay>
      ms++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f921 	bl	80070f6 <USB_GetMode>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <USB_SetCurrentMode+0x84>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b31      	cmp	r3, #49	; 0x31
 8006ebe:	d9f0      	bls.n	8006ea2 <USB_SetCurrentMode+0x60>
 8006ec0:	e001      	b.n	8006ec6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e005      	b.n	8006ed2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b32      	cmp	r3, #50	; 0x32
 8006eca:	d101      	bne.n	8006ed0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <USB_FlushTxFifo+0x64>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01b      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	daf2      	bge.n	8006eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	019b      	lsls	r3, r3, #6
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <USB_FlushTxFifo+0x64>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d0f0      	beq.n	8006f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	00030d40 	.word	0x00030d40

08006f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <USB_FlushRxFifo+0x5c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e018      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	daf2      	bge.n	8006f50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2210      	movs	r2, #16
 8006f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <USB_FlushRxFifo+0x5c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e006      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d0f0      	beq.n	8006f74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	00030d40 	.word	0x00030d40

08006fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b089      	sub	sp, #36	; 0x24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	71fb      	strb	r3, [r7, #7]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d123      	bne.n	8007012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fca:	88bb      	ldrh	r3, [r7, #4]
 8006fcc:	3303      	adds	r3, #3
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e018      	b.n	800700a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	031a      	lsls	r2, r3, #12
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	3301      	adds	r3, #1
 8007002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	3301      	adds	r3, #1
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3e2      	bcc.n	8006fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3724      	adds	r7, #36	; 0x24
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007020:	b480      	push	{r7}
 8007022:	b08b      	sub	sp, #44	; 0x2c
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	089b      	lsrs	r3, r3, #2
 800703a:	b29b      	uxth	r3, r3
 800703c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	e014      	b.n	8007076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	601a      	str	r2, [r3, #0]
    pDest++;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	3301      	adds	r3, #1
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	3301      	adds	r3, #1
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	3301      	adds	r3, #1
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	3301      	adds	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3301      	adds	r3, #1
 8007074:	623b      	str	r3, [r7, #32]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	429a      	cmp	r2, r3
 800707c:	d3e6      	bcc.n	800704c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800707e:	8bfb      	ldrh	r3, [r7, #30]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01e      	beq.n	80070c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708e:	461a      	mov	r2, r3
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	701a      	strb	r2, [r3, #0]
      i++;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	3301      	adds	r3, #1
 80070ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	3301      	adds	r3, #1
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070bc:	8bfb      	ldrh	r3, [r7, #30]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1ea      	bne.n	8007098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	372c      	adds	r7, #44	; 0x2c
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070e8:	68fb      	ldr	r3, [r7, #12]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f003 0301 	and.w	r3, r3, #1
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a13      	ldr	r2, [pc, #76]	; (8007178 <USB_CoreReset+0x64>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e01b      	b.n	800716a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	daf2      	bge.n	8007120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4a09      	ldr	r2, [pc, #36]	; (8007178 <USB_CoreReset+0x64>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d901      	bls.n	800715c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e006      	b.n	800716a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d0f0      	beq.n	800714a <USB_CoreReset+0x36>

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	00030d40 	.word	0x00030d40

0800717c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800717c:	b084      	sub	sp, #16
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800718a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800719c:	461a      	mov	r2, r3
 800719e:	2300      	movs	r3, #0
 80071a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d018      	beq.n	8007204 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10a      	bne.n	80071ee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071e6:	f043 0304 	orr.w	r3, r3, #4
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e014      	b.n	8007218 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071fc:	f023 0304 	bic.w	r3, r3, #4
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e009      	b.n	8007218 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007212:	f023 0304 	bic.w	r3, r3, #4
 8007216:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007218:	2110      	movs	r1, #16
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fe5e 	bl	8006edc <USB_FlushTxFifo>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fe8a 	bl	8006f44 <USB_FlushRxFifo>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	e015      	b.n	800726c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724c:	461a      	mov	r2, r3
 800724e:	f04f 33ff 	mov.w	r3, #4294967295
 8007252:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007260:	461a      	mov	r2, r3
 8007262:	2300      	movs	r3, #0
 8007264:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3301      	adds	r3, #1
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	429a      	cmp	r2, r3
 8007272:	d3e5      	bcc.n	8007240 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f04f 32ff 	mov.w	r2, #4294967295
 8007280:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007294:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <USB_HostInit+0x16c>)
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a13      	ldr	r2, [pc, #76]	; (80072ec <USB_HostInit+0x170>)
 80072a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80072a4:	e009      	b.n	80072ba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a10      	ldr	r2, [pc, #64]	; (80072f0 <USB_HostInit+0x174>)
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a0f      	ldr	r2, [pc, #60]	; (80072f4 <USB_HostInit+0x178>)
 80072b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d105      	bne.n	80072cc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f043 0210 	orr.w	r2, r3, #16
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <USB_HostInit+0x17c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e4:	b004      	add	sp, #16
 80072e6:	4770      	bx	lr
 80072e8:	01000200 	.word	0x01000200
 80072ec:	00e00300 	.word	0x00e00300
 80072f0:	00600080 	.word	0x00600080
 80072f4:	004000e0 	.word	0x004000e0
 80072f8:	a3200008 	.word	0xa3200008

080072fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007334:	4313      	orrs	r3, r2
 8007336:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d107      	bne.n	800734e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007344:	461a      	mov	r2, r3
 8007346:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800734a:	6053      	str	r3, [r2, #4]
 800734c:	e009      	b.n	8007362 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d106      	bne.n	8007362 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735a:	461a      	mov	r2, r3
 800735c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007360:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007390:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800739a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80073a0:	2064      	movs	r0, #100	; 0x64
 80073a2:	f7fa fb6b 	bl	8001a7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80073b4:	200a      	movs	r0, #10
 80073b6:	f7fa fb61 	bl	8001a7c <HAL_Delay>

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <USB_DriveVbus+0x44>
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d106      	bne.n	8007408 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007406:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007412:	d109      	bne.n	8007428 <USB_DriveVbus+0x64>
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007426:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	0c5b      	lsrs	r3, r3, #17
 8007454:	f003 0303 	and.w	r3, r3, #3
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	b29b      	uxth	r3, r3
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	4608      	mov	r0, r1
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	4603      	mov	r3, r0
 8007498:	70fb      	strb	r3, [r7, #3]
 800749a:	460b      	mov	r3, r1
 800749c:	70bb      	strb	r3, [r7, #2]
 800749e:	4613      	mov	r3, r2
 80074a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b6:	461a      	mov	r2, r3
 80074b8:	f04f 33ff 	mov.w	r3, #4294967295
 80074bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80074be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d87e      	bhi.n	80075c4 <USB_HC_Init+0x13c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USB_HC_Init+0x44>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074dd 	.word	0x080074dd
 80074d0:	08007587 	.word	0x08007587
 80074d4:	080074dd 	.word	0x080074dd
 80074d8:	08007549 	.word	0x08007549
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e8:	461a      	mov	r2, r3
 80074ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80074ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80074f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da10      	bge.n	800751a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	440a      	add	r2, r1
 800750e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007516:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007518:	e057      	b.n	80075ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	2b00      	cmp	r3, #0
 8007524:	d051      	beq.n	80075ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	440a      	add	r2, r1
 800753c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007540:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007544:	60d3      	str	r3, [r2, #12]
      break;
 8007546:	e040      	b.n	80075ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4413      	add	r3, r2
 8007550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007554:	461a      	mov	r2, r3
 8007556:	f240 639d 	movw	r3, #1693	; 0x69d
 800755a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800755c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	da34      	bge.n	80075ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	440a      	add	r2, r1
 800757a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800757e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007582:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007584:	e023      	b.n	80075ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4413      	add	r3, r2
 800758e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007592:	461a      	mov	r2, r3
 8007594:	f240 2325 	movw	r3, #549	; 0x225
 8007598:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800759a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da17      	bge.n	80075d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80075c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80075c2:	e006      	b.n	80075d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	77fb      	strb	r3, [r7, #31]
      break;
 80075c8:	e004      	b.n	80075d4 <USB_HC_Init+0x14c>
      break;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <USB_HC_Init+0x14c>
      break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <USB_HC_Init+0x14c>
      break;
 80075d2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ee:	f043 0302 	orr.w	r3, r3, #2
 80075f2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	2101      	movs	r1, #1
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	6939      	ldr	r1, [r7, #16]
 800760a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800760e:	4313      	orrs	r3, r2
 8007610:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800761e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da03      	bge.n	800762e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e001      	b.n	8007632 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff feff 	bl	8007436 <USB_GetHostSpeed>
 8007638:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800763a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800763e:	2b02      	cmp	r3, #2
 8007640:	d106      	bne.n	8007650 <USB_HC_Init+0x1c8>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d003      	beq.n	8007650 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e001      	b.n	8007654 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007654:	787b      	ldrb	r3, [r7, #1]
 8007656:	059b      	lsls	r3, r3, #22
 8007658:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800765c:	78bb      	ldrb	r3, [r7, #2]
 800765e:	02db      	lsls	r3, r3, #11
 8007660:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007664:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007666:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800766a:	049b      	lsls	r3, r3, #18
 800766c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007670:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007672:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007674:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007678:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	0159      	lsls	r1, r3, #5
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	440b      	add	r3, r1
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007690:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007696:	2b03      	cmp	r3, #3
 8007698:	d003      	beq.n	80076a2 <USB_HC_Init+0x21a>
 800769a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10f      	bne.n	80076c2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80076c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08c      	sub	sp, #48	; 0x30
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80076e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02d      	beq.n	8007752 <USB_HC_StartXfer+0x86>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d129      	bne.n	8007752 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d117      	bne.n	8007734 <USB_HC_StartXfer+0x68>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	79db      	ldrb	r3, [r3, #7]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <USB_HC_StartXfer+0x48>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	79db      	ldrb	r3, [r3, #7]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d10f      	bne.n	8007734 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	6a3a      	ldr	r2, [r7, #32]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <USB_HC_StartXfer+0x86>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	795b      	ldrb	r3, [r3, #5]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	4619      	mov	r1, r3
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fa0f 	bl	8007b6c <USB_DoPing>
      return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e0f8      	b.n	8007944 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	8912      	ldrh	r2, [r2, #8]
 8007762:	4413      	add	r3, r2
 8007764:	3b01      	subs	r3, #1
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	8912      	ldrh	r2, [r2, #8]
 800776a:	fbb3 f3f2 	udiv	r3, r3, r2
 800776e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007772:	8b7b      	ldrh	r3, [r7, #26]
 8007774:	429a      	cmp	r2, r3
 8007776:	d90b      	bls.n	8007790 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007778:	8b7b      	ldrh	r3, [r7, #26]
 800777a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800777c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	8912      	ldrh	r2, [r2, #8]
 8007782:	fb03 f202 	mul.w	r2, r3, r2
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	611a      	str	r2, [r3, #16]
 800778a:	e001      	b.n	8007790 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800778c:	2301      	movs	r3, #1
 800778e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	78db      	ldrb	r3, [r3, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	8912      	ldrh	r2, [r2, #8]
 800779e:	fb03 f202 	mul.w	r2, r3, r2
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	611a      	str	r2, [r3, #16]
 80077a6:	e003      	b.n	80077b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077ba:	04d9      	lsls	r1, r3, #19
 80077bc:	4b63      	ldr	r3, [pc, #396]	; (800794c <USB_HC_StartXfer+0x280>)
 80077be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	7a9b      	ldrb	r3, [r3, #10]
 80077c6:	075b      	lsls	r3, r3, #29
 80077c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077cc:	69f9      	ldr	r1, [r7, #28]
 80077ce:	0148      	lsls	r0, r1, #5
 80077d0:	6a39      	ldr	r1, [r7, #32]
 80077d2:	4401      	add	r1, r0
 80077d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	68d9      	ldr	r1, [r3, #12]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f2:	460a      	mov	r2, r1
 80077f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	bf0c      	ite	eq
 8007806:	2301      	moveq	r3, #1
 8007808:	2300      	movne	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	6a3a      	ldr	r2, [r7, #32]
 8007822:	440a      	add	r2, r1
 8007824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800782c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	4413      	add	r3, r2
 8007836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	7e7b      	ldrb	r3, [r7, #25]
 800783e:	075b      	lsls	r3, r3, #29
 8007840:	69f9      	ldr	r1, [r7, #28]
 8007842:	0148      	lsls	r0, r1, #5
 8007844:	6a39      	ldr	r1, [r7, #32]
 8007846:	4401      	add	r1, r0
 8007848:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800784c:	4313      	orrs	r3, r2
 800784e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	4413      	add	r3, r2
 8007858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007866:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	78db      	ldrb	r3, [r3, #3]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	e003      	b.n	8007882 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007880:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007888:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	461a      	mov	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e04e      	b.n	8007944 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d149      	bne.n	8007942 <USB_HC_StartXfer+0x276>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d045      	beq.n	8007942 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	79db      	ldrb	r3, [r3, #7]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d830      	bhi.n	8007920 <USB_HC_StartXfer+0x254>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USB_HC_StartXfer+0x1f8>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078f9 	.word	0x080078f9
 80078cc:	080078d5 	.word	0x080078d5
 80078d0:	080078f9 	.word	0x080078f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	3303      	adds	r3, #3
 80078da:	089b      	lsrs	r3, r3, #2
 80078dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80078de:	8afa      	ldrh	r2, [r7, #22]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d91c      	bls.n	8007924 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80078f6:	e015      	b.n	8007924 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	3303      	adds	r3, #3
 80078fe:	089b      	lsrs	r3, r3, #2
 8007900:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007902:	8afa      	ldrh	r2, [r7, #22]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	b29b      	uxth	r3, r3
 800790e:	429a      	cmp	r2, r3
 8007910:	d90a      	bls.n	8007928 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	619a      	str	r2, [r3, #24]
        }
        break;
 800791e:	e003      	b.n	8007928 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007920:	bf00      	nop
 8007922:	e002      	b.n	800792a <USB_HC_StartXfer+0x25e>
        break;
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <USB_HC_StartXfer+0x25e>
        break;
 8007928:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	68d9      	ldr	r1, [r3, #12]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	785a      	ldrb	r2, [r3, #1]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	b29b      	uxth	r3, r3
 8007938:	2000      	movs	r0, #0
 800793a:	9000      	str	r0, [sp, #0]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fb31 	bl	8006fa4 <USB_WritePacket>
  }

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	1ff80000 	.word	0x1ff80000

08007950 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	b29b      	uxth	r3, r3
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007972:	b480      	push	{r7}
 8007974:	b089      	sub	sp, #36	; 0x24
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	0c9b      	lsrs	r3, r3, #18
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	0fdb      	lsrs	r3, r3, #31
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d104      	bne.n	80079cc <USB_HC_Halt+0x5a>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e0c8      	b.n	8007b5e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <USB_HC_Halt+0x66>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d163      	bne.n	8007aa0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 80ab 	bne.w	8007b5c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d133      	bne.n	8007a7a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a50:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5e:	d81d      	bhi.n	8007a9c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a76:	d0ec      	beq.n	8007a52 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a78:	e070      	b.n	8007b5c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a9a:	e05f      	b.n	8007b5c <USB_HC_Halt+0x1ea>
            break;
 8007a9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a9e:	e05d      	b.n	8007b5c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007abe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d133      	bne.n	8007b38 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b0e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b1c:	d81d      	bhi.n	8007b5a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b34:	d0ec      	beq.n	8007b10 <USB_HC_Halt+0x19e>
 8007b36:	e011      	b.n	8007b5c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e000      	b.n	8007b5c <USB_HC_Halt+0x1ea>
          break;
 8007b5a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3724      	adds	r7, #36	; 0x24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b80:	2301      	movs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	04da      	lsls	r2, r3, #19
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <USB_DoPing+0x74>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bb4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bbc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	1ff80000 	.word	0x1ff80000

08007be4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f911 	bl	8006e20 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bfe:	2110      	movs	r1, #16
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff f96b 	bl	8006edc <USB_FlushTxFifo>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff f997 	bl	8006f44 <USB_FlushRxFifo>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	e01f      	b.n	8007c66 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	3301      	adds	r3, #1
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b0f      	cmp	r3, #15
 8007c6a:	d9dc      	bls.n	8007c26 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	e034      	b.n	8007cdc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb8:	d80c      	bhi.n	8007cd4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd0:	d0ec      	beq.n	8007cac <USB_StopHost+0xc8>
 8007cd2:	e000      	b.n	8007cd6 <USB_StopHost+0xf2>
        break;
 8007cd4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b0f      	cmp	r3, #15
 8007ce0:	d9c7      	bls.n	8007c72 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff f880 	bl	8006dfe <USB_EnableGlobalInt>

  return ret;
 8007cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b089      	sub	sp, #36	; 0x24
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d10:	2301      	movs	r3, #1
 8007d12:	2202      	movs	r2, #2
 8007d14:	2102      	movs	r1, #2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fc66 	bl	80085e8 <USBH_FindInterface>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2bff      	cmp	r3, #255	; 0xff
 8007d24:	d002      	beq.n	8007d2c <USBH_CDC_InterfaceInit+0x24>
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d901      	bls.n	8007d30 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e13d      	b.n	8007fac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fc3b 	bl	80085b0 <USBH_SelectInterface>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d44:	2302      	movs	r3, #2
 8007d46:	e131      	b.n	8007fac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007d4e:	2050      	movs	r0, #80	; 0x50
 8007d50:	f002 fafa 	bl	800a348 <malloc>
 8007d54:	4603      	mov	r3, r0
 8007d56:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e11f      	b.n	8007fac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d6c:	2250      	movs	r2, #80	; 0x50
 8007d6e:	2100      	movs	r1, #0
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f002 faf9 	bl	800a368 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	211a      	movs	r1, #26
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b25b      	sxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da15      	bge.n	8007dba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	211a      	movs	r1, #26
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	4413      	add	r3, r2
 8007d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	211a      	movs	r1, #26
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 ff2c 	bl	8009c1e <USBH_AllocPipe>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	7819      	ldrb	r1, [r3, #0]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	7858      	ldrb	r0, [r3, #1]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	8952      	ldrh	r2, [r2, #10]
 8007de6:	9202      	str	r2, [sp, #8]
 8007de8:	2203      	movs	r2, #3
 8007dea:	9201      	str	r2, [sp, #4]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4623      	mov	r3, r4
 8007df0:	4602      	mov	r2, r0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fee4 	bl	8009bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f002 f9f3 	bl	800a1ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	210a      	movs	r1, #10
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fbeb 	bl	80085e8 <USBH_FindInterface>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2bff      	cmp	r3, #255	; 0xff
 8007e1a:	d002      	beq.n	8007e22 <USBH_CDC_InterfaceInit+0x11a>
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d901      	bls.n	8007e26 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e22:	2302      	movs	r3, #2
 8007e24:	e0c2      	b.n	8007fac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	211a      	movs	r1, #26
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da16      	bge.n	8007e6c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	211a      	movs	r1, #26
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	211a      	movs	r1, #26
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e64:	881a      	ldrh	r2, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	835a      	strh	r2, [r3, #26]
 8007e6a:	e015      	b.n	8007e98 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	211a      	movs	r1, #26
 8007e72:	fb01 f303 	mul.w	r3, r1, r3
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	211a      	movs	r1, #26
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	211a      	movs	r1, #26
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	da16      	bge.n	8007ede <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	211a      	movs	r1, #26
 8007eb6:	fb01 f303 	mul.w	r3, r1, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	211a      	movs	r1, #26
 8007ecc:	fb01 f303 	mul.w	r3, r1, r3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	835a      	strh	r2, [r3, #26]
 8007edc:	e015      	b.n	8007f0a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	211a      	movs	r1, #26
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007eee:	781a      	ldrb	r2, [r3, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	211a      	movs	r1, #26
 8007efa:	fb01 f303 	mul.w	r3, r1, r3
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7b9b      	ldrb	r3, [r3, #14]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fe84 	bl	8009c1e <USBH_AllocPipe>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	7bdb      	ldrb	r3, [r3, #15]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fe7a 	bl	8009c1e <USBH_AllocPipe>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7b59      	ldrb	r1, [r3, #13]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	7b98      	ldrb	r0, [r3, #14]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	8b12      	ldrh	r2, [r2, #24]
 8007f4a:	9202      	str	r2, [sp, #8]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4623      	mov	r3, r4
 8007f54:	4602      	mov	r2, r0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fe32 	bl	8009bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	7b19      	ldrb	r1, [r3, #12]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	7bd8      	ldrb	r0, [r3, #15]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	8b52      	ldrh	r2, [r2, #26]
 8007f74:	9202      	str	r2, [sp, #8]
 8007f76:	2202      	movs	r2, #2
 8007f78:	9201      	str	r2, [sp, #4]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fe1d 	bl	8009bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	7b5b      	ldrb	r3, [r3, #13]
 8007f92:	2200      	movs	r2, #0
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f002 f928 	bl	800a1ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	7b1b      	ldrb	r3, [r3, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f002 f921 	bl	800a1ec <USBH_LL_SetToggle>

  return USBH_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd90      	pop	{r4, r7, pc}

08007fb4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fe12 	bl	8009bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fe3d 	bl	8009c60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	7b1b      	ldrb	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	7b1b      	ldrb	r3, [r3, #12]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fdff 	bl	8009bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	7b1b      	ldrb	r3, [r3, #12]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fe2a 	bl	8009c60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	7b5b      	ldrb	r3, [r3, #13]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	7b5b      	ldrb	r3, [r3, #13]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fdec 	bl	8009bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	7b5b      	ldrb	r3, [r3, #13]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fe17 	bl	8009c60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	4618      	mov	r0, r3
 800804e:	f002 f983 	bl	800a358 <free>
    phost->pActiveClass->pData = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008058:	2200      	movs	r2, #0
 800805a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3340      	adds	r3, #64	; 0x40
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8b1 	bl	80081e6 <GetLineCoding>
 8008084:	4603      	mov	r3, r0
 8008086:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008094:	2102      	movs	r1, #2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800809a:	7afb      	ldrb	r3, [r7, #11]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d877      	bhi.n	80081b8 <USBH_CDC_Process+0x114>
 80080c8:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USBH_CDC_Process+0x2c>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	080080e5 	.word	0x080080e5
 80080d4:	080080eb 	.word	0x080080eb
 80080d8:	0800811b 	.word	0x0800811b
 80080dc:	0800818f 	.word	0x0800818f
 80080e0:	0800819d 	.word	0x0800819d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e06d      	b.n	80081c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f897 	bl	8008224 <SetLineCoding>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008108:	e058      	b.n	80081bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d055      	beq.n	80081bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2204      	movs	r2, #4
 8008114:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008118:	e050      	b.n	80081bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3340      	adds	r3, #64	; 0x40
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f860 	bl	80081e6 <GetLineCoding>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d126      	bne.n	800817e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	791b      	ldrb	r3, [r3, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d13b      	bne.n	80081c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008152:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008154:	429a      	cmp	r2, r3
 8008156:	d133      	bne.n	80081c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008162:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008164:	429a      	cmp	r2, r3
 8008166:	d12b      	bne.n	80081c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008170:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008172:	429a      	cmp	r2, r3
 8008174:	d124      	bne.n	80081c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f958 	bl	800842c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800817c:	e020      	b.n	80081c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d01d      	beq.n	80081c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2204      	movs	r2, #4
 8008188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800818c:	e018      	b.n	80081c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f867 	bl	8008262 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8da 	bl	800834e <CDC_ProcessReception>
      break;
 800819a:	e014      	b.n	80081c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 ffef 	bl	8009182 <USBH_ClrFeature>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80081b6:	e005      	b.n	80081c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80081b8:	bf00      	nop
 80081ba:	e004      	b.n	80081c6 <USBH_CDC_Process+0x122>
      break;
 80081bc:	bf00      	nop
 80081be:	e002      	b.n	80081c6 <USBH_CDC_Process+0x122>
      break;
 80081c0:	bf00      	nop
 80081c2:	e000      	b.n	80081c6 <USBH_CDC_Process+0x122>
      break;
 80081c4:	bf00      	nop

  }

  return status;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	22a1      	movs	r2, #161	; 0xa1
 80081f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2221      	movs	r2, #33	; 0x21
 80081fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2207      	movs	r2, #7
 800820c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2207      	movs	r2, #7
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa81 	bl	800971c <USBH_CtlReq>
 800821a:	4603      	mov	r3, r0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2221      	movs	r2, #33	; 0x21
 8008232:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2207      	movs	r2, #7
 800824a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2207      	movs	r2, #7
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fa62 	bl	800971c <USBH_CtlReq>
 8008258:	4603      	mov	r3, r0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af02      	add	r7, sp, #8
 8008268:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008274:	2300      	movs	r3, #0
 8008276:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800827e:	2b01      	cmp	r3, #1
 8008280:	d002      	beq.n	8008288 <CDC_ProcessTransmission+0x26>
 8008282:	2b02      	cmp	r3, #2
 8008284:	d023      	beq.n	80082ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008286:	e05e      	b.n	8008346 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	8b12      	ldrh	r2, [r2, #24]
 8008290:	4293      	cmp	r3, r2
 8008292:	d90b      	bls.n	80082ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	69d9      	ldr	r1, [r3, #28]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8b1a      	ldrh	r2, [r3, #24]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	7b5b      	ldrb	r3, [r3, #13]
 80082a0:	2001      	movs	r0, #1
 80082a2:	9000      	str	r0, [sp, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fc48 	bl	8009b3a <USBH_BulkSendData>
 80082aa:	e00b      	b.n	80082c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	7b5b      	ldrb	r3, [r3, #13]
 80082ba:	2001      	movs	r0, #1
 80082bc:	9000      	str	r0, [sp, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fc3b 	bl	8009b3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082cc:	e03b      	b.n	8008346 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	7b5b      	ldrb	r3, [r3, #13]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 ff5f 	bl	800a198 <USBH_LL_GetURBState>
 80082da:	4603      	mov	r3, r0
 80082dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d128      	bne.n	8008336 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	8b12      	ldrh	r2, [r2, #24]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d90e      	bls.n	800830e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	8b12      	ldrh	r2, [r2, #24]
 80082f8:	1a9a      	subs	r2, r3, r2
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	8b12      	ldrh	r2, [r2, #24]
 8008306:	441a      	add	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	61da      	str	r2, [r3, #28]
 800830c:	e002      	b.n	8008314 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008324:	e00e      	b.n	8008344 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f868 	bl	8008404 <USBH_CDC_TransmitCallback>
      break;
 8008334:	e006      	b.n	8008344 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d103      	bne.n	8008344 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008344:	bf00      	nop
  }
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008360:	2300      	movs	r3, #0
 8008362:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800836a:	2b03      	cmp	r3, #3
 800836c:	d002      	beq.n	8008374 <CDC_ProcessReception+0x26>
 800836e:	2b04      	cmp	r3, #4
 8008370:	d00e      	beq.n	8008390 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008372:	e043      	b.n	80083fc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6a19      	ldr	r1, [r3, #32]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	8b5a      	ldrh	r2, [r3, #26]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	7b1b      	ldrb	r3, [r3, #12]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 fbff 	bl	8009b84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2204      	movs	r2, #4
 800838a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800838e:	e035      	b.n	80083fc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	7b1b      	ldrb	r3, [r3, #12]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fefe 	bl	800a198 <USBH_LL_GetURBState>
 800839c:	4603      	mov	r3, r0
 800839e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80083a0:	7cfb      	ldrb	r3, [r7, #19]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d129      	bne.n	80083fa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	7b1b      	ldrb	r3, [r3, #12]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fe61 	bl	800a074 <USBH_LL_GetLastXferSize>
 80083b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d016      	beq.n	80083ec <CDC_ProcessReception+0x9e>
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	8b5b      	ldrh	r3, [r3, #26]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d910      	bls.n	80083ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad2      	subs	r2, r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	6a1a      	ldr	r2, [r3, #32]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	441a      	add	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2203      	movs	r2, #3
 80083e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083ea:	e006      	b.n	80083fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f80f 	bl	8008418 <USBH_CDC_ReceiveCallback>
      break;
 80083fa:	bf00      	nop
  }
}
 80083fc:	bf00      	nop
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008454:	2302      	movs	r3, #2
 8008456:	e029      	b.n	80084ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	79fa      	ldrb	r2, [r7, #7]
 800845c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f81f 	bl	80084b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f001 fd31 	bl	8009f0c <USBH_LL_Init>

  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e009      	b.n	80084da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	33e0      	adds	r3, #224	; 0xe0
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	2200      	movs	r2, #0
 80084d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b0f      	cmp	r3, #15
 80084de:	d9f2      	bls.n	80084c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e009      	b.n	80084fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008500:	d3f1      	bcc.n	80084e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d016      	beq.n	800859e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10e      	bne.n	8008598 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008580:	1c59      	adds	r1, r3, #1
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	33de      	adds	r3, #222	; 0xde
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]
 8008596:	e004      	b.n	80085a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	73fb      	strb	r3, [r7, #15]
 800859c:	e001      	b.n	80085a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800859e:	2302      	movs	r3, #2
 80085a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d204      	bcs.n	80085d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80085d4:	e001      	b.n	80085da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085d6:	2302      	movs	r3, #2
 80085d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	4608      	mov	r0, r1
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	70fb      	strb	r3, [r7, #3]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70bb      	strb	r3, [r7, #2]
 80085fe:	4613      	mov	r3, r2
 8008600:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008610:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008612:	e025      	b.n	8008660 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	221a      	movs	r2, #26
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	3308      	adds	r3, #8
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	3302      	adds	r3, #2
 8008624:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	795b      	ldrb	r3, [r3, #5]
 800862a:	78fa      	ldrb	r2, [r7, #3]
 800862c:	429a      	cmp	r2, r3
 800862e:	d002      	beq.n	8008636 <USBH_FindInterface+0x4e>
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	2bff      	cmp	r3, #255	; 0xff
 8008634:	d111      	bne.n	800865a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800863a:	78ba      	ldrb	r2, [r7, #2]
 800863c:	429a      	cmp	r2, r3
 800863e:	d002      	beq.n	8008646 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008640:	78bb      	ldrb	r3, [r7, #2]
 8008642:	2bff      	cmp	r3, #255	; 0xff
 8008644:	d109      	bne.n	800865a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800864a:	787a      	ldrb	r2, [r7, #1]
 800864c:	429a      	cmp	r2, r3
 800864e:	d002      	beq.n	8008656 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008650:	787b      	ldrb	r3, [r7, #1]
 8008652:	2bff      	cmp	r3, #255	; 0xff
 8008654:	d101      	bne.n	800865a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	e006      	b.n	8008668 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	3301      	adds	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d9d6      	bls.n	8008614 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008666:	23ff      	movs	r3, #255	; 0xff
}
 8008668:	4618      	mov	r0, r3
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fc81 	bl	8009f84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008682:	2101      	movs	r1, #1
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fd9a 	bl	800a1be <USBH_LL_DriverVBUS>

  return USBH_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af04      	add	r7, sp, #16
 800869a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800869c:	2302      	movs	r3, #2
 800869e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d102      	bne.n	80086b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2203      	movs	r2, #3
 80086b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b0b      	cmp	r3, #11
 80086be:	f200 81be 	bhi.w	8008a3e <USBH_Process+0x3aa>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <USBH_Process+0x34>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086f9 	.word	0x080086f9
 80086cc:	0800872b 	.word	0x0800872b
 80086d0:	08008793 	.word	0x08008793
 80086d4:	080089d9 	.word	0x080089d9
 80086d8:	08008a3f 	.word	0x08008a3f
 80086dc:	08008837 	.word	0x08008837
 80086e0:	0800897f 	.word	0x0800897f
 80086e4:	0800886d 	.word	0x0800886d
 80086e8:	0800888d 	.word	0x0800888d
 80086ec:	080088ad 	.word	0x080088ad
 80086f0:	080088f1 	.word	0x080088f1
 80086f4:	080089c1 	.word	0x080089c1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 819e 	beq.w	8008a42 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800870c:	20c8      	movs	r0, #200	; 0xc8
 800870e:	f001 fd9d 	bl	800a24c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fc93 	bl	800a03e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008728:	e18b      	b.n	8008a42 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008730:	2b01      	cmp	r3, #1
 8008732:	d107      	bne.n	8008744 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008742:	e18d      	b.n	8008a60 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800874a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800874e:	d914      	bls.n	800877a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008756:	3301      	adds	r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008766:	2b03      	cmp	r3, #3
 8008768:	d903      	bls.n	8008772 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	220d      	movs	r2, #13
 800876e:	701a      	strb	r2, [r3, #0]
      break;
 8008770:	e176      	b.n	8008a60 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
      break;
 8008778:	e172      	b.n	8008a60 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008780:	f103 020a 	add.w	r2, r3, #10
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800878a:	200a      	movs	r0, #10
 800878c:	f001 fd5e 	bl	800a24c <USBH_Delay>
      break;
 8008790:	e166      	b.n	8008a60 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087a2:	2104      	movs	r1, #4
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087a8:	2064      	movs	r0, #100	; 0x64
 80087aa:	f001 fd4f 	bl	800a24c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fc1e 	bl	8009ff0 <USBH_LL_GetSpeed>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2205      	movs	r2, #5
 80087c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80087c4:	2100      	movs	r1, #0
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fa29 	bl	8009c1e <USBH_AllocPipe>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087d4:	2180      	movs	r1, #128	; 0x80
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 fa21 	bl	8009c1e <USBH_AllocPipe>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7919      	ldrb	r1, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087f8:	b292      	uxth	r2, r2
 80087fa:	9202      	str	r2, [sp, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	9201      	str	r2, [sp, #4]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	4603      	mov	r3, r0
 8008804:	2280      	movs	r2, #128	; 0x80
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f9da 	bl	8009bc0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7959      	ldrb	r1, [r3, #5]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008820:	b292      	uxth	r2, r2
 8008822:	9202      	str	r2, [sp, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	9201      	str	r2, [sp, #4]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	4603      	mov	r3, r0
 800882c:	2200      	movs	r2, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f9c6 	bl	8009bc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008834:	e114      	b.n	8008a60 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f918 	bl	8008a6c <USBH_HandleEnum>
 800883c:	4603      	mov	r3, r0
 800883e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 80fe 	bne.w	8008a46 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008858:	2b01      	cmp	r3, #1
 800885a:	d103      	bne.n	8008864 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2208      	movs	r2, #8
 8008860:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008862:	e0f0      	b.n	8008a46 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2207      	movs	r2, #7
 8008868:	701a      	strb	r2, [r3, #0]
      break;
 800886a:	e0ec      	b.n	8008a46 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80e9 	beq.w	8008a4a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800887e:	2101      	movs	r1, #1
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2208      	movs	r2, #8
 8008888:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800888a:	e0de      	b.n	8008a4a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008892:	b29b      	uxth	r3, r3
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fc2c 	bl	80090f4 <USBH_SetCfg>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 80d5 	bne.w	8008a4e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2209      	movs	r2, #9
 80088a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088aa:	e0d0      	b.n	8008a4e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d016      	beq.n	80088e8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088ba:	2101      	movs	r1, #1
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc3c 	bl	800913a <USBH_SetFeature>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	220a      	movs	r2, #10
 80088d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088d4:	e0bd      	b.n	8008a52 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b03      	cmp	r3, #3
 80088dc:	f040 80b9 	bne.w	8008a52 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	220a      	movs	r2, #10
 80088e4:	701a      	strb	r2, [r3, #0]
      break;
 80088e6:	e0b4      	b.n	8008a52 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	220a      	movs	r2, #10
 80088ec:	701a      	strb	r2, [r3, #0]
      break;
 80088ee:	e0b0      	b.n	8008a52 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80ad 	beq.w	8008a56 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]
 8008908:	e016      	b.n	8008938 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800890a:	7bfa      	ldrb	r2, [r7, #15]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32de      	adds	r2, #222	; 0xde
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	791a      	ldrb	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800891c:	429a      	cmp	r2, r3
 800891e:	d108      	bne.n	8008932 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	32de      	adds	r2, #222	; 0xde
 8008926:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008930:	e005      	b.n	800893e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	3301      	adds	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0e5      	beq.n	800890a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d016      	beq.n	8008976 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2206      	movs	r2, #6
 800895e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008966:	2103      	movs	r1, #3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800896c:	e073      	b.n	8008a56 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	220d      	movs	r2, #13
 8008972:	701a      	strb	r2, [r3, #0]
      break;
 8008974:	e06f      	b.n	8008a56 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	220d      	movs	r2, #13
 800897a:	701a      	strb	r2, [r3, #0]
      break;
 800897c:	e06b      	b.n	8008a56 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d017      	beq.n	80089b8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	220b      	movs	r2, #11
 80089a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089a6:	e058      	b.n	8008a5a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d154      	bne.n	8008a5a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	220d      	movs	r2, #13
 80089b4:	701a      	strb	r2, [r3, #0]
      break;
 80089b6:	e050      	b.n	8008a5a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	220d      	movs	r2, #13
 80089bc:	701a      	strb	r2, [r3, #0]
      break;
 80089be:	e04c      	b.n	8008a5a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d049      	beq.n	8008a5e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	4798      	blx	r3
      }
      break;
 80089d6:	e042      	b.n	8008a5e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff fd67 	bl	80084b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d009      	beq.n	8008a04 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a14:	2105      	movs	r1, #5
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d107      	bne.n	8008a36 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fe20 	bl	8008674 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a34:	e014      	b.n	8008a60 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 faa4 	bl	8009f84 <USBH_LL_Start>
      break;
 8008a3c:	e010      	b.n	8008a60 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a3e:	bf00      	nop
 8008a40:	e00e      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a42:	bf00      	nop
 8008a44:	e00c      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a46:	bf00      	nop
 8008a48:	e00a      	b.n	8008a60 <USBH_Process+0x3cc>
    break;
 8008a4a:	bf00      	nop
 8008a4c:	e008      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a4e:	bf00      	nop
 8008a50:	e006      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a52:	bf00      	nop
 8008a54:	e004      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a56:	bf00      	nop
 8008a58:	e002      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a5a:	bf00      	nop
 8008a5c:	e000      	b.n	8008a60 <USBH_Process+0x3cc>
      break;
 8008a5e:	bf00      	nop
  }
  return USBH_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop

08008a6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b07      	cmp	r3, #7
 8008a82:	f200 81c1 	bhi.w	8008e08 <USBH_HandleEnum+0x39c>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USBH_HandleEnum+0x20>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008b6b 	.word	0x08008b6b
 8008a94:	08008bd5 	.word	0x08008bd5
 8008a98:	08008c63 	.word	0x08008c63
 8008a9c:	08008ccd 	.word	0x08008ccd
 8008aa0:	08008d3d 	.word	0x08008d3d
 8008aa4:	08008d83 	.word	0x08008d83
 8008aa8:	08008dc9 	.word	0x08008dc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008aac:	2108      	movs	r1, #8
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa50 	bl	8008f54 <USBH_Get_DevDesc>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d130      	bne.n	8008b20 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7919      	ldrb	r1, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ae2:	b292      	uxth	r2, r2
 8008ae4:	9202      	str	r2, [sp, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	9201      	str	r2, [sp, #4]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4603      	mov	r3, r0
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 f865 	bl	8009bc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7959      	ldrb	r1, [r3, #5]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	9202      	str	r2, [sp, #8]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	9201      	str	r2, [sp, #4]
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	4603      	mov	r3, r0
 8008b16:	2200      	movs	r2, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 f851 	bl	8009bc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b1e:	e175      	b.n	8008e0c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	f040 8172 	bne.w	8008e0c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d903      	bls.n	8008b4a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	220d      	movs	r2, #13
 8008b46:	701a      	strb	r2, [r3, #0]
      break;
 8008b48:	e160      	b.n	8008e0c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f885 	bl	8009c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f87f 	bl	8009c60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
      break;
 8008b68:	e150      	b.n	8008e0c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9f1 	bl	8008f54 <USBH_Get_DevDesc>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d103      	bne.n	8008b84 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b82:	e145      	b.n	8008e10 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	f040 8142 	bne.w	8008e10 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b92:	3301      	adds	r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d903      	bls.n	8008bae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	220d      	movs	r2, #13
 8008baa:	701a      	strb	r2, [r3, #0]
      break;
 8008bac:	e130      	b.n	8008e10 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f853 	bl	8009c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f84d 	bl	8009c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
      break;
 8008bd2:	e11d      	b.n	8008e10 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa68 	bl	80090ac <USBH_SetAddress>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d132      	bne.n	8008c4c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008be6:	2002      	movs	r0, #2
 8008be8:	f001 fb30 	bl	800a24c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7919      	ldrb	r1, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c0e:	b292      	uxth	r2, r2
 8008c10:	9202      	str	r2, [sp, #8]
 8008c12:	2200      	movs	r2, #0
 8008c14:	9201      	str	r2, [sp, #4]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2280      	movs	r2, #128	; 0x80
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 ffcf 	bl	8009bc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7959      	ldrb	r1, [r3, #5]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c36:	b292      	uxth	r2, r2
 8008c38:	9202      	str	r2, [sp, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	9201      	str	r2, [sp, #4]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4603      	mov	r3, r0
 8008c42:	2200      	movs	r2, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 ffbb 	bl	8009bc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c4a:	e0e3      	b.n	8008e14 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	f040 80e0 	bne.w	8008e14 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	220d      	movs	r2, #13
 8008c58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	705a      	strb	r2, [r3, #1]
      break;
 8008c60:	e0d8      	b.n	8008e14 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c62:	2109      	movs	r1, #9
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f99d 	bl	8008fa4 <USBH_Get_CfgDesc>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2204      	movs	r2, #4
 8008c78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c7a:	e0cd      	b.n	8008e18 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	f040 80ca 	bne.w	8008e18 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d903      	bls.n	8008ca6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	220d      	movs	r2, #13
 8008ca2:	701a      	strb	r2, [r3, #0]
      break;
 8008ca4:	e0b8      	b.n	8008e18 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	795b      	ldrb	r3, [r3, #5]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 ffd7 	bl	8009c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	791b      	ldrb	r3, [r3, #4]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 ffd1 	bl	8009c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	701a      	strb	r2, [r3, #0]
      break;
 8008cca:	e0a5      	b.n	8008e18 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f965 	bl	8008fa4 <USBH_Get_CfgDesc>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d103      	bne.n	8008cec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2205      	movs	r2, #5
 8008ce8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cea:	e097      	b.n	8008e1c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	f040 8094 	bne.w	8008e1c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d903      	bls.n	8008d16 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	220d      	movs	r2, #13
 8008d12:	701a      	strb	r2, [r3, #0]
      break;
 8008d14:	e082      	b.n	8008e1c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	795b      	ldrb	r3, [r3, #5]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 ff9f 	bl	8009c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	791b      	ldrb	r3, [r3, #4]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 ff99 	bl	8009c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
      break;
 8008d3a:	e06f      	b.n	8008e1c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d019      	beq.n	8008d7a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d52:	23ff      	movs	r3, #255	; 0xff
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f949 	bl	8008fec <USBH_Get_StringDesc>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2206      	movs	r2, #6
 8008d68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d6a:	e059      	b.n	8008e20 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d156      	bne.n	8008e20 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2206      	movs	r2, #6
 8008d76:	705a      	strb	r2, [r3, #1]
      break;
 8008d78:	e052      	b.n	8008e20 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	705a      	strb	r2, [r3, #1]
      break;
 8008d80:	e04e      	b.n	8008e20 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d019      	beq.n	8008dc0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d98:	23ff      	movs	r3, #255	; 0xff
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f926 	bl	8008fec <USBH_Get_StringDesc>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2207      	movs	r2, #7
 8008dae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008db0:	e038      	b.n	8008e24 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d135      	bne.n	8008e24 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2207      	movs	r2, #7
 8008dbc:	705a      	strb	r2, [r3, #1]
      break;
 8008dbe:	e031      	b.n	8008e24 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2207      	movs	r2, #7
 8008dc4:	705a      	strb	r2, [r3, #1]
      break;
 8008dc6:	e02d      	b.n	8008e24 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d017      	beq.n	8008e02 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dde:	23ff      	movs	r3, #255	; 0xff
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f903 	bl	8008fec <USBH_Get_StringDesc>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008df4:	e018      	b.n	8008e28 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d115      	bne.n	8008e28 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008e00:	e012      	b.n	8008e28 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]
      break;
 8008e06:	e00f      	b.n	8008e28 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008e08:	bf00      	nop
 8008e0a:	e00e      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e00c      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e10:	bf00      	nop
 8008e12:	e00a      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e14:	bf00      	nop
 8008e16:	e008      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e006      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e004      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e20:	bf00      	nop
 8008e22:	e002      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <USBH_HandleEnum+0x3be>
      break;
 8008e28:	bf00      	nop
  }
  return Status;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f804 	bl	8008e76 <USBH_HandleSof>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b0b      	cmp	r3, #11
 8008e86:	d10a      	bne.n	8008e9e <USBH_HandleSof+0x28>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008eb6:	bf00      	nop
}
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008ed2:	bf00      	nop
}
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f844 	bl	8009fba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	791b      	ldrb	r3, [r3, #4]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fe91 	bl	8009c60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	795b      	ldrb	r3, [r3, #5]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fe8b 	bl	8009c60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008f66:	78fb      	ldrb	r3, [r7, #3]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f72:	2100      	movs	r1, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f864 	bl	8009042 <USBH_GetDescriptor>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	b292      	uxth	r2, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	f000 f918 	bl	80091ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	331c      	adds	r3, #28
 8008fb4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008fb6:	887b      	ldrh	r3, [r7, #2]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f83d 	bl	8009042 <USBH_GetDescriptor>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008fd2:	887b      	ldrh	r3, [r7, #2]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f987 	bl	80092ec <USBH_ParseCfgDesc>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	72fb      	strb	r3, [r7, #11]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	b29b      	uxth	r3, r3
 8009004:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009008:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009010:	893b      	ldrh	r3, [r7, #8]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	460b      	mov	r3, r1
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f812 	bl	8009042 <USBH_GetDescriptor>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d107      	bne.n	8009038 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800902e:	893a      	ldrh	r2, [r7, #8]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fb24 	bl	8009680 <USBH_ParseStringDesc>
  }

  return status;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	607b      	str	r3, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	72fb      	strb	r3, [r7, #11]
 8009050:	4613      	mov	r3, r2
 8009052:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	789b      	ldrb	r3, [r3, #2]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d11c      	bne.n	8009096 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2206      	movs	r2, #6
 800906c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	893a      	ldrh	r2, [r7, #8]
 8009072:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009074:	893b      	ldrh	r3, [r7, #8]
 8009076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800907a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800907e:	d104      	bne.n	800908a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f240 4209 	movw	r2, #1033	; 0x409
 8009086:	829a      	strh	r2, [r3, #20]
 8009088:	e002      	b.n	8009090 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8b3a      	ldrh	r2, [r7, #24]
 8009094:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009096:	8b3b      	ldrh	r3, [r7, #24]
 8009098:	461a      	mov	r2, r3
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fb3d 	bl	800971c <USBH_CtlReq>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	789b      	ldrb	r3, [r3, #2]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d10f      	bne.n	80090e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2205      	movs	r2, #5
 80090ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090e0:	2200      	movs	r2, #0
 80090e2:	2100      	movs	r1, #0
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fb19 	bl	800971c <USBH_CtlReq>
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	789b      	ldrb	r3, [r3, #2]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d10e      	bne.n	8009126 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2209      	movs	r2, #9
 8009112:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	887a      	ldrh	r2, [r7, #2]
 8009118:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009126:	2200      	movs	r2, #0
 8009128:	2100      	movs	r1, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 faf6 	bl	800971c <USBH_CtlReq>
 8009130:	4603      	mov	r3, r0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	789b      	ldrb	r3, [r3, #2]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10f      	bne.n	800916e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fad2 	bl	800971c <USBH_CtlReq>
 8009178:	4603      	mov	r3, r0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	789b      	ldrb	r3, [r3, #2]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d10f      	bne.n	80091b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80091b6:	2200      	movs	r2, #0
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 faae 	bl	800971c <USBH_CtlReq>
 80091c0:	4603      	mov	r3, r0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	4613      	mov	r3, r2
 80091d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	785a      	ldrb	r2, [r3, #1]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	3302      	adds	r3, #2
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	3303      	adds	r3, #3
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	791a      	ldrb	r2, [r3, #4]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	795a      	ldrb	r2, [r3, #5]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	799a      	ldrb	r2, [r3, #6]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	79da      	ldrb	r2, [r3, #7]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	79db      	ldrb	r3, [r3, #7]
 8009228:	2b20      	cmp	r3, #32
 800922a:	dc11      	bgt.n	8009250 <USBH_ParseDevDesc+0x86>
 800922c:	2b08      	cmp	r3, #8
 800922e:	db16      	blt.n	800925e <USBH_ParseDevDesc+0x94>
 8009230:	3b08      	subs	r3, #8
 8009232:	2201      	movs	r2, #1
 8009234:	fa02 f303 	lsl.w	r3, r2, r3
 8009238:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800923c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009240:	2b00      	cmp	r3, #0
 8009242:	bf14      	ite	ne
 8009244:	2301      	movne	r3, #1
 8009246:	2300      	moveq	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <USBH_ParseDevDesc+0x8a>
 800924e:	e006      	b.n	800925e <USBH_ParseDevDesc+0x94>
 8009250:	2b40      	cmp	r3, #64	; 0x40
 8009252:	d104      	bne.n	800925e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	79da      	ldrb	r2, [r3, #7]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	71da      	strb	r2, [r3, #7]
      break;
 800925c:	e003      	b.n	8009266 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2240      	movs	r2, #64	; 0x40
 8009262:	71da      	strb	r2, [r3, #7]
      break;
 8009264:	bf00      	nop
  }

  if (length > 8U)
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	2b08      	cmp	r3, #8
 800926a:	d939      	bls.n	80092e0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3308      	adds	r3, #8
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b29a      	uxth	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3309      	adds	r3, #9
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	b29b      	uxth	r3, r3
 8009280:	4313      	orrs	r3, r2
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	330a      	adds	r3, #10
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b29a      	uxth	r2, r3
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	330b      	adds	r3, #11
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	b29b      	uxth	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	330c      	adds	r3, #12
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	330d      	adds	r3, #13
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	7b9a      	ldrb	r2, [r3, #14]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	7bda      	ldrb	r2, [r3, #15]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	7c1a      	ldrb	r2, [r3, #16]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	7c5a      	ldrb	r2, [r3, #17]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	745a      	strb	r2, [r3, #17]
  }
}
 80092e0:	bf00      	nop
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009300:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	785a      	ldrb	r2, [r3, #1]
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3302      	adds	r3, #2
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b29a      	uxth	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	3303      	adds	r3, #3
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	b29b      	uxth	r3, r3
 8009344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009348:	bf28      	it	cs
 800934a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800934e:	b29a      	uxth	r2, r3
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	791a      	ldrb	r2, [r3, #4]
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	795a      	ldrb	r2, [r3, #5]
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	799a      	ldrb	r2, [r3, #6]
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	79da      	ldrb	r2, [r3, #7]
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	7a1a      	ldrb	r2, [r3, #8]
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b09      	cmp	r3, #9
 8009382:	d002      	beq.n	800938a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	2209      	movs	r2, #9
 8009388:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	2b09      	cmp	r3, #9
 800938e:	f240 809d 	bls.w	80094cc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009392:	2309      	movs	r3, #9
 8009394:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800939a:	e081      	b.n	80094a0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800939c:	f107 0316 	add.w	r3, r7, #22
 80093a0:	4619      	mov	r1, r3
 80093a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a4:	f000 f99f 	bl	80096e6 <USBH_GetNextDesc>
 80093a8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d176      	bne.n	80094a0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d002      	beq.n	80093c0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	2209      	movs	r2, #9
 80093be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80093c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c4:	221a      	movs	r2, #26
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	3308      	adds	r3, #8
 80093cc:	6a3a      	ldr	r2, [r7, #32]
 80093ce:	4413      	add	r3, r2
 80093d0:	3302      	adds	r3, #2
 80093d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80093d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d6:	69f8      	ldr	r0, [r7, #28]
 80093d8:	f000 f87e 	bl	80094d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093e6:	e043      	b.n	8009470 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093e8:	f107 0316 	add.w	r3, r7, #22
 80093ec:	4619      	mov	r1, r3
 80093ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f0:	f000 f979 	bl	80096e6 <USBH_GetNextDesc>
 80093f4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d138      	bne.n	8009470 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	795b      	ldrb	r3, [r3, #5]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d10f      	bne.n	8009426 <USBH_ParseCfgDesc+0x13a>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	799b      	ldrb	r3, [r3, #6]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d10b      	bne.n	8009426 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	79db      	ldrb	r3, [r3, #7]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10f      	bne.n	8009436 <USBH_ParseCfgDesc+0x14a>
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b09      	cmp	r3, #9
 800941c:	d00b      	beq.n	8009436 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	2209      	movs	r2, #9
 8009422:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009424:	e007      	b.n	8009436 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b07      	cmp	r3, #7
 800942c:	d004      	beq.n	8009438 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	2207      	movs	r2, #7
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	e000      	b.n	8009438 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009436:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800943c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009440:	3201      	adds	r2, #1
 8009442:	00d2      	lsls	r2, r2, #3
 8009444:	211a      	movs	r1, #26
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	4413      	add	r3, r2
 800944c:	3308      	adds	r3, #8
 800944e:	6a3a      	ldr	r2, [r7, #32]
 8009450:	4413      	add	r3, r2
 8009452:	3304      	adds	r3, #4
 8009454:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f86b 	bl	8009536 <USBH_ParseEPDesc>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800946a:	3301      	adds	r3, #1
 800946c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	791b      	ldrb	r3, [r3, #4]
 8009474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009478:	429a      	cmp	r2, r3
 800947a:	d204      	bcs.n	8009486 <USBH_ParseCfgDesc+0x19a>
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	885a      	ldrh	r2, [r3, #2]
 8009480:	8afb      	ldrh	r3, [r7, #22]
 8009482:	429a      	cmp	r2, r3
 8009484:	d8b0      	bhi.n	80093e8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800948e:	429a      	cmp	r2, r3
 8009490:	d201      	bcs.n	8009496 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009492:	2303      	movs	r3, #3
 8009494:	e01c      	b.n	80094d0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800949a:	3301      	adds	r3, #1
 800949c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80094a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d805      	bhi.n	80094b4 <USBH_ParseCfgDesc+0x1c8>
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	885a      	ldrh	r2, [r3, #2]
 80094ac:	8afb      	ldrh	r3, [r7, #22]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	f63f af74 	bhi.w	800939c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	bf28      	it	cs
 80094bc:	2302      	movcs	r3, #2
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d201      	bcs.n	80094cc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e001      	b.n	80094d0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80094cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3730      	adds	r7, #48	; 0x30
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	785a      	ldrb	r2, [r3, #1]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	789a      	ldrb	r2, [r3, #2]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	78da      	ldrb	r2, [r3, #3]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	791a      	ldrb	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	795a      	ldrb	r2, [r3, #5]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	799a      	ldrb	r2, [r3, #6]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	79da      	ldrb	r2, [r3, #7]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	7a1a      	ldrb	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	721a      	strb	r2, [r3, #8]
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009536:	b480      	push	{r7}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	785a      	ldrb	r2, [r3, #1]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	789a      	ldrb	r2, [r3, #2]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	78da      	ldrb	r2, [r3, #3]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3304      	adds	r3, #4
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	b29a      	uxth	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3305      	adds	r3, #5
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	b29b      	uxth	r3, r3
 800957a:	4313      	orrs	r3, r2
 800957c:	b29a      	uxth	r2, r3
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	799a      	ldrb	r2, [r3, #6]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	889b      	ldrh	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009592:	2303      	movs	r3, #3
 8009594:	75fb      	strb	r3, [r7, #23]
 8009596:	e033      	b.n	8009600 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	889b      	ldrh	r3, [r3, #4]
 800959c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095a0:	f023 0307 	bic.w	r3, r3, #7
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	889b      	ldrh	r3, [r3, #4]
 80095ae:	b21a      	sxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3304      	adds	r3, #4
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b299      	uxth	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3305      	adds	r3, #5
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	021b      	lsls	r3, r3, #8
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	430b      	orrs	r3, r1
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d110      	bne.n	80095f2 <USBH_ParseEPDesc+0xbc>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	b299      	uxth	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3305      	adds	r3, #5
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	430b      	orrs	r3, r1
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	b21b      	sxth	r3, r3
 80095ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ee:	b21b      	sxth	r3, r3
 80095f0:	e001      	b.n	80095f6 <USBH_ParseEPDesc+0xc0>
 80095f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009606:	2b00      	cmp	r3, #0
 8009608:	d116      	bne.n	8009638 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	78db      	ldrb	r3, [r3, #3]
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b01      	cmp	r3, #1
 8009614:	d005      	beq.n	8009622 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	78db      	ldrb	r3, [r3, #3]
 800961a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800961e:	2b03      	cmp	r3, #3
 8009620:	d127      	bne.n	8009672 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	799b      	ldrb	r3, [r3, #6]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <USBH_ParseEPDesc+0xfc>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	799b      	ldrb	r3, [r3, #6]
 800962e:	2b10      	cmp	r3, #16
 8009630:	d91f      	bls.n	8009672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009632:	2303      	movs	r3, #3
 8009634:	75fb      	strb	r3, [r7, #23]
 8009636:	e01c      	b.n	8009672 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	78db      	ldrb	r3, [r3, #3]
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	2b01      	cmp	r3, #1
 8009642:	d10a      	bne.n	800965a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	799b      	ldrb	r3, [r3, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <USBH_ParseEPDesc+0x11e>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	799b      	ldrb	r3, [r3, #6]
 8009650:	2b10      	cmp	r3, #16
 8009652:	d90e      	bls.n	8009672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009654:	2303      	movs	r3, #3
 8009656:	75fb      	strb	r3, [r7, #23]
 8009658:	e00b      	b.n	8009672 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	78db      	ldrb	r3, [r3, #3]
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d105      	bne.n	8009672 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	799b      	ldrb	r3, [r3, #6]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800966e:	2303      	movs	r3, #3
 8009670:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009672:	7dfb      	ldrb	r3, [r7, #23]
}
 8009674:	4618      	mov	r0, r3
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3301      	adds	r3, #1
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b03      	cmp	r3, #3
 8009696:	d120      	bne.n	80096da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	1e9a      	subs	r2, r3, #2
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	4293      	cmp	r3, r2
 80096a2:	bf28      	it	cs
 80096a4:	4613      	movcs	r3, r2
 80096a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3302      	adds	r3, #2
 80096ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80096ae:	2300      	movs	r3, #0
 80096b0:	82fb      	strh	r3, [r7, #22]
 80096b2:	e00b      	b.n	80096cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80096b4:	8afb      	ldrh	r3, [r7, #22]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4413      	add	r3, r2
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	701a      	strb	r2, [r3, #0]
      pdest++;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3301      	adds	r3, #1
 80096c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80096c6:	8afb      	ldrh	r3, [r7, #22]
 80096c8:	3302      	adds	r3, #2
 80096ca:	82fb      	strh	r3, [r7, #22]
 80096cc:	8afa      	ldrh	r2, [r7, #22]
 80096ce:	8abb      	ldrh	r3, [r7, #20]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d3ef      	bcc.n	80096b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
  }
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	881a      	ldrh	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4413      	add	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800970e:	68fb      	ldr	r3, [r7, #12]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	789b      	ldrb	r3, [r3, #2]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d002      	beq.n	800973c <USBH_CtlReq+0x20>
 8009736:	2b02      	cmp	r3, #2
 8009738:	d00f      	beq.n	800975a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800973a:	e027      	b.n	800978c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	88fa      	ldrh	r2, [r7, #6]
 8009746:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2202      	movs	r2, #2
 8009752:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009754:	2301      	movs	r3, #1
 8009756:	75fb      	strb	r3, [r7, #23]
      break;
 8009758:	e018      	b.n	800978c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 f81c 	bl	8009798 <USBH_HandleControl>
 8009760:	4603      	mov	r3, r0
 8009762:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <USBH_CtlReq+0x54>
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d106      	bne.n	800977e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	761a      	strb	r2, [r3, #24]
      break;
 800977c:	e005      	b.n	800978a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d102      	bne.n	800978a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	709a      	strb	r2, [r3, #2]
      break;
 800978a:	bf00      	nop
  }
  return status;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af02      	add	r7, sp, #8
 800979e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	7e1b      	ldrb	r3, [r3, #24]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	2b0a      	cmp	r3, #10
 80097b0:	f200 8156 	bhi.w	8009a60 <USBH_HandleControl+0x2c8>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <USBH_HandleControl+0x24>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	08009803 	.word	0x08009803
 80097c4:	0800986d 	.word	0x0800986d
 80097c8:	08009893 	.word	0x08009893
 80097cc:	080098cb 	.word	0x080098cb
 80097d0:	080098f5 	.word	0x080098f5
 80097d4:	08009947 	.word	0x08009947
 80097d8:	08009969 	.word	0x08009969
 80097dc:	080099a5 	.word	0x080099a5
 80097e0:	080099cb 	.word	0x080099cb
 80097e4:	08009a09 	.word	0x08009a09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f103 0110 	add.w	r1, r3, #16
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	795b      	ldrb	r3, [r3, #5]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f943 	bl	8009a80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	761a      	strb	r2, [r3, #24]
      break;
 8009800:	e139      	b.n	8009a76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	795b      	ldrb	r3, [r3, #5]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fcc5 	bl	800a198 <USBH_LL_GetURBState>
 800980e:	4603      	mov	r3, r0
 8009810:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d11e      	bne.n	8009856 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7c1b      	ldrb	r3, [r3, #16]
 800981c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009820:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8adb      	ldrh	r3, [r3, #22]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800982a:	7b7b      	ldrb	r3, [r7, #13]
 800982c:	2b80      	cmp	r3, #128	; 0x80
 800982e:	d103      	bne.n	8009838 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2203      	movs	r2, #3
 8009834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009836:	e115      	b.n	8009a64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2205      	movs	r2, #5
 800983c:	761a      	strb	r2, [r3, #24]
      break;
 800983e:	e111      	b.n	8009a64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009840:	7b7b      	ldrb	r3, [r7, #13]
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	d103      	bne.n	800984e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2209      	movs	r2, #9
 800984a:	761a      	strb	r2, [r3, #24]
      break;
 800984c:	e10a      	b.n	8009a64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2207      	movs	r2, #7
 8009852:	761a      	strb	r2, [r3, #24]
      break;
 8009854:	e106      	b.n	8009a64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b04      	cmp	r3, #4
 800985a:	d003      	beq.n	8009864 <USBH_HandleControl+0xcc>
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	2b02      	cmp	r3, #2
 8009860:	f040 8100 	bne.w	8009a64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	220b      	movs	r2, #11
 8009868:	761a      	strb	r2, [r3, #24]
      break;
 800986a:	e0fb      	b.n	8009a64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6899      	ldr	r1, [r3, #8]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	899a      	ldrh	r2, [r3, #12]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	791b      	ldrb	r3, [r3, #4]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f93a 	bl	8009afe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2204      	movs	r2, #4
 800988e:	761a      	strb	r2, [r3, #24]
      break;
 8009890:	e0f1      	b.n	8009a76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	791b      	ldrb	r3, [r3, #4]
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc7d 	bl	800a198 <USBH_LL_GetURBState>
 800989e:	4603      	mov	r3, r0
 80098a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d102      	bne.n	80098ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2209      	movs	r2, #9
 80098ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d102      	bne.n	80098ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80098b4:	2303      	movs	r3, #3
 80098b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098b8:	e0d6      	b.n	8009a68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	2b04      	cmp	r3, #4
 80098be:	f040 80d3 	bne.w	8009a68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220b      	movs	r2, #11
 80098c6:	761a      	strb	r2, [r3, #24]
      break;
 80098c8:	e0ce      	b.n	8009a68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6899      	ldr	r1, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	899a      	ldrh	r2, [r3, #12]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	795b      	ldrb	r3, [r3, #5]
 80098d6:	2001      	movs	r0, #1
 80098d8:	9000      	str	r0, [sp, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f8ea 	bl	8009ab4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2206      	movs	r2, #6
 80098f0:	761a      	strb	r2, [r3, #24]
      break;
 80098f2:	e0c0      	b.n	8009a76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	795b      	ldrb	r3, [r3, #5]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fc4c 	bl	800a198 <USBH_LL_GetURBState>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d103      	bne.n	8009912 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2207      	movs	r2, #7
 800990e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009910:	e0ac      	b.n	8009a6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b05      	cmp	r3, #5
 8009916:	d105      	bne.n	8009924 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	220c      	movs	r2, #12
 800991c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800991e:	2303      	movs	r3, #3
 8009920:	73fb      	strb	r3, [r7, #15]
      break;
 8009922:	e0a3      	b.n	8009a6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d103      	bne.n	8009932 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2205      	movs	r2, #5
 800992e:	761a      	strb	r2, [r3, #24]
      break;
 8009930:	e09c      	b.n	8009a6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b04      	cmp	r3, #4
 8009936:	f040 8099 	bne.w	8009a6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	220b      	movs	r2, #11
 800993e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009940:	2302      	movs	r3, #2
 8009942:	73fb      	strb	r3, [r7, #15]
      break;
 8009944:	e092      	b.n	8009a6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	791b      	ldrb	r3, [r3, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f8d5 	bl	8009afe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2208      	movs	r2, #8
 8009964:	761a      	strb	r2, [r3, #24]

      break;
 8009966:	e086      	b.n	8009a76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	791b      	ldrb	r3, [r3, #4]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fc12 	bl	800a198 <USBH_LL_GetURBState>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d105      	bne.n	800998a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	220d      	movs	r2, #13
 8009982:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009988:	e072      	b.n	8009a70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b04      	cmp	r3, #4
 800998e:	d103      	bne.n	8009998 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	220b      	movs	r2, #11
 8009994:	761a      	strb	r2, [r3, #24]
      break;
 8009996:	e06b      	b.n	8009a70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b05      	cmp	r3, #5
 800999c:	d168      	bne.n	8009a70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800999e:	2303      	movs	r3, #3
 80099a0:	73fb      	strb	r3, [r7, #15]
      break;
 80099a2:	e065      	b.n	8009a70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	795b      	ldrb	r3, [r3, #5]
 80099a8:	2201      	movs	r2, #1
 80099aa:	9200      	str	r2, [sp, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f87f 	bl	8009ab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099bc:	b29a      	uxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	220a      	movs	r2, #10
 80099c6:	761a      	strb	r2, [r3, #24]
      break;
 80099c8:	e055      	b.n	8009a76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	795b      	ldrb	r3, [r3, #5]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fbe1 	bl	800a198 <USBH_LL_GetURBState>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d105      	bne.n	80099ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	220d      	movs	r2, #13
 80099e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099ea:	e043      	b.n	8009a74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d103      	bne.n	80099fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2209      	movs	r2, #9
 80099f6:	761a      	strb	r2, [r3, #24]
      break;
 80099f8:	e03c      	b.n	8009a74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d139      	bne.n	8009a74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	220b      	movs	r2, #11
 8009a04:	761a      	strb	r2, [r3, #24]
      break;
 8009a06:	e035      	b.n	8009a74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7e5b      	ldrb	r3, [r3, #25]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	765a      	strb	r2, [r3, #25]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7e5b      	ldrb	r3, [r3, #25]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d806      	bhi.n	8009a2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a28:	e025      	b.n	8009a76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a30:	2106      	movs	r1, #6
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	795b      	ldrb	r3, [r3, #5]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f90c 	bl	8009c60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	791b      	ldrb	r3, [r3, #4]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f906 	bl	8009c60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a5e:	e00a      	b.n	8009a76 <USBH_HandleControl+0x2de>

    default:
      break;
 8009a60:	bf00      	nop
 8009a62:	e008      	b.n	8009a76 <USBH_HandleControl+0x2de>
      break;
 8009a64:	bf00      	nop
 8009a66:	e006      	b.n	8009a76 <USBH_HandleControl+0x2de>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e004      	b.n	8009a76 <USBH_HandleControl+0x2de>
      break;
 8009a6c:	bf00      	nop
 8009a6e:	e002      	b.n	8009a76 <USBH_HandleControl+0x2de>
      break;
 8009a70:	bf00      	nop
 8009a72:	e000      	b.n	8009a76 <USBH_HandleControl+0x2de>
      break;
 8009a74:	bf00      	nop
  }

  return status;
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a8e:	79f9      	ldrb	r1, [r7, #7]
 8009a90:	2300      	movs	r3, #0
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	2308      	movs	r3, #8
 8009a96:	9302      	str	r3, [sp, #8]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 fb46 	bl	800a136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af04      	add	r7, sp, #16
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	80fb      	strh	r3, [r7, #6]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ad8:	7979      	ldrb	r1, [r7, #5]
 8009ada:	7e3b      	ldrb	r3, [r7, #24]
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	9302      	str	r3, [sp, #8]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	2300      	movs	r3, #0
 8009aec:	2200      	movs	r2, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fb21 	bl	800a136 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b088      	sub	sp, #32
 8009b02:	af04      	add	r7, sp, #16
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	80fb      	strh	r3, [r7, #6]
 8009b10:	4613      	mov	r3, r2
 8009b12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b14:	7979      	ldrb	r1, [r7, #5]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	2301      	movs	r3, #1
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	2300      	movs	r3, #0
 8009b28:	2201      	movs	r2, #1
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 fb03 	bl	800a136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b30:	2300      	movs	r3, #0

}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b088      	sub	sp, #32
 8009b3e:	af04      	add	r7, sp, #16
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	4611      	mov	r1, r2
 8009b46:	461a      	mov	r2, r3
 8009b48:	460b      	mov	r3, r1
 8009b4a:	80fb      	strh	r3, [r7, #6]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b5e:	7979      	ldrb	r1, [r7, #5]
 8009b60:	7e3b      	ldrb	r3, [r7, #24]
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	9302      	str	r3, [sp, #8]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2302      	movs	r3, #2
 8009b72:	2200      	movs	r2, #0
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 fade 	bl	800a136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af04      	add	r7, sp, #16
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	461a      	mov	r2, r3
 8009b92:	460b      	mov	r3, r1
 8009b94:	80fb      	strh	r3, [r7, #6]
 8009b96:	4613      	mov	r3, r2
 8009b98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b9a:	7979      	ldrb	r1, [r7, #5]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	2302      	movs	r3, #2
 8009bae:	2201      	movs	r2, #1
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 fac0 	bl	800a136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	4608      	mov	r0, r1
 8009bca:	4611      	mov	r1, r2
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4603      	mov	r3, r0
 8009bd0:	70fb      	strb	r3, [r7, #3]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	70bb      	strb	r3, [r7, #2]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009bda:	7878      	ldrb	r0, [r7, #1]
 8009bdc:	78ba      	ldrb	r2, [r7, #2]
 8009bde:	78f9      	ldrb	r1, [r7, #3]
 8009be0:	8b3b      	ldrh	r3, [r7, #24]
 8009be2:	9302      	str	r3, [sp, #8]
 8009be4:	7d3b      	ldrb	r3, [r7, #20]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	7c3b      	ldrb	r3, [r7, #16]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	4603      	mov	r3, r0
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa53 	bl	800a09a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa72 	bl	800a0f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f836 	bl	8009c9c <USBH_GetFreePipe>
 8009c30:	4603      	mov	r3, r0
 8009c32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d00a      	beq.n	8009c54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	89fb      	ldrh	r3, [r7, #14]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	33e0      	adds	r3, #224	; 0xe0
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	b2db      	uxtb	r3, r3
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d80d      	bhi.n	8009c8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c72:	78fb      	ldrb	r3, [r7, #3]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	33e0      	adds	r3, #224	; 0xe0
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	33e0      	adds	r3, #224	; 0xe0
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
 8009cac:	e00f      	b.n	8009cce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	33e0      	adds	r3, #224	; 0xe0
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d102      	bne.n	8009cc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	e007      	b.n	8009cd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b0f      	cmp	r3, #15
 8009cd2:	d9ec      	bls.n	8009cae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	490e      	ldr	r1, [pc, #56]	; (8009d24 <MX_USB_HOST_Init+0x40>)
 8009cec:	480e      	ldr	r0, [pc, #56]	; (8009d28 <MX_USB_HOST_Init+0x44>)
 8009cee:	f7fe fba7 	bl	8008440 <USBH_Init>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009cf8:	f7f7 fbd4 	bl	80014a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009cfc:	490b      	ldr	r1, [pc, #44]	; (8009d2c <MX_USB_HOST_Init+0x48>)
 8009cfe:	480a      	ldr	r0, [pc, #40]	; (8009d28 <MX_USB_HOST_Init+0x44>)
 8009d00:	f7fe fc2c 	bl	800855c <USBH_RegisterClass>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d0a:	f7f7 fbcb 	bl	80014a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d0e:	4806      	ldr	r0, [pc, #24]	; (8009d28 <MX_USB_HOST_Init+0x44>)
 8009d10:	f7fe fcb0 	bl	8008674 <USBH_Start>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d1a:	f7f7 fbc3 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	2000026c 	.word	0x2000026c
 8009d2c:	2000000c 	.word	0x2000000c

08009d30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009d34:	4802      	ldr	r0, [pc, #8]	; (8009d40 <MX_USB_HOST_Process+0x10>)
 8009d36:	f7fe fcad 	bl	8008694 <USBH_Process>
}
 8009d3a:	bf00      	nop
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	2000026c 	.word	0x2000026c

08009d44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d819      	bhi.n	8009d8c <USBH_UserProcess+0x48>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <USBH_UserProcess+0x1c>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d8d 	.word	0x08009d8d
 8009d64:	08009d7d 	.word	0x08009d7d
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009d75 	.word	0x08009d75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009d74:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <USBH_UserProcess+0x58>)
 8009d76:	2203      	movs	r2, #3
 8009d78:	701a      	strb	r2, [r3, #0]
  break;
 8009d7a:	e008      	b.n	8009d8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009d7c:	4b07      	ldr	r3, [pc, #28]	; (8009d9c <USBH_UserProcess+0x58>)
 8009d7e:	2202      	movs	r2, #2
 8009d80:	701a      	strb	r2, [r3, #0]
  break;
 8009d82:	e004      	b.n	8009d8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <USBH_UserProcess+0x58>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
  break;
 8009d8a:	e000      	b.n	8009d8e <USBH_UserProcess+0x4a>

  default:
  break;
 8009d8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000644 	.word	0x20000644

08009da0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08a      	sub	sp, #40	; 0x28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009da8:	f107 0314 	add.w	r3, r7, #20
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	605a      	str	r2, [r3, #4]
 8009db2:	609a      	str	r2, [r3, #8]
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dc0:	d147      	bne.n	8009e52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	613b      	str	r3, [r7, #16]
 8009dc6:	4b25      	ldr	r3, [pc, #148]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	4a24      	ldr	r2, [pc, #144]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009dcc:	f043 0301 	orr.w	r3, r3, #1
 8009dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8009dd2:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	613b      	str	r3, [r7, #16]
 8009ddc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de8:	2300      	movs	r3, #0
 8009dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	4619      	mov	r1, r3
 8009df2:	481b      	ldr	r0, [pc, #108]	; (8009e60 <HAL_HCD_MspInit+0xc0>)
 8009df4:	f7f8 fb7a 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009df8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e06:	2300      	movs	r3, #0
 8009e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e0a:	230a      	movs	r3, #10
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e0e:	f107 0314 	add.w	r3, r7, #20
 8009e12:	4619      	mov	r1, r3
 8009e14:	4812      	ldr	r0, [pc, #72]	; (8009e60 <HAL_HCD_MspInit+0xc0>)
 8009e16:	f7f8 fb69 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e1a:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1e:	4a0f      	ldr	r2, [pc, #60]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e24:	6353      	str	r3, [r2, #52]	; 0x34
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2e:	4a0b      	ldr	r2, [pc, #44]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e34:	6453      	str	r3, [r2, #68]	; 0x44
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <HAL_HCD_MspInit+0xbc>)
 8009e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	2043      	movs	r0, #67	; 0x43
 8009e48:	f7f7 ff17 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e4c:	2043      	movs	r0, #67	; 0x43
 8009e4e:	f7f7 ff30 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e52:	bf00      	nop
 8009e54:	3728      	adds	r7, #40	; 0x28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	40020000 	.word	0x40020000

08009e64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe ffed 	bl	8008e52 <USBH_LL_IncTimer>
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff f825 	bl	8008ede <USBH_LL_Connect>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff f82e 	bl	8008f0c <USBH_LL_Disconnect>
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe ffdf 	bl	8008ea6 <USBH_LL_PortEnabled>
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe ffdf 	bl	8008ec2 <USBH_LL_PortDisabled>
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d12a      	bne.n	8009f74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f1e:	4a18      	ldr	r2, [pc, #96]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f2a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f36:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f38:	2208      	movs	r2, #8
 8009f3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f3c:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f42:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009f48:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009f54:	480a      	ldr	r0, [pc, #40]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f56:	f7f8 fc96 	bl	8002886 <HAL_HCD_Init>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009f60:	f7f7 faa0 	bl	80014a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009f64:	4806      	ldr	r0, [pc, #24]	; (8009f80 <USBH_LL_Init+0x74>)
 8009f66:	f7f9 f87a 	bl	800305e <HAL_HCD_GetCurrentFrame>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7fe ff60 	bl	8008e34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000648 	.word	0x20000648

08009f84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f8 ffe9 	bl	8002f72 <HAL_HCD_Start>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f95c 	bl	800a264 <USBH_Get_USB_Status>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7f8 fff1 	bl	8002fb8 <HAL_HCD_Stop>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f941 	bl	800a264 <USBH_Get_USB_Status>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a002:	4618      	mov	r0, r3
 800a004:	f7f9 f839 	bl	800307a <HAL_HCD_GetCurrentSpeed>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d00c      	beq.n	800a028 <USBH_LL_GetSpeed+0x38>
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d80d      	bhi.n	800a02e <USBH_LL_GetSpeed+0x3e>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <USBH_LL_GetSpeed+0x2c>
 800a016:	2b01      	cmp	r3, #1
 800a018:	d003      	beq.n	800a022 <USBH_LL_GetSpeed+0x32>
 800a01a:	e008      	b.n	800a02e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e008      	b.n	800a034 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a022:	2301      	movs	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e005      	b.n	800a034 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a028:	2302      	movs	r3, #2
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	e002      	b.n	800a034 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
    break;
 800a032:	bf00      	nop
  }
  return  speed;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a054:	4618      	mov	r0, r3
 800a056:	f7f8 ffcc 	bl	8002ff2 <HAL_HCD_ResetPort>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f8ff 	bl	800a264 <USBH_Get_USB_Status>
 800a066:	4603      	mov	r3, r0
 800a068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f8 ffd3 	bl	8003036 <HAL_HCD_HC_GetXferCount>
 800a090:	4603      	mov	r3, r0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a09a:	b590      	push	{r4, r7, lr}
 800a09c:	b089      	sub	sp, #36	; 0x24
 800a09e:	af04      	add	r7, sp, #16
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	70fb      	strb	r3, [r7, #3]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70bb      	strb	r3, [r7, #2]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a0c2:	787c      	ldrb	r4, [r7, #1]
 800a0c4:	78ba      	ldrb	r2, [r7, #2]
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	f7f8 fc36 	bl	800294a <HAL_HCD_HC_Init>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f8bd 	bl	800a264 <USBH_Get_USB_Status>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}

0800a0f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a112:	78fa      	ldrb	r2, [r7, #3]
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f7f8 fca6 	bl	8002a68 <HAL_HCD_HC_Halt>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	4618      	mov	r0, r3
 800a124:	f000 f89e 	bl	800a264 <USBH_Get_USB_Status>
 800a128:	4603      	mov	r3, r0
 800a12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a136:	b590      	push	{r4, r7, lr}
 800a138:	b089      	sub	sp, #36	; 0x24
 800a13a:	af04      	add	r7, sp, #16
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	461a      	mov	r2, r3
 800a144:	4603      	mov	r3, r0
 800a146:	70fb      	strb	r3, [r7, #3]
 800a148:	460b      	mov	r3, r1
 800a14a:	70bb      	strb	r3, [r7, #2]
 800a14c:	4613      	mov	r3, r2
 800a14e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a15e:	787c      	ldrb	r4, [r7, #1]
 800a160:	78ba      	ldrb	r2, [r7, #2]
 800a162:	78f9      	ldrb	r1, [r7, #3]
 800a164:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a16c:	9302      	str	r3, [sp, #8]
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4623      	mov	r3, r4
 800a17a:	f7f8 fc99 	bl	8002ab0 <HAL_HCD_HC_SubmitRequest>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f86d 	bl	800a264 <USBH_Get_USB_Status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	bd90      	pop	{r4, r7, pc}

0800a198 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f8 ff2d 	bl	800300e <HAL_HCD_HC_GetURBState>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d103      	bne.n	800a1dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 f870 	bl	800a2bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a1dc:	20c8      	movs	r0, #200	; 0xc8
 800a1de:	f7f7 fc4d 	bl	8001a7c <HAL_Delay>
  return USBH_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a202:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	212c      	movs	r1, #44	; 0x2c
 800a20a:	fb01 f303 	mul.w	r3, r1, r3
 800a20e:	4413      	add	r3, r2
 800a210:	333b      	adds	r3, #59	; 0x3b
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d009      	beq.n	800a22c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	212c      	movs	r1, #44	; 0x2c
 800a21e:	fb01 f303 	mul.w	r3, r1, r3
 800a222:	4413      	add	r3, r2
 800a224:	3354      	adds	r3, #84	; 0x54
 800a226:	78ba      	ldrb	r2, [r7, #2]
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	e008      	b.n	800a23e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	212c      	movs	r1, #44	; 0x2c
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3355      	adds	r3, #85	; 0x55
 800a23a:	78ba      	ldrb	r2, [r7, #2]
 800a23c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7f7 fc11 	bl	8001a7c <HAL_Delay>
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d817      	bhi.n	800a2a8 <USBH_Get_USB_Status+0x44>
 800a278:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <USBH_Get_USB_Status+0x1c>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a297 	.word	0x0800a297
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2a3 	.word	0x0800a2a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e00b      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a296:	2302      	movs	r3, #2
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e008      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	e005      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a6:	e002      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ac:	bf00      	nop
  }
  return usb_status;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
 800a2d4:	e001      	b.n	800a2da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4803      	ldr	r0, [pc, #12]	; (800a2f0 <MX_DriverVbusFS+0x34>)
 800a2e2:	f7f8 fab7 	bl	8002854 <HAL_GPIO_WritePin>
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	40020800 	.word	0x40020800

0800a2f4 <__errno>:
 800a2f4:	4b01      	ldr	r3, [pc, #4]	; (800a2fc <__errno+0x8>)
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	2000002c 	.word	0x2000002c

0800a300 <__libc_init_array>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	4d0d      	ldr	r5, [pc, #52]	; (800a338 <__libc_init_array+0x38>)
 800a304:	4c0d      	ldr	r4, [pc, #52]	; (800a33c <__libc_init_array+0x3c>)
 800a306:	1b64      	subs	r4, r4, r5
 800a308:	10a4      	asrs	r4, r4, #2
 800a30a:	2600      	movs	r6, #0
 800a30c:	42a6      	cmp	r6, r4
 800a30e:	d109      	bne.n	800a324 <__libc_init_array+0x24>
 800a310:	4d0b      	ldr	r5, [pc, #44]	; (800a340 <__libc_init_array+0x40>)
 800a312:	4c0c      	ldr	r4, [pc, #48]	; (800a344 <__libc_init_array+0x44>)
 800a314:	f000 f92e 	bl	800a574 <_init>
 800a318:	1b64      	subs	r4, r4, r5
 800a31a:	10a4      	asrs	r4, r4, #2
 800a31c:	2600      	movs	r6, #0
 800a31e:	42a6      	cmp	r6, r4
 800a320:	d105      	bne.n	800a32e <__libc_init_array+0x2e>
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	f855 3b04 	ldr.w	r3, [r5], #4
 800a328:	4798      	blx	r3
 800a32a:	3601      	adds	r6, #1
 800a32c:	e7ee      	b.n	800a30c <__libc_init_array+0xc>
 800a32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a332:	4798      	blx	r3
 800a334:	3601      	adds	r6, #1
 800a336:	e7f2      	b.n	800a31e <__libc_init_array+0x1e>
 800a338:	0800a5cc 	.word	0x0800a5cc
 800a33c:	0800a5cc 	.word	0x0800a5cc
 800a340:	0800a5cc 	.word	0x0800a5cc
 800a344:	0800a5d0 	.word	0x0800a5d0

0800a348 <malloc>:
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <malloc+0xc>)
 800a34a:	4601      	mov	r1, r0
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	f000 b87f 	b.w	800a450 <_malloc_r>
 800a352:	bf00      	nop
 800a354:	2000002c 	.word	0x2000002c

0800a358 <free>:
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <free+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f000 b80b 	b.w	800a378 <_free_r>
 800a362:	bf00      	nop
 800a364:	2000002c 	.word	0x2000002c

0800a368 <memset>:
 800a368:	4402      	add	r2, r0
 800a36a:	4603      	mov	r3, r0
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d100      	bne.n	800a372 <memset+0xa>
 800a370:	4770      	bx	lr
 800a372:	f803 1b01 	strb.w	r1, [r3], #1
 800a376:	e7f9      	b.n	800a36c <memset+0x4>

0800a378 <_free_r>:
 800a378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d044      	beq.n	800a408 <_free_r+0x90>
 800a37e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a382:	9001      	str	r0, [sp, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	f1a1 0404 	sub.w	r4, r1, #4
 800a38a:	bfb8      	it	lt
 800a38c:	18e4      	addlt	r4, r4, r3
 800a38e:	f000 f8e3 	bl	800a558 <__malloc_lock>
 800a392:	4a1e      	ldr	r2, [pc, #120]	; (800a40c <_free_r+0x94>)
 800a394:	9801      	ldr	r0, [sp, #4]
 800a396:	6813      	ldr	r3, [r2, #0]
 800a398:	b933      	cbnz	r3, 800a3a8 <_free_r+0x30>
 800a39a:	6063      	str	r3, [r4, #4]
 800a39c:	6014      	str	r4, [r2, #0]
 800a39e:	b003      	add	sp, #12
 800a3a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3a4:	f000 b8de 	b.w	800a564 <__malloc_unlock>
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	d908      	bls.n	800a3be <_free_r+0x46>
 800a3ac:	6825      	ldr	r5, [r4, #0]
 800a3ae:	1961      	adds	r1, r4, r5
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	bf01      	itttt	eq
 800a3b4:	6819      	ldreq	r1, [r3, #0]
 800a3b6:	685b      	ldreq	r3, [r3, #4]
 800a3b8:	1949      	addeq	r1, r1, r5
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	e7ed      	b.n	800a39a <_free_r+0x22>
 800a3be:	461a      	mov	r2, r3
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	b10b      	cbz	r3, 800a3c8 <_free_r+0x50>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d9fa      	bls.n	800a3be <_free_r+0x46>
 800a3c8:	6811      	ldr	r1, [r2, #0]
 800a3ca:	1855      	adds	r5, r2, r1
 800a3cc:	42a5      	cmp	r5, r4
 800a3ce:	d10b      	bne.n	800a3e8 <_free_r+0x70>
 800a3d0:	6824      	ldr	r4, [r4, #0]
 800a3d2:	4421      	add	r1, r4
 800a3d4:	1854      	adds	r4, r2, r1
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	6011      	str	r1, [r2, #0]
 800a3da:	d1e0      	bne.n	800a39e <_free_r+0x26>
 800a3dc:	681c      	ldr	r4, [r3, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	6053      	str	r3, [r2, #4]
 800a3e2:	4421      	add	r1, r4
 800a3e4:	6011      	str	r1, [r2, #0]
 800a3e6:	e7da      	b.n	800a39e <_free_r+0x26>
 800a3e8:	d902      	bls.n	800a3f0 <_free_r+0x78>
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	e7d6      	b.n	800a39e <_free_r+0x26>
 800a3f0:	6825      	ldr	r5, [r4, #0]
 800a3f2:	1961      	adds	r1, r4, r5
 800a3f4:	428b      	cmp	r3, r1
 800a3f6:	bf04      	itt	eq
 800a3f8:	6819      	ldreq	r1, [r3, #0]
 800a3fa:	685b      	ldreq	r3, [r3, #4]
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	bf04      	itt	eq
 800a400:	1949      	addeq	r1, r1, r5
 800a402:	6021      	streq	r1, [r4, #0]
 800a404:	6054      	str	r4, [r2, #4]
 800a406:	e7ca      	b.n	800a39e <_free_r+0x26>
 800a408:	b003      	add	sp, #12
 800a40a:	bd30      	pop	{r4, r5, pc}
 800a40c:	2000094c 	.word	0x2000094c

0800a410 <sbrk_aligned>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	4e0e      	ldr	r6, [pc, #56]	; (800a44c <sbrk_aligned+0x3c>)
 800a414:	460c      	mov	r4, r1
 800a416:	6831      	ldr	r1, [r6, #0]
 800a418:	4605      	mov	r5, r0
 800a41a:	b911      	cbnz	r1, 800a422 <sbrk_aligned+0x12>
 800a41c:	f000 f88c 	bl	800a538 <_sbrk_r>
 800a420:	6030      	str	r0, [r6, #0]
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f000 f887 	bl	800a538 <_sbrk_r>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d00a      	beq.n	800a444 <sbrk_aligned+0x34>
 800a42e:	1cc4      	adds	r4, r0, #3
 800a430:	f024 0403 	bic.w	r4, r4, #3
 800a434:	42a0      	cmp	r0, r4
 800a436:	d007      	beq.n	800a448 <sbrk_aligned+0x38>
 800a438:	1a21      	subs	r1, r4, r0
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f87c 	bl	800a538 <_sbrk_r>
 800a440:	3001      	adds	r0, #1
 800a442:	d101      	bne.n	800a448 <sbrk_aligned+0x38>
 800a444:	f04f 34ff 	mov.w	r4, #4294967295
 800a448:	4620      	mov	r0, r4
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	20000950 	.word	0x20000950

0800a450 <_malloc_r>:
 800a450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a454:	1ccd      	adds	r5, r1, #3
 800a456:	f025 0503 	bic.w	r5, r5, #3
 800a45a:	3508      	adds	r5, #8
 800a45c:	2d0c      	cmp	r5, #12
 800a45e:	bf38      	it	cc
 800a460:	250c      	movcc	r5, #12
 800a462:	2d00      	cmp	r5, #0
 800a464:	4607      	mov	r7, r0
 800a466:	db01      	blt.n	800a46c <_malloc_r+0x1c>
 800a468:	42a9      	cmp	r1, r5
 800a46a:	d905      	bls.n	800a478 <_malloc_r+0x28>
 800a46c:	230c      	movs	r3, #12
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	2600      	movs	r6, #0
 800a472:	4630      	mov	r0, r6
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	4e2e      	ldr	r6, [pc, #184]	; (800a534 <_malloc_r+0xe4>)
 800a47a:	f000 f86d 	bl	800a558 <__malloc_lock>
 800a47e:	6833      	ldr	r3, [r6, #0]
 800a480:	461c      	mov	r4, r3
 800a482:	bb34      	cbnz	r4, 800a4d2 <_malloc_r+0x82>
 800a484:	4629      	mov	r1, r5
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ffc2 	bl	800a410 <sbrk_aligned>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	4604      	mov	r4, r0
 800a490:	d14d      	bne.n	800a52e <_malloc_r+0xde>
 800a492:	6834      	ldr	r4, [r6, #0]
 800a494:	4626      	mov	r6, r4
 800a496:	2e00      	cmp	r6, #0
 800a498:	d140      	bne.n	800a51c <_malloc_r+0xcc>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	4631      	mov	r1, r6
 800a49e:	4638      	mov	r0, r7
 800a4a0:	eb04 0803 	add.w	r8, r4, r3
 800a4a4:	f000 f848 	bl	800a538 <_sbrk_r>
 800a4a8:	4580      	cmp	r8, r0
 800a4aa:	d13a      	bne.n	800a522 <_malloc_r+0xd2>
 800a4ac:	6821      	ldr	r1, [r4, #0]
 800a4ae:	3503      	adds	r5, #3
 800a4b0:	1a6d      	subs	r5, r5, r1
 800a4b2:	f025 0503 	bic.w	r5, r5, #3
 800a4b6:	3508      	adds	r5, #8
 800a4b8:	2d0c      	cmp	r5, #12
 800a4ba:	bf38      	it	cc
 800a4bc:	250c      	movcc	r5, #12
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7ff ffa5 	bl	800a410 <sbrk_aligned>
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d02b      	beq.n	800a522 <_malloc_r+0xd2>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	442b      	add	r3, r5
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	e00e      	b.n	800a4f0 <_malloc_r+0xa0>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	1b52      	subs	r2, r2, r5
 800a4d6:	d41e      	bmi.n	800a516 <_malloc_r+0xc6>
 800a4d8:	2a0b      	cmp	r2, #11
 800a4da:	d916      	bls.n	800a50a <_malloc_r+0xba>
 800a4dc:	1961      	adds	r1, r4, r5
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	6025      	str	r5, [r4, #0]
 800a4e2:	bf18      	it	ne
 800a4e4:	6059      	strne	r1, [r3, #4]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	bf08      	it	eq
 800a4ea:	6031      	streq	r1, [r6, #0]
 800a4ec:	5162      	str	r2, [r4, r5]
 800a4ee:	604b      	str	r3, [r1, #4]
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f104 060b 	add.w	r6, r4, #11
 800a4f6:	f000 f835 	bl	800a564 <__malloc_unlock>
 800a4fa:	f026 0607 	bic.w	r6, r6, #7
 800a4fe:	1d23      	adds	r3, r4, #4
 800a500:	1af2      	subs	r2, r6, r3
 800a502:	d0b6      	beq.n	800a472 <_malloc_r+0x22>
 800a504:	1b9b      	subs	r3, r3, r6
 800a506:	50a3      	str	r3, [r4, r2]
 800a508:	e7b3      	b.n	800a472 <_malloc_r+0x22>
 800a50a:	6862      	ldr	r2, [r4, #4]
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	bf0c      	ite	eq
 800a510:	6032      	streq	r2, [r6, #0]
 800a512:	605a      	strne	r2, [r3, #4]
 800a514:	e7ec      	b.n	800a4f0 <_malloc_r+0xa0>
 800a516:	4623      	mov	r3, r4
 800a518:	6864      	ldr	r4, [r4, #4]
 800a51a:	e7b2      	b.n	800a482 <_malloc_r+0x32>
 800a51c:	4634      	mov	r4, r6
 800a51e:	6876      	ldr	r6, [r6, #4]
 800a520:	e7b9      	b.n	800a496 <_malloc_r+0x46>
 800a522:	230c      	movs	r3, #12
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	4638      	mov	r0, r7
 800a528:	f000 f81c 	bl	800a564 <__malloc_unlock>
 800a52c:	e7a1      	b.n	800a472 <_malloc_r+0x22>
 800a52e:	6025      	str	r5, [r4, #0]
 800a530:	e7de      	b.n	800a4f0 <_malloc_r+0xa0>
 800a532:	bf00      	nop
 800a534:	2000094c 	.word	0x2000094c

0800a538 <_sbrk_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_sbrk_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f7 f9b6 	bl	80018b4 <_sbrk>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_sbrk_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_sbrk_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20000954 	.word	0x20000954

0800a558 <__malloc_lock>:
 800a558:	4801      	ldr	r0, [pc, #4]	; (800a560 <__malloc_lock+0x8>)
 800a55a:	f000 b809 	b.w	800a570 <__retarget_lock_acquire_recursive>
 800a55e:	bf00      	nop
 800a560:	20000958 	.word	0x20000958

0800a564 <__malloc_unlock>:
 800a564:	4801      	ldr	r0, [pc, #4]	; (800a56c <__malloc_unlock+0x8>)
 800a566:	f000 b804 	b.w	800a572 <__retarget_lock_release_recursive>
 800a56a:	bf00      	nop
 800a56c:	20000958 	.word	0x20000958

0800a570 <__retarget_lock_acquire_recursive>:
 800a570:	4770      	bx	lr

0800a572 <__retarget_lock_release_recursive>:
 800a572:	4770      	bx	lr

0800a574 <_init>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr

0800a580 <_fini>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr
